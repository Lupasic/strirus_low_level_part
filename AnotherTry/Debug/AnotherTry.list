
AnotherTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccbc  0800ccbc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc4  0800ccc4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc4  0800ccc4  0001ccc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000172c  20000094  0800cd60  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  0800cd60  000217c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031df1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000064fe  00000000  00000000  00051eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002408  00000000  00000000  000583b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002118  00000000  00000000  0005a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000303fc  00000000  00000000  0005c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ca5  00000000  00000000  0008ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a49f  00000000  00000000  000af979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b9e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096f0  00000000  00000000  001b9e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbf0 	.word	0x0800cbf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800cbf0 	.word	0x0800cbf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_Init+0x3c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_Init+0x3c>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f8ff 	bl	80006ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f00b fddd 	bl	800c0ac <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f00b fdad 	bl	800c05c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_IncTick+0x1c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_IncTick+0x20>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4413      	add	r3, r2
 800051e:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x1c>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000dcc 	.word	0x20000dcc
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return uwTick;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_GetTick+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000dcc 	.word	0x20000dcc

0800054c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff ffee 	bl	8000534 <HAL_GetTick>
 8000558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000564:	d004      	beq.n	8000570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_Delay+0x40>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000570:	bf00      	nop
 8000572:	f7ff ffdf 	bl	8000534 <HAL_GetTick>
 8000576:	4602      	mov	r2, r0
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d8f7      	bhi.n	8000572 <HAL_Delay+0x26>
  {
  }
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0b      	blt.n	800061e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <__NVIC_EnableIRQ+0x38>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000e100 	.word	0xe000e100

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff4c 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000712:	f7ff ff61 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000716:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	6978      	ldr	r0, [r7, #20]
 800071e:	f7ff ffb1 	bl	8000684 <NVIC_EncodePriority>
 8000722:	4602      	mov	r2, r0
 8000724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff80 	bl	8000630 <__NVIC_SetPriority>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff54 	bl	80005f4 <__NVIC_EnableIRQ>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <HAL_DMA_Start_IT+0x20>
 8000770:	2302      	movs	r3, #2
 8000772:	e04b      	b.n	800080c <HAL_DMA_Start_IT+0xb8>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2201      	movs	r2, #1
 8000778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b01      	cmp	r3, #1
 8000786:	d13a      	bne.n	80007fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2202      	movs	r2, #2
 800078c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f022 0201 	bic.w	r2, r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f000 f872 	bl	8000896 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d008      	beq.n	80007cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 020e 	orr.w	r2, r2, #14
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e00f      	b.n	80007ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 0204 	bic.w	r2, r2, #4
 80007da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 020a 	orr.w	r2, r2, #10
 80007ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0201 	orr.w	r2, r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e005      	b.n	800080a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000806:	2302      	movs	r3, #2
 8000808:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800080a:	7dfb      	ldrb	r3, [r7, #23]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b02      	cmp	r3, #2
 800082a:	d005      	beq.n	8000838 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2204      	movs	r2, #4
 8000830:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e029      	b.n	800088c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 020e 	bic.w	r2, r2, #14
 8000846:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f022 0201 	bic.w	r2, r2, #1
 8000856:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	f003 021c 	and.w	r2, r3, #28
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	4798      	blx	r3
    }
  }
  return status;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	f003 021c 	and.w	r2, r3, #28
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2b10      	cmp	r3, #16
 80008c6:	d108      	bne.n	80008da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008d8:	e007      	b.n	80008ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	60da      	str	r2, [r3, #12]
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e17f      	b.n	8000c08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 8171 	beq.w	8000c02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0x38>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b12      	cmp	r3, #18
 800092e:	d123      	bne.n	8000978 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	08da      	lsrs	r2, r3, #3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	220f      	movs	r2, #15
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	08da      	lsrs	r2, r3, #3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3208      	adds	r2, #8
 8000972:	6939      	ldr	r1, [r7, #16]
 8000974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0203 	and.w	r2, r3, #3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_GPIO_Init+0xd4>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d007      	beq.n	80009cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c0:	2b11      	cmp	r3, #17
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b12      	cmp	r3, #18
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d118      	bne.n	8000a6c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a40:	2201      	movs	r2, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	f003 0201 	and.w	r2, r3, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80ac 	beq.w	8000c02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <HAL_GPIO_Init+0x32c>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <HAL_GPIO_Init+0x32c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <HAL_GPIO_Init+0x32c>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac2:	4a59      	ldr	r2, [pc, #356]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aec:	d025      	beq.n	8000b3a <HAL_GPIO_Init+0x242>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4e      	ldr	r2, [pc, #312]	; (8000c2c <HAL_GPIO_Init+0x334>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d01f      	beq.n	8000b36 <HAL_GPIO_Init+0x23e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <HAL_GPIO_Init+0x338>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d019      	beq.n	8000b32 <HAL_GPIO_Init+0x23a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_GPIO_Init+0x33c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0x236>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4b      	ldr	r2, [pc, #300]	; (8000c38 <HAL_GPIO_Init+0x340>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d00d      	beq.n	8000b2a <HAL_GPIO_Init+0x232>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <HAL_GPIO_Init+0x344>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x22e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <HAL_GPIO_Init+0x348>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_GPIO_Init+0x22a>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00c      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e00a      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b26:	2305      	movs	r3, #5
 8000b28:	e008      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x244>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	f002 0203 	and.w	r2, r2, #3
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4c:	4936      	ldr	r1, [pc, #216]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b5a:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f47f ae78 	bne.w	8000908 <HAL_GPIO_Init+0x10>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48000800 	.word	0x48000800
 8000c34:	48000c00 	.word	0x48000c00
 8000c38:	48001000 	.word	0x48001000
 8000c3c:	48001400 	.word	0x48001400
 8000c40:	48001800 	.word	0x48001800
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c58:	787b      	ldrb	r3, [r7, #1]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c64:	e002      	b.n	8000c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b08f      	sub	sp, #60	; 0x3c
 8000c7c:	af0a      	add	r7, sp, #40	; 0x28
 8000c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e054      	b.n	8000d34 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d106      	bne.n	8000caa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f00b fbbf 	bl	800c428 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2203      	movs	r2, #3
 8000cae:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fb87 	bl	80063dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	687e      	ldr	r6, [r7, #4]
 8000cd6:	466d      	mov	r5, sp
 8000cd8:	f106 0410 	add.w	r4, r6, #16
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cec:	1d33      	adds	r3, r6, #4
 8000cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf0:	6838      	ldr	r0, [r7, #0]
 8000cf2:	f005 fb10 	bl	8006316 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fb7e 	bl	80063fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	687e      	ldr	r6, [r7, #4]
 8000d0a:	466d      	mov	r5, sp
 8000d0c:	f106 0410 	add.w	r4, r6, #16
 8000d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d20:	1d33      	adds	r3, r6, #4
 8000d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d24:	6838      	ldr	r0, [r7, #0]
 8000d26:	f005 fc8d 	bl	8006644 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d3c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	70fb      	strb	r3, [r7, #3]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70bb      	strb	r3, [r7, #2]
 8000d52:	4613      	mov	r3, r2
 8000d54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_HCD_HC_Init+0x28>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e07f      	b.n	8000e64 <HAL_HCD_HC_Init+0x128>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	333d      	adds	r3, #61	; 0x3d
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3338      	adds	r3, #56	; 0x38
 8000d90:	787a      	ldrb	r2, [r7, #1]
 8000d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	3340      	adds	r3, #64	; 0x40
 8000da4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000da6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	3339      	adds	r3, #57	; 0x39
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	333f      	adds	r3, #63	; 0x3f
 8000dcc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000dd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000dd2:	78fa      	ldrb	r2, [r7, #3]
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dda:	b2d8      	uxtb	r0, r3
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	333a      	adds	r3, #58	; 0x3a
 8000dea:	4602      	mov	r2, r0
 8000dec:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000dee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da0a      	bge.n	8000e0c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	333b      	adds	r3, #59	; 0x3b
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e009      	b.n	8000e20 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	333b      	adds	r3, #59	; 0x3b
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	333c      	adds	r3, #60	; 0x3c
 8000e30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e34:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	787c      	ldrb	r4, [r7, #1]
 8000e3c:	78ba      	ldrb	r2, [r7, #2]
 8000e3e:	78f9      	ldrb	r1, [r7, #3]
 8000e40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4623      	mov	r3, r4
 8000e52:	f005 fd3b 	bl	80068cc <USB_HC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}

08000e6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_HCD_HC_Halt+0x1e>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e00f      	b.n	8000eaa <HAL_HCD_HC_Halt+0x3e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 ff19 	bl	8006cd2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	70fb      	strb	r3, [r7, #3]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70bb      	strb	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	333b      	adds	r3, #59	; 0x3b
 8000ede:	78ba      	ldrb	r2, [r7, #2]
 8000ee0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	333f      	adds	r3, #63	; 0x3f
 8000ef2:	787a      	ldrb	r2, [r7, #1]
 8000ef4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10a      	bne.n	8000f12 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e009      	b.n	8000f26 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3342      	adds	r3, #66	; 0x42
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	f200 80d6 	bhi.w	80010da <HAL_HCD_HC_SubmitRequest+0x226>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	080010c5 	.word	0x080010c5
 8000f3c:	08000fb1 	.word	0x08000fb1
 8000f40:	0800103b 	.word	0x0800103b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000f44:	7c3b      	ldrb	r3, [r7, #16]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	f040 80c9 	bne.w	80010de <HAL_HCD_HC_SubmitRequest+0x22a>
 8000f4c:	78bb      	ldrb	r3, [r7, #2]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f040 80c5 	bne.w	80010de <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f54:	8b3b      	ldrh	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3351      	adds	r3, #81	; 0x51
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3351      	adds	r3, #81	; 0x51
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10a      	bne.n	8000f9a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3342      	adds	r3, #66	; 0x42
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f98:	e0a1      	b.n	80010de <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3342      	adds	r3, #66	; 0x42
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
      break;
 8000fae:	e096      	b.n	80010de <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d120      	bne.n	8000ff8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3351      	adds	r3, #81	; 0x51
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10a      	bne.n	8000fe2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3342      	adds	r3, #66	; 0x42
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000fe0:	e07e      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3342      	adds	r3, #66	; 0x42
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	701a      	strb	r2, [r3, #0]
      break;
 8000ff6:	e073      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3350      	adds	r3, #80	; 0x50
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10a      	bne.n	8001024 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3342      	adds	r3, #66	; 0x42
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
      break;
 8001022:	e05d      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3342      	adds	r3, #66	; 0x42
 8001034:	2202      	movs	r2, #2
 8001036:	701a      	strb	r2, [r3, #0]
      break;
 8001038:	e052      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d120      	bne.n	8001082 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3351      	adds	r3, #81	; 0x51
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3342      	adds	r3, #66	; 0x42
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800106a:	e039      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3342      	adds	r3, #66	; 0x42
 800107c:	2202      	movs	r2, #2
 800107e:	701a      	strb	r2, [r3, #0]
      break;
 8001080:	e02e      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001082:	78fa      	ldrb	r2, [r7, #3]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3350      	adds	r3, #80	; 0x50
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10a      	bne.n	80010ae <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	3342      	adds	r3, #66	; 0x42
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
      break;
 80010ac:	e018      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3342      	adds	r3, #66	; 0x42
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
      break;
 80010c2:	e00d      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3342      	adds	r3, #66	; 0x42
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
      break;
 80010d8:	e002      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80010da:	bf00      	nop
 80010dc:	e000      	b.n	80010e0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80010de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80010e0:	78fa      	ldrb	r2, [r7, #3]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	3344      	adds	r3, #68	; 0x44
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	8b39      	ldrh	r1, [r7, #24]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4403      	add	r3, r0
 8001104:	3348      	adds	r3, #72	; 0x48
 8001106:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	335c      	adds	r3, #92	; 0x5c
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800111c:	78fa      	ldrb	r2, [r7, #3]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	334c      	adds	r3, #76	; 0x4c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001130:	78fa      	ldrb	r2, [r7, #3]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3339      	adds	r3, #57	; 0x39
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	335d      	adds	r3, #93	; 0x5d
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	78fa      	ldrb	r2, [r7, #3]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	3338      	adds	r3, #56	; 0x38
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f005 fc9f 	bl	8006ab0 <USB_HC_StartXfer>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f005 fa13 	bl	80065be <USB_GetMode>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 80f1 	bne.w	8001382 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 f9f7 	bl	8006598 <USB_ReadInterrupts>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80e7 	beq.w	8001380 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 f9ee 	bl	8006598 <USB_ReadInterrupts>
 80011bc:	4603      	mov	r3, r0
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011c6:	d104      	bne.n	80011d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 f9de 	bl	8006598 <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011e6:	d104      	bne.n	80011f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 f9ce 	bl	8006598 <USB_ReadInterrupts>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001206:	d104      	bne.n	8001212 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001210:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f9be 	bl	8006598 <USB_ReadInterrupts>
 800121c:	4603      	mov	r3, r0
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d103      	bne.n	800122e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2202      	movs	r2, #2
 800122c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f005 f9b0 	bl	8006598 <USB_ReadInterrupts>
 8001238:	4603      	mov	r3, r0
 800123a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800123e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001242:	d117      	bne.n	8001274 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001252:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001256:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f00b f967 	bl	800c52c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fa6b 	bl	8006740 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f98d 	bl	8006598 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d102      	bne.n	8001290 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f884 	bl	8002398 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f005 f97f 	bl	8006598 <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d106      	bne.n	80012b2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f00b f925 	bl	800c4f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2208      	movs	r2, #8
 80012b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 f96e 	bl	8006598 <USB_ReadInterrupts>
 80012bc:	4603      	mov	r3, r0
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012c6:	d138      	bne.n	800133a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fcef 	bl	8006cb0 <USB_HC_ReadInterrupt>
 80012d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e025      	b.n	8001326 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d018      	beq.n	8001320 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	015a      	lsls	r2, r3, #5
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001304:	d106      	bne.n	8001314 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f8cf 	bl	80014b0 <HCD_HC_IN_IRQHandler>
 8001312:	e005      	b.n	8001320 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fc3b 	bl	8001b96 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3d4      	bcc.n	80012da <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f005 f92a 	bl	8006598 <USB_ReadInterrupts>
 8001344:	4603      	mov	r3, r0
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b10      	cmp	r3, #16
 800134c:	d101      	bne.n	8001352 <HAL_HCD_IRQHandler+0x1d6>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_HCD_IRQHandler+0x1d8>
 8001352:	2300      	movs	r3, #0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0210 	bic.w	r2, r2, #16
 8001366:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 ff69 	bl	8002240 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	e000      	b.n	8001382 <HAL_HCD_IRQHandler+0x206>
      return;
 8001380:	bf00      	nop
    }
  }
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_HCD_Start+0x16>
 800139a:	2302      	movs	r3, #2
 800139c:	e013      	b.n	80013c6 <HAL_HCD_Start+0x3e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 f805 	bl	80063ba <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fa26 	bl	8006808 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_HCD_Stop+0x16>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e00d      	b.n	8001400 <HAL_HCD_Stop+0x32>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fd6d 	bl	8006ed0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f005 f9cd 	bl	80067b4 <USB_ResetPort>
 800141a:	4603      	mov	r3, r0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	335c      	adds	r3, #92	; 0x5c
 8001440:	781b      	ldrb	r3, [r3, #0]
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	334c      	adds	r3, #76	; 0x4c
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fa0f 	bl	80068a8 <USB_GetCurrentFrame>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 f9ea 	bl	800687a <USB_GetHostSpeed>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d119      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ec:	461a      	mov	r2, r3
 80014ee:	2304      	movs	r3, #4
 80014f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	0151      	lsls	r1, r2, #5
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	440a      	add	r2, r1
 8001508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	60d3      	str	r3, [r2, #12]
 8001512:	e095      	b.n	8001640 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4413      	add	r3, r2
 800151c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b20      	cmp	r3, #32
 8001528:	d109      	bne.n	800153e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4413      	add	r3, r2
 8001532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001536:	461a      	mov	r2, r3
 8001538:	2320      	movs	r3, #32
 800153a:	6093      	str	r3, [r2, #8]
 800153c:	e080      	b.n	8001640 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4413      	add	r3, r2
 8001546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b08      	cmp	r3, #8
 8001552:	d134      	bne.n	80015be <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	0151      	lsls	r1, r2, #5
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	440a      	add	r2, r1
 800156a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	335d      	adds	r3, #93	; 0x5d
 8001584:	2205      	movs	r2, #5
 8001586:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4413      	add	r3, r2
 8001590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001594:	461a      	mov	r2, r3
 8001596:	2310      	movs	r3, #16
 8001598:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a6:	461a      	mov	r2, r3
 80015a8:	2308      	movs	r3, #8
 80015aa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fb8b 	bl	8006cd2 <USB_HC_Halt>
 80015bc:	e040      	b.n	8001640 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d4:	d134      	bne.n	8001640 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	0151      	lsls	r1, r2, #5
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	440a      	add	r2, r1
 80015ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f005 fb66 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	015a      	lsls	r2, r3, #5
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4413      	add	r3, r2
 800160e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001612:	461a      	mov	r2, r3
 8001614:	2310      	movs	r3, #16
 8001616:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	335d      	adds	r3, #93	; 0x5d
 8001628:	2208      	movs	r2, #8
 800162a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	461a      	mov	r2, r3
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4413      	add	r3, r2
 8001648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001656:	d122      	bne.n	800169e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4413      	add	r3, r2
 8001660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	0151      	lsls	r1, r2, #5
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	440a      	add	r2, r1
 800166e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f005 fb25 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4413      	add	r3, r2
 8001690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001694:	461a      	mov	r2, r3
 8001696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800169c:	e277      	b.n	8001b8e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	f040 80a1 	bne.w	80017f8 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	335d      	adds	r3, #93	; 0x5d
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3358      	adds	r3, #88	; 0x58
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ea:	461a      	mov	r2, r3
 80016ec:	2301      	movs	r3, #1
 80016ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	333f      	adds	r3, #63	; 0x3f
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	333f      	adds	r3, #63	; 0x3f
 8001716:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001718:	2b02      	cmp	r3, #2
 800171a:	d121      	bne.n	8001760 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4413      	add	r3, r2
 8001724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	0151      	lsls	r1, r2, #5
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	440a      	add	r2, r1
 8001732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f005 fac3 	bl	8006cd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	015a      	lsls	r2, r3, #5
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4413      	add	r3, r2
 8001754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001758:	461a      	mov	r2, r3
 800175a:	2310      	movs	r3, #16
 800175c:	6093      	str	r3, [r2, #8]
 800175e:	e034      	b.n	80017ca <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	333f      	adds	r3, #63	; 0x3f
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d129      	bne.n	80017ca <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	0151      	lsls	r1, r2, #5
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	440a      	add	r2, r1
 800178c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001794:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	335c      	adds	r3, #92	; 0x5c
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	335c      	adds	r3, #92	; 0x5c
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4601      	mov	r1, r0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f00a febf 	bl	800c548 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3350      	adds	r3, #80	; 0x50
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3350      	adds	r3, #80	; 0x50
 80017f2:	4602      	mov	r2, r0
 80017f4:	701a      	strb	r2, [r3, #0]
}
 80017f6:	e1ca      	b.n	8001b8e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	f040 80f1 	bne.w	80019f2 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4413      	add	r3, r2
 8001818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	0151      	lsls	r1, r2, #5
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	440a      	add	r2, r1
 8001826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	335d      	adds	r3, #93	; 0x5d
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10a      	bne.n	800185c <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	335c      	adds	r3, #92	; 0x5c
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e0b0      	b.n	80019be <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	335d      	adds	r3, #93	; 0x5d
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d10a      	bne.n	8001888 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	335c      	adds	r3, #92	; 0x5c
 8001882:	2205      	movs	r2, #5
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e09a      	b.n	80019be <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	335d      	adds	r3, #93	; 0x5d
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d00a      	beq.n	80018b4 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	335d      	adds	r3, #93	; 0x5d
 80018ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d156      	bne.n	8001962 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	3358      	adds	r3, #88	; 0x58
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4403      	add	r3, r0
 80018d6:	3358      	adds	r3, #88	; 0x58
 80018d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3358      	adds	r3, #88	; 0x58
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d914      	bls.n	800191a <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3358      	adds	r3, #88	; 0x58
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	335c      	adds	r3, #92	; 0x5c
 8001914:	2204      	movs	r2, #4
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	e009      	b.n	800192e <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	335c      	adds	r3, #92	; 0x5c
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001944:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800194c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	461a      	mov	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02d      	b.n	80019be <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	335d      	adds	r3, #93	; 0x5d
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d122      	bne.n	80019be <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	335c      	adds	r3, #92	; 0x5c
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	015a      	lsls	r2, r3, #5
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b8:	461a      	mov	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ca:	461a      	mov	r2, r3
 80019cc:	2302      	movs	r3, #2
 80019ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	b2d8      	uxtb	r0, r3
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	335c      	adds	r3, #92	; 0x5c
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4601      	mov	r1, r0
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f00a fdac 	bl	800c548 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019f0:	e0cd      	b.n	8001b8e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a04:	2b80      	cmp	r3, #128	; 0x80
 8001a06:	d13e      	bne.n	8001a86 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	0151      	lsls	r1, r2, #5
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	440a      	add	r2, r1
 8001a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3358      	adds	r3, #88	; 0x58
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4403      	add	r3, r0
 8001a4a:	3358      	adds	r3, #88	; 0x58
 8001a4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	335d      	adds	r3, #93	; 0x5d
 8001a5e:	2206      	movs	r2, #6
 8001a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 f930 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	6093      	str	r3, [r2, #8]
}
 8001a84:	e083      	b.n	8001b8e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d178      	bne.n	8001b8e <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	333f      	adds	r3, #63	; 0x3f
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d122      	bne.n	8001af8 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3358      	adds	r3, #88	; 0x58
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 f8ee 	bl	8006cd2 <USB_HC_Halt>
 8001af6:	e041      	b.n	8001b7c <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	333f      	adds	r3, #63	; 0x3f
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	333f      	adds	r3, #63	; 0x3f
 8001b1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d12b      	bne.n	8001b7c <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3358      	adds	r3, #88	; 0x58
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	335d      	adds	r3, #93	; 0x5d
 8001b48:	2203      	movs	r2, #3
 8001b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	0151      	lsls	r1, r2, #5
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	440a      	add	r2, r1
 8001b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 f8ab 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	6093      	str	r3, [r2, #8]
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d119      	bne.n	8001bfa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	0151      	lsls	r1, r2, #5
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	440a      	add	r2, r1
 8001bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bf8:	e31e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d141      	bne.n	8001c94 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2320      	movs	r3, #32
 8001c20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	333d      	adds	r3, #61	; 0x3d
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	f040 82ff 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	333d      	adds	r3, #61	; 0x3d
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	335c      	adds	r3, #92	; 0x5c
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	0151      	lsls	r1, r2, #5
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	440a      	add	r2, r1
 8001c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f005 f820 	bl	8006cd2 <USB_HC_Halt>
}
 8001c92:	e2d1      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d13f      	bne.n	8001d2a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	335d      	adds	r3, #93	; 0x5d
 8001cba:	2204      	movs	r2, #4
 8001cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	333d      	adds	r3, #61	; 0x3d
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3358      	adds	r3, #88	; 0x58
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	0151      	lsls	r1, r2, #5
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	440a      	add	r2, r1
 8001cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 ffde 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	461a      	mov	r2, r3
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	6093      	str	r3, [r2, #8]
}
 8001d28:	e286      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d122      	bne.n	8001d88 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 ffb0 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d84:	6093      	str	r3, [r2, #8]
}
 8001d86:	e257      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d135      	bne.n	8001e0a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3358      	adds	r3, #88	; 0x58
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	0151      	lsls	r1, r2, #5
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	440a      	add	r2, r1
 8001dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 ff78 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	2301      	movs	r3, #1
 8001df2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	335d      	adds	r3, #93	; 0x5d
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
}
 8001e08:	e216      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d12b      	bne.n	8001e78 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2308      	movs	r3, #8
 8001e30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	0151      	lsls	r1, r2, #5
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	440a      	add	r2, r1
 8001e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 ff38 	bl	8006cd2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	335d      	adds	r3, #93	; 0x5d
 8001e72:	2205      	movs	r2, #5
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	e1df      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d135      	bne.n	8001efa <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3358      	adds	r3, #88	; 0x58
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	335d      	adds	r3, #93	; 0x5d
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	0151      	lsls	r1, r2, #5
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fef6 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	e19e      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d12b      	bne.n	8001f68 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fec9 	bl	8006cd2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335d      	adds	r3, #93	; 0x5d
 8001f50:	2206      	movs	r2, #6
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	6093      	str	r3, [r2, #8]
}
 8001f66:	e167      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d135      	bne.n	8001fec <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 fe91 	bl	8006cd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335d      	adds	r3, #93	; 0x5d
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	e125      	b.n	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	f040 811a 	bne.w	8002238 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	0151      	lsls	r1, r2, #5
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	440a      	add	r2, r1
 800201a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201e:	f023 0302 	bic.w	r3, r3, #2
 8002022:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	335d      	adds	r3, #93	; 0x5d
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d137      	bne.n	80020aa <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	335c      	adds	r3, #92	; 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d00b      	beq.n	800207c <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	333f      	adds	r3, #63	; 0x3f
 8002074:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	f040 80c5 	bne.w	8002206 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3351      	adds	r3, #81	; 0x51
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2d8      	uxtb	r0, r3
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3351      	adds	r3, #81	; 0x51
 80020a4:	4602      	mov	r2, r0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e0ad      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d10a      	bne.n	80020d6 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e097      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d10a      	bne.n	8002102 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e081      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10a      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2205      	movs	r2, #5
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e06b      	b.n	8002206 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	335d      	adds	r3, #93	; 0x5d
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d00a      	beq.n	800215a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335d      	adds	r3, #93	; 0x5d
 8002154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002156:	2b08      	cmp	r3, #8
 8002158:	d155      	bne.n	8002206 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3358      	adds	r3, #88	; 0x58
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4403      	add	r3, r0
 800217c:	3358      	adds	r3, #88	; 0x58
 800217e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3358      	adds	r3, #88	; 0x58
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d914      	bls.n	80021c0 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	335c      	adds	r3, #92	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e009      	b.n	80021d4 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	2202      	movs	r2, #2
 80021d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	2302      	movs	r3, #2
 8002216:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4601      	mov	r1, r0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f00a f988 	bl	800c548 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	0c5b      	lsrs	r3, r3, #17
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002274:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d003      	beq.n	8002284 <HCD_RXQLVL_IRQHandler+0x44>
 800227c:	2b05      	cmp	r3, #5
 800227e:	f000 8082 	beq.w	8002386 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002282:	e083      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07f      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3344      	adds	r3, #68	; 0x44
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d074      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	b292      	uxth	r2, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f004 f943 	bl	8006546 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3344      	adds	r3, #68	; 0x44
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	18d1      	adds	r1, r2, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4403      	add	r3, r0
 80022e4:	3344      	adds	r3, #68	; 0x44
 80022e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	334c      	adds	r3, #76	; 0x4c
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	18d1      	adds	r1, r2, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4403      	add	r3, r0
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HCD_RXQLVL_IRQHandler+0x154>)
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d031      	beq.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002344:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3350      	adds	r3, #80	; 0x50
 8002380:	4602      	mov	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e001      	b.n	800238a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800238a:	bf00      	nop
  }
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	1ff80000 	.word	0x1ff80000

08002398 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d113      	bne.n	80023f8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10a      	bne.n	80023f0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f00a f890 	bl	800c510 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d147      	bne.n	8002492 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d129      	bne.n	8002468 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d113      	bne.n	8002444 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002426:	d106      	bne.n	8002436 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f004 f986 	bl	8006740 <USB_InitFSLSPClkSel>
 8002434:	e011      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f97f 	bl	8006740 <USB_InitFSLSPClkSel>
 8002442:	e00a      	b.n	800245a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	461a      	mov	r2, r3
 8002454:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002458:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f00a f886 	bl	800c56c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f00a f855 	bl	800c510 <HAL_HCD_Connect_Callback>
 8002466:	e014      	b.n	8002492 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f00a f88d 	bl	800c588 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800247c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002480:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002490:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d103      	bne.n	80024a4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e081      	b.n	80025ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f009 f896 	bl	800b610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800253e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d104      	bne.n	8002552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69d9      	ldr	r1, [r3, #28]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d138      	bne.n	800265e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e032      	b.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2224      	movs	r2, #36	; 0x24
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002628:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	d139      	bne.n	80026f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800268c:	2302      	movs	r3, #2
 800268e:	e033      	b.n	80026f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0af      	b.n	8002876 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f009 f81c 	bl	800b768 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e00a      	b.n	8002764 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3304      	adds	r3, #4
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	d9f1      	bls.n	800274e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0204 	orr.w	r2, r2, #4
 8002778:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <HAL_LCD_Init+0x17c>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6851      	ldr	r1, [r2, #4]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6892      	ldr	r2, [r2, #8]
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	69d2      	ldr	r2, [r2, #28]
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6a12      	ldr	r2, [r2, #32]
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6992      	ldr	r2, [r2, #24]
 80027aa:	4311      	orrs	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f862 	bl	8002884 <LCD_WaitForSynchro>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_LCD_Init+0xca>
  {
    return status;
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	e053      	b.n	8002876 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002806:	f7fd fe95 	bl	8000534 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800280c:	e00c      	b.n	8002828 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800280e:	f7fd fe91 	bl	8000534 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d904      	bls.n	8002828 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2208      	movs	r2, #8
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e026      	b.n	8002876 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d1eb      	bne.n	800280e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002836:	f7fd fe7d 	bl	8000534 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800283c:	e00c      	b.n	8002858 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800283e:	f7fd fe79 	bl	8000534 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284c:	d904      	bls.n	8002858 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2210      	movs	r2, #16
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e00e      	b.n	8002876 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	d1eb      	bne.n	800283e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	fc00000e 	.word	0xfc00000e

08002884 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800288c:	f7fd fe52 	bl	8000534 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002892:	e00c      	b.n	80028ae <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002894:	f7fd fe4e 	bl	8000534 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a2:	d904      	bls.n	80028ae <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e007      	b.n	80028be <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d1eb      	bne.n	8002894 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d130      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d038      	beq.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2232      	movs	r2, #50	; 0x32
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002928:	e002      	b.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3b01      	subs	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d102      	bne.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f2      	bne.n	800292a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d110      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e00f      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d007      	beq.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40007000 	.word	0x40007000
 8002988:	2000002c 	.word	0x2000002c
 800298c:	431bde83 	.word	0x431bde83

08002990 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800299a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299e:	6053      	str	r3, [r2, #4]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7fd fdbc 	bl	8000534 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e06f      	b.n	8002aa8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_QSPI_Init+0x28>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e067      	b.n	8002aa8 <HAL_QSPI_Init+0xf8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f009 f84b 	bl	800ba90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80029fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f858 	bl	8002ab4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	021a      	lsls	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f850 	bl	8002ad0 <QSPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d131      	bne.n	8002a9e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	f023 0310 	bic.w	r3, r3, #16
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6852      	ldr	r2, [r2, #4]
 8002a4c:	0611      	lsls	r1, r2, #24
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68d2      	ldr	r2, [r2, #12]
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_QSPI_Init+0x100>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6912      	ldr	r2, [r2, #16]
 8002a6a:	0411      	lsls	r1, r2, #16
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6952      	ldr	r2, [r2, #20]
 8002a70:	4311      	orrs	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6992      	ldr	r2, [r2, #24]
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	ffe0f8fe 	.word	0xffe0f8fe

08002ab4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ae0:	e01a      	b.n	8002b18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d016      	beq.n	8002b18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7fd fd23 	bl	8000534 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2204      	movs	r2, #4
 8002b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e00e      	b.n	8002b36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1d6      	bne.n	8002ae2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e39d      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b52:	4ba4      	ldr	r3, [pc, #656]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	4ba1      	ldr	r3, [pc, #644]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80e1 	beq.w	8002d36 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_RCC_OscConfig+0x4a>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	f040 8088 	bne.w	8002c92 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 8084 	bne.w	8002c92 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b8a:	4b96      	ldr	r3, [pc, #600]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e375      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCC_OscConfig+0x7c>
 8002bb2:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bba:	e005      	b.n	8002bc8 <HAL_RCC_OscConfig+0x88>
 8002bbc:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d223      	bcs.n	8002c14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd4b 	bl	800366c <RCC_SetFlashLatencyFromMSIRange>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e356      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be0:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	497a      	ldr	r1, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfe:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	4975      	ldr	r1, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
 8002c12:	e022      	b.n	8002c5a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c14:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a72      	ldr	r2, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	496d      	ldr	r1, [pc, #436]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c32:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	4968      	ldr	r1, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fd0e 	bl	800366c <RCC_SetFlashLatencyFromMSIRange>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e319      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c5a:	f000 fc03 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4601      	mov	r1, r0
 8002c60:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2a8>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x2b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f009 fa14 	bl	800c0ac <HAL_InitTick>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d052      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	e2fd      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d032      	beq.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c9a:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a51      	ldr	r2, [pc, #324]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ca6:	f7fd fc45 	bl	8000534 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cae:	f7fd fc41 	bl	8000534 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e2e6      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a44      	ldr	r2, [pc, #272]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	493f      	ldr	r1, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	493a      	ldr	r1, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
 8002cfe:	e01a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d00:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a37      	ldr	r2, [pc, #220]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d0c:	f7fd fc12 	bl	8000534 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d14:	f7fd fc0e 	bl	8000534 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e2b3      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1d4>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d074      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x214>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d10e      	bne.n	8002d6c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d064      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2ea>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d160      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e290      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x244>
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x280>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x268>
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x280>
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fd fbb4 	bl	8000534 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	e011      	b.n	8002df4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fd fbb0 	bl	8000534 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d90a      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e255      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	0800cc74 	.word	0x0800cc74
 8002dec:	2000002c 	.word	0x2000002c
 8002df0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df4:	4bae      	ldr	r3, [pc, #696]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0e7      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x290>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fd fb97 	bl	8000534 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fd fb93 	bl	8000534 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e238      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1c:	4ba4      	ldr	r3, [pc, #656]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2ca>
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d060      	beq.n	8002efa <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x30a>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d119      	bne.n	8002e78 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4a:	4b99      	ldr	r3, [pc, #612]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x322>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e215      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b93      	ldr	r3, [pc, #588]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	498f      	ldr	r1, [pc, #572]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e76:	e040      	b.n	8002efa <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d023      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8a      	ldr	r2, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fd fb52 	bl	8000534 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fd fb4e 	bl	8000534 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1f3      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea6:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	497b      	ldr	r1, [pc, #492]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 8002ec6:	e018      	b.n	8002efa <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec8:	4b79      	ldr	r3, [pc, #484]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a78      	ldr	r2, [pc, #480]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fd fb2e 	bl	8000534 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fd fb2a 	bl	8000534 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1cf      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d03c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	4a66      	ldr	r2, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fd fb09 	bl	8000534 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f26:	f7fd fb05 	bl	8000534 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1aa      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f38:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3e6>
 8002f46:	e01b      	b.n	8002f80 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4e:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fd faec 	bl	8000534 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fd fae8 	bl	8000534 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e18d      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f72:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ef      	bne.n	8002f60 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a5 	beq.w	80030d8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10d      	bne.n	8002fba <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <HAL_RCC_OscConfig+0x574>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_OscConfig+0x574>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3a      	ldr	r2, [pc, #232]	; (80030b4 <HAL_RCC_OscConfig+0x574>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fd faaf 	bl	8000534 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fd faab 	bl	8000534 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e150      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCC_OscConfig+0x574>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d2>
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	4a2a      	ldr	r2, [pc, #168]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003010:	e024      	b.n	800305c <HAL_RCC_OscConfig+0x51c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d110      	bne.n	800303c <HAL_RCC_OscConfig+0x4fc>
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303a:	e00f      	b.n	800305c <HAL_RCC_OscConfig+0x51c>
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d016      	beq.n	8003092 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fd fa66 	bl	8000534 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fa62 	bl	8000534 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e105      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x570>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ed      	beq.n	800306c <HAL_RCC_OscConfig+0x52c>
 8003090:	e019      	b.n	80030c6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fd fa4f 	bl	8000534 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fd fa4b 	bl	8000534 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d905      	bls.n	80030b8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0ee      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b8:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e9      	bne.n	800309a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80d5 	beq.w	800328c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	f000 808e 	beq.w	8003206 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d15b      	bne.n	80031aa <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80030f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd fa19 	bl	8000534 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fd fa15 	bl	8000534 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0ba      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003118:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003124:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b5c      	ldr	r3, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x75c>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003134:	3a01      	subs	r2, #1
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800313e:	0212      	lsls	r2, r2, #8
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003146:	0852      	lsrs	r2, r2, #1
 8003148:	3a01      	subs	r2, #1
 800314a:	0552      	lsls	r2, r2, #21
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003152:	0852      	lsrs	r2, r2, #1
 8003154:	3a01      	subs	r2, #1
 8003156:	0652      	lsls	r2, r2, #25
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800315e:	0912      	lsrs	r2, r2, #4
 8003160:	0452      	lsls	r2, r2, #17
 8003162:	430a      	orrs	r2, r1
 8003164:	494c      	ldr	r1, [pc, #304]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 8003166:	4313      	orrs	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316a:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a4a      	ldr	r2, [pc, #296]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 8003170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003174:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 800317c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003180:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd f9d7 	bl	8000534 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fd f9d3 	bl	8000534 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e078      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319c:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x64a>
 80031a8:	e070      	b.n	800328c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a31      	ldr	r2, [pc, #196]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd f9a9 	bl	8000534 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd f9a5 	bl	8000534 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e04a      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x6a6>
 8003204:	e042      	b.n	800328c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e03d      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003212:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x758>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0203 	and.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	429a      	cmp	r2, r3
 8003224:	d130      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	3b01      	subs	r3, #1
 8003232:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d127      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d11f      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003252:	2a07      	cmp	r2, #7
 8003254:	bf14      	ite	ne
 8003256:	2201      	movne	r2, #1
 8003258:	2200      	moveq	r2, #0
 800325a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	d113      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d109      	bne.n	8003288 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	3b01      	subs	r3, #1
 8003282:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	f99d808c 	.word	0xf99d808c

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0c8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4961      	ldr	r1, [pc, #388]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b0      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d04c      	beq.n	800338a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f8:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d121      	bne.n	8003348 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e09e      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d107      	bne.n	8003320 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003310:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e092      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e086      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e07e      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003348:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 0203 	bic.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	493f      	ldr	r1, [pc, #252]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335a:	f7fd f8eb 	bl	8000534 <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003360:	e00a      	b.n	8003378 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003362:	f7fd f8e7 	bl	8000534 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e066      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003378:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 020c 	and.w	r2, r3, #12
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	429a      	cmp	r2, r3
 8003388:	d1eb      	bne.n	8003362 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	492c      	ldr	r1, [pc, #176]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d210      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4924      	ldr	r1, [pc, #144]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x1b0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e036      	b.n	8003446 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4918      	ldr	r1, [pc, #96]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4910      	ldr	r1, [pc, #64]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003416:	f000 f825 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800341a:	4601      	mov	r1, r0
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	fa21 f303 	lsr.w	r3, r1, r3
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f008 fe36 	bl	800c0ac <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	72fb      	strb	r3, [r7, #11]

  return status;
 8003444:	7afb      	ldrb	r3, [r7, #11]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
 8003458:	0800cc74 	.word	0x0800cc74
 800345c:	2000002c 	.word	0x2000002c
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x34>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d121      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d11e      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b4:	4b2c      	ldr	r3, [pc, #176]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e004      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d133      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xa4>
 8003502:	2b03      	cmp	r3, #3
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0xaa>
 8003506:	e005      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_GetSysClockFreq+0x10c>)
 800350a:	617b      	str	r3, [r7, #20]
      break;
 800350c:	e005      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_GetSysClockFreq+0x110>)
 8003510:	617b      	str	r3, [r7, #20]
      break;
 8003512:	e002      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	617b      	str	r3, [r7, #20]
      break;
 8003518:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	3301      	adds	r3, #1
 8003526:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	fb02 f203 	mul.w	r2, r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_GetSysClockFreq+0x104>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0e5b      	lsrs	r3, r3, #25
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800355a:	69bb      	ldr	r3, [r7, #24]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3724      	adds	r7, #36	; 0x24
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40021000 	.word	0x40021000
 800356c:	0800cc8c 	.word	0x0800cc8c
 8003570:	00f42400 	.word	0x00f42400
 8003574:	007a1200 	.word	0x007a1200

08003578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_RCC_GetHCLKFreq+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	2000002c 	.word	0x2000002c

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003594:	f7ff fff0 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8003598:	4601      	mov	r1, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800cc84 	.word	0x0800cc84

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c0:	f7ff ffda 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 80035c4:	4601      	mov	r1, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	0800cc84 	.word	0x0800cc84

080035e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	220f      	movs	r2, #15
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_RCC_GetClockConfig+0x60>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0207 	and.w	r2, r3, #7
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40022000 	.word	0x40022000

0800364c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_EnableCSS+0x1c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_RCC_EnableCSS+0x1c>)
 8003656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000

0800366c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003684:	f7ff f920 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 8003688:	6178      	str	r0, [r7, #20]
 800368a:	e014      	b.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a4:	f7ff f910 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 80036a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036bc:	d10b      	bne.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d919      	bls.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2ba0      	cmp	r3, #160	; 0xa0
 80036c8:	d902      	bls.n	80036d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ca:	2302      	movs	r3, #2
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e013      	b.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d0:	2301      	movs	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e010      	b.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d902      	bls.n	80036e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036dc:	2303      	movs	r3, #3
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	e00a      	b.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d102      	bne.n	80036ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036e8:	2302      	movs	r3, #2
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	e004      	b.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d101      	bne.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f4:	2301      	movs	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 0207 	bic.w	r2, r3, #7
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	40022000 	.word	0x40022000

0800372c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003734:	2300      	movs	r3, #0
 8003736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003738:	2300      	movs	r3, #0
 800373a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03f      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d01c      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003756:	d802      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800375c:	e01f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800375e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003762:	d003      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003764:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003768:	d01c      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800376c:	4b85      	ldr	r3, [pc, #532]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a84      	ldr	r2, [pc, #528]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 ff31 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3320      	adds	r3, #32
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f818 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	74fb      	strb	r3, [r7, #19]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ac:	4b75      	ldr	r3, [pc, #468]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ba:	4972      	ldr	r1, [pc, #456]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037c2:	e001      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d03f      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037dc:	d01c      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e2:	d802      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80037e8:	e01f      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80037f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f4:	d01c      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80037f6:	e018      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f8:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a61      	ldr	r2, [pc, #388]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 feeb 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003816:	e00c      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ffd2 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	74fb      	strb	r3, [r7, #19]
      break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003838:	4b52      	ldr	r3, [pc, #328]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003846:	494f      	ldr	r1, [pc, #316]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a0 	beq.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	4a40      	ldr	r2, [pc, #256]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	; 0x58
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003894:	2301      	movs	r3, #1
 8003896:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a4:	f7fc fe46 	bl	8000534 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038aa:	e009      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ac:	f7fc fe42 	bl	8000534 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	74fb      	strb	r3, [r7, #19]
        break;
 80038be:	e005      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d15c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038d2:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d019      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fc fe01 	bl	8000534 <HAL_GetTick>
 8003932:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003934:	e00b      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fc fdfd 	bl	8000534 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f241 3288 	movw	r2, #5000	; 0x1388
 8003944:	4293      	cmp	r3, r2
 8003946:	d902      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	74fb      	strb	r3, [r7, #19]
            break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ec      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003990:	7c7b      	ldrb	r3, [r7, #17]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	4a9d      	ldr	r2, [pc, #628]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ae:	4b98      	ldr	r3, [pc, #608]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 0203 	bic.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	4994      	ldr	r1, [pc, #592]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d0:	4b8f      	ldr	r3, [pc, #572]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 020c 	bic.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	498c      	ldr	r1, [pc, #560]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4983      	ldr	r1, [pc, #524]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a14:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	497b      	ldr	r1, [pc, #492]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a36:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a44:	4972      	ldr	r1, [pc, #456]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a58:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	496a      	ldr	r1, [pc, #424]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	4961      	ldr	r1, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9c:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	4959      	ldr	r1, [pc, #356]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	4950      	ldr	r1, [pc, #320]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	4948      	ldr	r1, [pc, #288]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b02:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	493f      	ldr	r1, [pc, #252]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d028      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	4937      	ldr	r1, [pc, #220]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b42:	d106      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4e:	60d3      	str	r3, [r2, #12]
 8003b50:	e011      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fd40 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	491f      	ldr	r1, [pc, #124]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bac:	60d3      	str	r3, [r2, #12]
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fd11 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02b      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfe:	d109      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fcdf 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	4928      	ldr	r1, [pc, #160]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c62:	d10d      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fcbc 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d014      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd99 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbe:	490d      	ldr	r1, [pc, #52]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce2:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cea:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0a:	d137      	bne.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003d0c:	4bb8      	ldr	r3, [pc, #736]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d014      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d24:	d01e      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003d2c:	f000 bc53 	b.w	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d30:	4baf      	ldr	r3, [pc, #700]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f040 8446 	bne.w	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8003d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d44:	61fb      	str	r3, [r7, #28]
      break;
 8003d46:	f000 bc41 	b.w	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d4a:	4ba9      	ldr	r3, [pc, #676]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	f040 843b 	bne.w	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8003d5a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003d5e:	61fb      	str	r3, [r7, #28]
      break;
 8003d60:	f000 bc36 	b.w	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d64:	4ba2      	ldr	r3, [pc, #648]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d70:	f040 8430 	bne.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8003d74:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d76:	61fb      	str	r3, [r7, #28]
      break;
 8003d78:	f000 bc2c 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7c:	4b9c      	ldr	r3, [pc, #624]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d023      	beq.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d139      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d94:	4b96      	ldr	r3, [pc, #600]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d116      	bne.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003da0:	4b93      	ldr	r3, [pc, #588]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8003dac:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003db8:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4a8c      	ldr	r2, [pc, #560]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003dcc:	e01f      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
      break;
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dd4:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d102      	bne.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8003de2:	4b86      	ldr	r3, [pc, #536]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003de4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003de6:	e012      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
      break;
 8003dec:	e00f      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003dee:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dfa:	d102      	bne.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8003dfc:	4b80      	ldr	r3, [pc, #512]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003dfe:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003e00:	e005      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
      break;
 8003e0c:	bf00      	nop
    }

    switch(PeriphClk)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e14:	f000 8337 	beq.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d825      	bhi.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	f000 81df 	beq.w	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d80f      	bhi.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	f000 8128 	beq.w	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d803      	bhi.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	f000 80ec 	beq.w	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003e38:	e3cd      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	f000 8169 	beq.w	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	f000 819a 	beq.w	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8003e46:	e3c6      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	f000 82b3 	beq.w	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d803      	bhi.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f000 81fd 	beq.w	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8003e58:	e3bd      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	f000 82cd 	beq.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e64:	f000 82ec 	beq.w	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8003e68:	e3b5      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e6e:	f000 822d 	beq.w	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e76:	d811      	bhi.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7c:	d021      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8003e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e82:	d804      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	f000 833e 	beq.w	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8003e8c:	e3a3      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d01d      	beq.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d021      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003e9a:	e39c      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	f000 8277 	beq.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d804      	bhi.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eae:	f000 8371 	beq.w	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8003eb2:	e390      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eb8:	d011      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003eba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ebe:	d00e      	beq.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003ec0:	e389      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003ec2:	69b9      	ldr	r1, [r7, #24]
 8003ec4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ec8:	f000 fd58 	bl	800497c <RCCEx_GetSAIxPeriphCLKFreq>
 8003ecc:	61f8      	str	r0, [r7, #28]
      break;
 8003ece:	e382      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ed6:	f000 fd51 	bl	800497c <RCCEx_GetSAIxPeriphCLKFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
      break;
 8003edc:	e37b      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ede:	4b44      	ldr	r3, [pc, #272]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003ee8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef0:	d023      	beq.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8003ef2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ef6:	d003      	beq.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003efc:	d04a      	beq.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8003efe:	e086      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d17b      	bne.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003f18:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	e005      	b.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003f24:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4a31      	ldr	r2, [pc, #196]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f36:	61fb      	str	r3, [r7, #28]
          break;
 8003f38:	e064      	b.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f46:	d15f      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f54:	d158      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	fb02 f203 	mul.w	r2, r2, r3
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	3301      	adds	r3, #1
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0d5b      	lsrs	r3, r3, #21
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	61fb      	str	r3, [r7, #28]
          break;
 8003f92:	e039      	b.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa0:	d134      	bne.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fae:	d12d      	bne.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fba:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	fb02 f203 	mul.w	r2, r2, r3
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	3301      	adds	r3, #1
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	0d5b      	lsrs	r3, r3, #21
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	61fb      	str	r3, [r7, #28]
          break;
 8003fec:	e00e      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	0003d090 	.word	0x0003d090
 8003ff8:	0800cc8c 	.word	0x0800cc8c
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200
          break;
 8004004:	bf00      	nop
 8004006:	e2e6      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004008:	bf00      	nop
 800400a:	e2e4      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800400c:	bf00      	nop
        break;
 800400e:	e2e2      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004010:	4bac      	ldr	r3, [pc, #688]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d827      	bhi.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004039 	.word	0x08004039
 800402c:	08004041 	.word	0x08004041
 8004030:	08004049 	.word	0x08004049
 8004034:	0800405d 	.word	0x0800405d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff fac0 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 800403c:	61f8      	str	r0, [r7, #28]
          break;
 800403e:	e01d      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8004040:	f7ff fa10 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004044:	61f8      	str	r0, [r7, #28]
          break;
 8004046:	e019      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004048:	4b9e      	ldr	r3, [pc, #632]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d10f      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8004056:	4b9c      	ldr	r3, [pc, #624]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004058:	61fb      	str	r3, [r7, #28]
          break;
 800405a:	e00c      	b.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800405c:	4b99      	ldr	r3, [pc, #612]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d107      	bne.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 800406a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406e:	61fb      	str	r3, [r7, #28]
          break;
 8004070:	e003      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8004072:	bf00      	nop
 8004074:	e2af      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004076:	bf00      	nop
 8004078:	e2ad      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800407a:	bf00      	nop
        break;
 800407c:	e2ab      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800407e:	4b91      	ldr	r3, [pc, #580]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d83a      	bhi.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd
 800409c:	08004107 	.word	0x08004107
 80040a0:	08004107 	.word	0x08004107
 80040a4:	08004107 	.word	0x08004107
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	08004107 	.word	0x08004107
 80040b0:	08004107 	.word	0x08004107
 80040b4:	08004107 	.word	0x08004107
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	08004107 	.word	0x08004107
 80040c0:	08004107 	.word	0x08004107
 80040c4:	08004107 	.word	0x08004107
 80040c8:	080040f1 	.word	0x080040f1
          frequency = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7ff fa60 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
          break;
 80040d2:	e01d      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80040d4:	f7ff f9c6 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80040d8:	61f8      	str	r0, [r7, #28]
          break;
 80040da:	e019      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040dc:	4b79      	ldr	r3, [pc, #484]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e8:	d10f      	bne.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80040ea:	4b77      	ldr	r3, [pc, #476]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80040ec:	61fb      	str	r3, [r7, #28]
          break;
 80040ee:	e00c      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040f0:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d107      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004102:	61fb      	str	r3, [r7, #28]
          break;
 8004104:	e003      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8004106:	bf00      	nop
 8004108:	e265      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800410a:	bf00      	nop
 800410c:	e263      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800410e:	bf00      	nop
        break;
 8004110:	e261      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004112:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800411c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d00d      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d802      	bhi.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 800412c:	e024      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800412e:	2b20      	cmp	r3, #32
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d012      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8004136:	e01f      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004138:	f7ff fa2a 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 800413c:	61f8      	str	r0, [r7, #28]
          break;
 800413e:	e01b      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004140:	f7ff f990 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004144:	61f8      	str	r0, [r7, #28]
          break;
 8004146:	e017      	b.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004148:	4b5e      	ldr	r3, [pc, #376]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d10d      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8004156:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004158:	61fb      	str	r3, [r7, #28]
          break;
 800415a:	e00a      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d105      	bne.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	61fb      	str	r3, [r7, #28]
          break;
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004172:	bf00      	nop
 8004174:	e22f      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004176:	bf00      	nop
        break;
 8004178:	e22d      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800417a:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004184:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d00d      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d802      	bhi.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8004194:	e024      	b.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800419a:	2bc0      	cmp	r3, #192	; 0xc0
 800419c:	d012      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800419e:	e01f      	b.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7ff f9f6 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80041a4:	61f8      	str	r0, [r7, #28]
          break;
 80041a6:	e01b      	b.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80041a8:	f7ff f95c 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80041ac:	61f8      	str	r0, [r7, #28]
          break;
 80041ae:	e017      	b.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041b0:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d10d      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80041be:	4b42      	ldr	r3, [pc, #264]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80041c0:	61fb      	str	r3, [r7, #28]
          break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d6:	61fb      	str	r3, [r7, #28]
          break;
 80041d8:	e001      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80041da:	bf00      	nop
 80041dc:	e1fb      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80041de:	bf00      	nop
        break;
 80041e0:	e1f9      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ec:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f4:	d010      	beq.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d802      	bhi.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004200:	e026      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8004202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004206:	d00b      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420c:	d012      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800420e:	e01f      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004210:	f7ff f9be 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
          break;
 8004216:	e01b      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8004218:	f7ff f924 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800421c:	61f8      	str	r0, [r7, #28]
          break;
 800421e:	e017      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d10d      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004230:	61fb      	str	r3, [r7, #28]
          break;
 8004232:	e00a      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d105      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	61fb      	str	r3, [r7, #28]
          break;
 8004248:	e001      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800424a:	bf00      	nop
 800424c:	e1c3      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800424e:	bf00      	nop
        break;
 8004250:	e1c1      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800425c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d010      	beq.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d802      	bhi.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004270:	e026      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d00b      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427c:	d012      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800427e:	e01f      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004280:	f7ff f986 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004284:	61f8      	str	r0, [r7, #28]
          break;
 8004286:	e01b      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004288:	f7ff f8ec 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800428c:	61f8      	str	r0, [r7, #28]
          break;
 800428e:	e017      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d10d      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80042a0:	61fb      	str	r3, [r7, #28]
          break;
 80042a2:	e00a      	b.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d105      	bne.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	61fb      	str	r3, [r7, #28]
          break;
 80042b8:	e001      	b.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80042ba:	bf00      	nop
 80042bc:	e18b      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80042be:	bf00      	nop
        break;
 80042c0:	e189      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80042cc:	4bae      	ldr	r3, [pc, #696]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042d6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042de:	d02f      	beq.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80042e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e4:	d003      	beq.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80042e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80042ec:	e050      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ee:	f7ff f8b9 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80042f2:	61f8      	str	r0, [r7, #28]
          break;
 80042f4:	e04c      	b.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80042f6:	4ba4      	ldr	r3, [pc, #656]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d043      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004302:	4ba1      	ldr	r3, [pc, #644]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	fb02 f203 	mul.w	r2, r2, r3
 8004316:	4b9c      	ldr	r3, [pc, #624]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	3301      	adds	r3, #1
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004328:	4b97      	ldr	r3, [pc, #604]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	0e5b      	lsrs	r3, r3, #25
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	3301      	adds	r3, #1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	61fb      	str	r3, [r7, #28]
          break;
 800433e:	e024      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004340:	4b91      	ldr	r3, [pc, #580]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800434c:	4b8e      	ldr	r3, [pc, #568]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004356:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	fb02 f203 	mul.w	r2, r2, r3
 8004360:	4b89      	ldr	r3, [pc, #548]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	3301      	adds	r3, #1
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004372:	4b85      	ldr	r3, [pc, #532]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	0e5b      	lsrs	r3, r3, #25
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	3301      	adds	r3, #1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61fb      	str	r3, [r7, #28]
          break;
 8004388:	e001      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800438a:	bf00      	nop
 800438c:	e123      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800438e:	bf00      	nop
        break;
 8004390:	e121      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7ff f90a 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e114      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80043ac:	f7ff f85a 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e110      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80043b4:	4b74      	ldr	r3, [pc, #464]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043be:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c6:	d009      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80043c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d000      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7ff f8dc 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80043d8:	61f8      	str	r0, [r7, #28]
          break;
 80043da:	e00d      	b.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 80043dc:	f7ff f842 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80043e0:	61f8      	str	r0, [r7, #28]
          break;
 80043e2:	e009      	b.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 80043f2:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80043f4:	61fb      	str	r3, [r7, #28]
          break;
 80043f6:	bf00      	nop
        break;
 80043f8:	e0ed      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004404:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440c:	d009      	beq.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800440e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d000      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004418:	e011      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800441a:	f7ff f8b9 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 800441e:	61f8      	str	r0, [r7, #28]
          break;
 8004420:	e00d      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004422:	f7ff f81f 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004426:	61f8      	str	r0, [r7, #28]
          break;
 8004428:	e009      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800442a:	4b57      	ldr	r3, [pc, #348]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d101      	bne.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004438:	4b54      	ldr	r3, [pc, #336]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800443a:	61fb      	str	r3, [r7, #28]
          break;
 800443c:	bf00      	nop
        break;
 800443e:	e0ca      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004440:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800444a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004452:	d009      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d000      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800445e:	e011      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004460:	f7ff f896 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004464:	61f8      	str	r0, [r7, #28]
          break;
 8004466:	e00d      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004468:	f7fe fffc 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800446c:	61f8      	str	r0, [r7, #28]
          break;
 800446e:	e009      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004470:	4b45      	ldr	r3, [pc, #276]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004480:	61fb      	str	r3, [r7, #28]
          break;
 8004482:	bf00      	nop
        break;
 8004484:	e0a7      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004486:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004490:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004498:	d010      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800449a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800449e:	d802      	bhi.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 80044a4:	e02f      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 80044a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044aa:	d012      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80044ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044b0:	d019      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80044b2:	e028      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7ff f86c 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80044b8:	61f8      	str	r0, [r7, #28]
          break;
 80044ba:	e024      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044bc:	4b32      	ldr	r3, [pc, #200]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d118      	bne.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 80044ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044ce:	61fb      	str	r3, [r7, #28]
          break;
 80044d0:	e014      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d10f      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80044e2:	61fb      	str	r3, [r7, #28]
          break;
 80044e4:	e00c      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044e6:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d107      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 80044f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f8:	61fb      	str	r3, [r7, #28]
          break;
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 80044fc:	bf00      	nop
 80044fe:	e06a      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004500:	bf00      	nop
 8004502:	e068      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004504:	bf00      	nop
        break;
 8004506:	e066      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004512:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d010      	beq.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800451c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004520:	d802      	bhi.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004526:	e034      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800452c:	d012      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800452e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004532:	d019      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004534:	e02d      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004536:	f7ff f82b 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 800453a:	61f8      	str	r0, [r7, #28]
          break;
 800453c:	e029      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d118      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 800454c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004550:	61fb      	str	r3, [r7, #28]
          break;
 8004552:	e014      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004560:	d10f      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004564:	61fb      	str	r3, [r7, #28]
          break;
 8004566:	e00c      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	61fb      	str	r3, [r7, #28]
          break;
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800457e:	bf00      	nop
 8004580:	e029      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004582:	bf00      	nop
 8004584:	e027      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	00f42400 	.word	0x00f42400
          break;
 8004590:	bf00      	nop
        break;
 8004592:	e020      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800459e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045aa:	d004      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 80045ac:	e00d      	b.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7fe ffef 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 80045b2:	61f8      	str	r0, [r7, #28]
          break;
 80045b4:	e009      	b.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c2:	d101      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80045c6:	61fb      	str	r3, [r7, #28]
          break;
 80045c8:	bf00      	nop
        break;
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80045cc:	bf00      	nop
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80045d0:	bf00      	nop
 80045d2:	e000      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80045d4:	bf00      	nop
    }
  }

  return(frequency);
 80045d6:	69fb      	ldr	r3, [r7, #28]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045f6:	4b73      	ldr	r3, [pc, #460]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004602:	4b70      	ldr	r3, [pc, #448]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d10d      	bne.n	800462e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
       ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
       ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d044      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e041      	b.n	80046b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d00c      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0x6e>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d013      	beq.n	8004668 <RCCEx_PLLSAI1_Config+0x80>
 8004640:	2b01      	cmp	r3, #1
 8004642:	d120      	bne.n	8004686 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004644:	4b5f      	ldr	r3, [pc, #380]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11d      	bne.n	800468c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004654:	e01a      	b.n	800468c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e013      	b.n	8004690 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004668:	4b56      	ldr	r3, [pc, #344]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004684:	e006      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      break;
 800468a:	e004      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800468c:	bf00      	nop
 800468e:	e002      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004690:	bf00      	nop
 8004692:	e000      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004694:	bf00      	nop
    }

    if(status == HAL_OK)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10d      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469c:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	430b      	orrs	r3, r1
 80046b2:	4944      	ldr	r1, [pc, #272]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d17d      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ca:	f7fb ff33 	bl	8000534 <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d0:	e009      	b.n	80046e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d2:	f7fb ff2f 	bl	8000534 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d902      	bls.n	80046e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	73fb      	strb	r3, [r7, #15]
        break;
 80046e4:	e005      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ef      	bne.n	80046d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d160      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d111      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6892      	ldr	r2, [r2, #8]
 800470e:	0211      	lsls	r1, r2, #8
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68d2      	ldr	r2, [r2, #12]
 8004714:	0912      	lsrs	r2, r2, #4
 8004716:	0452      	lsls	r2, r2, #17
 8004718:	430a      	orrs	r2, r1
 800471a:	492a      	ldr	r1, [pc, #168]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	610b      	str	r3, [r1, #16]
 8004720:	e027      	b.n	8004772 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d112      	bne.n	800474e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6892      	ldr	r2, [r2, #8]
 8004738:	0211      	lsls	r1, r2, #8
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6912      	ldr	r2, [r2, #16]
 800473e:	0852      	lsrs	r2, r2, #1
 8004740:	3a01      	subs	r2, #1
 8004742:	0552      	lsls	r2, r2, #21
 8004744:	430a      	orrs	r2, r1
 8004746:	491f      	ldr	r1, [pc, #124]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	610b      	str	r3, [r1, #16]
 800474c:	e011      	b.n	8004772 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6892      	ldr	r2, [r2, #8]
 800475e:	0211      	lsls	r1, r2, #8
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6952      	ldr	r2, [r2, #20]
 8004764:	0852      	lsrs	r2, r2, #1
 8004766:	3a01      	subs	r2, #1
 8004768:	0652      	lsls	r2, r2, #25
 800476a:	430a      	orrs	r2, r1
 800476c:	4915      	ldr	r1, [pc, #84]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800477c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fb fed9 	bl	8000534 <HAL_GetTick>
 8004782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004784:	e009      	b.n	800479a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004786:	f7fb fed5 	bl	8000534 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d902      	bls.n	800479a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	73fb      	strb	r3, [r7, #15]
          break;
 8004798:	e005      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ef      	beq.n	8004786 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4903      	ldr	r1, [pc, #12]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000

080047c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d6:	4b68      	ldr	r3, [pc, #416]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d018      	beq.n	8004814 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0203 	and.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10d      	bne.n	800480e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
       ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
       ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d044      	beq.n	8004898 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	e041      	b.n	8004898 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d00c      	beq.n	8004836 <RCCEx_PLLSAI2_Config+0x6e>
 800481c:	2b03      	cmp	r3, #3
 800481e:	d013      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x80>
 8004820:	2b01      	cmp	r3, #1
 8004822:	d120      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004824:	4b54      	ldr	r3, [pc, #336]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11d      	bne.n	800486c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004834:	e01a      	b.n	800486c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004836:	4b50      	ldr	r3, [pc, #320]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004846:	e013      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004848:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004854:	4b48      	ldr	r3, [pc, #288]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004864:	e006      	b.n	8004874 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      break;
 800486a:	e004      	b.n	8004876 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004874:	bf00      	nop
    }

    if(status == HAL_OK)
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800487c:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	3b01      	subs	r3, #1
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	430b      	orrs	r3, r1
 8004892:	4939      	ldr	r1, [pc, #228]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d167      	bne.n	800496e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a35      	ldr	r2, [pc, #212]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048aa:	f7fb fe43 	bl	8000534 <HAL_GetTick>
 80048ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b0:	e009      	b.n	80048c6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b2:	f7fb fe3f 	bl	8000534 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d902      	bls.n	80048c6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	73fb      	strb	r3, [r7, #15]
        break;
 80048c4:	e005      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ef      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d14a      	bne.n	800496e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d111      	bne.n	8004902 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6892      	ldr	r2, [r2, #8]
 80048ee:	0211      	lsls	r1, r2, #8
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68d2      	ldr	r2, [r2, #12]
 80048f4:	0912      	lsrs	r2, r2, #4
 80048f6:	0452      	lsls	r2, r2, #17
 80048f8:	430a      	orrs	r2, r1
 80048fa:	491f      	ldr	r1, [pc, #124]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	614b      	str	r3, [r1, #20]
 8004900:	e011      	b.n	8004926 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800490a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	0211      	lsls	r1, r2, #8
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6912      	ldr	r2, [r2, #16]
 8004918:	0852      	lsrs	r2, r2, #1
 800491a:	3a01      	subs	r2, #1
 800491c:	0652      	lsls	r2, r2, #25
 800491e:	430a      	orrs	r2, r1
 8004920:	4915      	ldr	r1, [pc, #84]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004926:	4b14      	ldr	r3, [pc, #80]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fb fdff 	bl	8000534 <HAL_GetTick>
 8004936:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004938:	e009      	b.n	800494e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800493a:	f7fb fdfb 	bl	8000534 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d902      	bls.n	800494e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	73fb      	strb	r3, [r7, #15]
          break;
 800494c:	e005      	b.n	800495a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ef      	beq.n	800493a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	4903      	ldr	r1, [pc, #12]	; (8004978 <RCCEx_PLLSAI2_Config+0x1b0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000

0800497c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d10c      	bne.n	80049b4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800499a:	4b62      	ldr	r3, [pc, #392]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80049a4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ac:	d112      	bne.n	80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80049ae:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e00f      	b.n	80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d10b      	bne.n	80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80049bc:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80049c6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ce:	d101      	bne.n	80049d4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80049d0:	4b55      	ldr	r3, [pc, #340]	; (8004b28 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80049d2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 809c 	bne.w	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e6:	d003      	beq.n	80049f0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ee:	d12d      	bne.n	8004a4c <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80049f0:	4b4c      	ldr	r3, [pc, #304]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 808b 	beq.w	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049fe:	4b49      	ldr	r3, [pc, #292]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	3301      	adds	r3, #1
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004a24:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8004a30:	2311      	movs	r3, #17
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e001      	b.n	8004a3a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8004a36:	2307      	movs	r3, #7
 8004a38:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	fb02 f203 	mul.w	r2, r2, r3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8004a4a:	e063      	b.n	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d12c      	bne.n	8004aac <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004a52:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d05a      	beq.n	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	3301      	adds	r3, #1
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8004a90:	2311      	movs	r3, #17
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e001      	b.n	8004a9a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 8004a96:	2307      	movs	r3, #7
 8004a98:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	fb02 f203 	mul.w	r2, r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e033      	b.n	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab2:	d003      	beq.n	8004abc <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aba:	d12b      	bne.n	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8004abc:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d025      	beq.n	8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8004afa:	2311      	movs	r3, #17
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e001      	b.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8004b00:	2307      	movs	r3, #7
 8004b02:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	fb02 f203 	mul.w	r2, r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004b14:	69fb      	ldr	r3, [r7, #28]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	001fff68 	.word	0x001fff68

08004b2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e14a      	b.n	8004dd4 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f007 f988 	bl	800be68 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f94d 	bl	8004df8 <SAI_Disable>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e135      	b.n	8004dd4 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d007      	beq.n	8004b88 <HAL_SAI_Init+0x5c>
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d302      	bcc.n	8004b82 <HAL_SAI_Init+0x56>
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d006      	beq.n	8004b8e <HAL_SAI_Init+0x62>
 8004b80:	e008      	b.n	8004b94 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      break;
 8004b86:	e008      	b.n	8004b9a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004b88:	2310      	movs	r3, #16
 8004b8a:	61fb      	str	r3, [r7, #28]
      break;
 8004b8c:	e005      	b.n	8004b9a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	61fb      	str	r3, [r7, #28]
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
      break;
 8004b98:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d81d      	bhi.n	8004bde <HAL_SAI_Init+0xb2>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_SAI_Init+0x7c>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bbf 	.word	0x08004bbf
 8004bb0:	08004bc7 	.word	0x08004bc7
 8004bb4:	08004bcf 	.word	0x08004bcf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
      break;
 8004bbc:	e012      	b.n	8004be4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc2:	617b      	str	r3, [r7, #20]
      break;
 8004bc4:	e00e      	b.n	8004be4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bca:	617b      	str	r3, [r7, #20]
      break;
 8004bcc:	e00a      	b.n	8004be4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
      break;
 8004bdc:	e002      	b.n	8004be4 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
      break;
 8004be2:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a7c      	ldr	r2, [pc, #496]	; (8004ddc <HAL_SAI_Init+0x2b0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_SAI_Init+0xcc>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7b      	ldr	r2, [pc, #492]	; (8004de0 <HAL_SAI_Init+0x2b4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_SAI_Init+0x2b8>)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e002      	b.n	8004c06 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004c00:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_SAI_Init+0x2bc>)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d038      	beq.n	8004c80 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a72      	ldr	r2, [pc, #456]	; (8004ddc <HAL_SAI_Init+0x2b0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_SAI_Init+0xf6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a70      	ldr	r2, [pc, #448]	; (8004de0 <HAL_SAI_Init+0x2b4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d105      	bne.n	8004c2e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004c22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c26:	f7ff f867 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c2a:	6138      	str	r0, [r7, #16]
 8004c2c:	e004      	b.n	8004c38 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004c2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c32:	f7ff f861 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c36:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	025b      	lsls	r3, r3, #9
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a66      	ldr	r2, [pc, #408]	; (8004dec <HAL_SAI_Init+0x2c0>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	08da      	lsrs	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_SAI_Init+0x2c0>)
 8004c62:	fba3 2301 	umull	r2, r3, r3, r1
 8004c66:	08da      	lsrs	r2, r3, #3
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	1aca      	subs	r2, r1, r3
 8004c72:	2a08      	cmp	r2, #8
 8004c74:	d904      	bls.n	8004c80 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_SAI_Init+0x164>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d109      	bne.n	8004ca4 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_SAI_Init+0x170>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e001      	b.n	8004ca0 <HAL_SAI_Init+0x174>
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e008      	b.n	8004cb6 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_SAI_Init+0x186>
 8004cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cb0:	e000      	b.n	8004cb4 <HAL_SAI_Init+0x188>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_SAI_Init+0x2c4>)
 8004cc2:	400b      	ands	r3, r1
 8004cc4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004cda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004cee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004cfa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d1a:	f023 030f 	bic.w	r3, r3, #15
 8004d1e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6899      	ldr	r1, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_SAI_Init+0x2c8>)
 8004d4a:	400b      	ands	r3, r1
 8004d4c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004d64:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004d6a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	3b01      	subs	r3, #1
 8004d72:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004d74:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68d9      	ldr	r1, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68d9      	ldr	r1, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004da6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	3b01      	subs	r3, #1
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40015404 	.word	0x40015404
 8004de0:	40015424 	.word	0x40015424
 8004de4:	40015400 	.word	0x40015400
 8004de8:	40015800 	.word	0x40015800
 8004dec:	cccccccd 	.word	0xcccccccd
 8004df0:	ff05c010 	.word	0xff05c010
 8004df4:	fff88000 	.word	0xfff88000

08004df8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004df8:	b490      	push	{r4, r7}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <SAI_Disable+0x60>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <SAI_Disable+0x64>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0b1b      	lsrs	r3, r3, #12
 8004e0c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e20:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d10a      	bne.n	8004e3c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	e007      	b.n	8004e4c <SAI_Disable+0x54>
    }
    count--;
 8004e3c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ea      	bne.n	8004e22 <SAI_Disable+0x2a>

  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc90      	pop	{r4, r7}
 8004e56:	4770      	bx	lr
 8004e58:	2000002c 	.word	0x2000002c
 8004e5c:	95cbec1b 	.word	0x95cbec1b

08004e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e07c      	b.n	8004f6c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f007 f8a1 	bl	800bfd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb2:	d902      	bls.n	8004eba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e002      	b.n	8004ec0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ec8:	d007      	beq.n	8004eda <HAL_SPI_Init+0x7a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eea:	d903      	bls.n	8004ef4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ef2:	e002      	b.n	8004efa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	ea42 0103 	orr.w	r1, r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0204 	and.w	r2, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	ea42 0103 	orr.w	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01d      	b.n	8004fc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f815 	bl	8004fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 f986 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_TIM_Base_Start_IT+0x50>)
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b06      	cmp	r3, #6
 8005008:	d00b      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x42>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d007      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	00010007 	.word	0x00010007

08005034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0202 	mvn.w	r2, #2
 8005060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f905 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8f7 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f908 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0204 	mvn.w	r2, #4
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8db 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8cd 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8de 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0208 	mvn.w	r2, #8
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8b1 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8a3 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8b4 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0210 	mvn.w	r2, #16
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2208      	movs	r2, #8
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f887 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f879 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f88a 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0201 	mvn.w	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f006 fc2c 	bl	800ba10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f914 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f907 	bl	8005420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d10e      	bne.n	800523e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d107      	bne.n	800523e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f838 	bl	80052ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d10e      	bne.n	800526a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d107      	bne.n	800526a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0220 	mvn.w	r2, #32
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8c7 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a40      	ldr	r2, [pc, #256]	; (80053d8 <TIM_Base_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d00f      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <TIM_Base_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <TIM_Base_SetConfig+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3b      	ldr	r2, [pc, #236]	; (80053e4 <TIM_Base_SetConfig+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d108      	bne.n	8005316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <TIM_Base_SetConfig+0x114>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2c      	ldr	r2, [pc, #176]	; (80053dc <TIM_Base_SetConfig+0x118>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <TIM_Base_SetConfig+0x11c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <TIM_Base_SetConfig+0x120>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <TIM_Base_SetConfig+0x124>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <TIM_Base_SetConfig+0x128>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <TIM_Base_SetConfig+0x12c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <TIM_Base_SetConfig+0x130>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <TIM_Base_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0xf8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <TIM_Base_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0xf8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a11      	ldr	r2, [pc, #68]	; (80053ec <TIM_Base_SetConfig+0x128>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0xf8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <TIM_Base_SetConfig+0x12c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0xf8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <TIM_Base_SetConfig+0x130>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e040      	b.n	80054c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f006 ff48 	bl	800c2ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9f6 	bl	8005864 <UART_SetConfig>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e022      	b.n	80054c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd32 	bl	8005ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fdb9 	bl	8006038 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d164      	bne.n	80055b0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_Transmit_DMA+0x22>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e05d      	b.n	80055b2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Transmit_DMA+0x34>
 8005500:	2302      	movs	r3, #2
 8005502:	e056      	b.n	80055b2 <HAL_UART_Transmit_DMA+0xe2>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2221      	movs	r2, #33	; 0x21
 800552c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02a      	beq.n	800558c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <HAL_UART_Transmit_DMA+0xec>)
 800553c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_UART_Transmit_DMA+0xf0>)
 8005544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_UART_Transmit_DMA+0xf4>)
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005552:	2200      	movs	r2, #0
 8005554:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	4619      	mov	r1, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3328      	adds	r3, #40	; 0x28
 8005566:	461a      	mov	r2, r3
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	f7fb f8f3 	bl	8000754 <HAL_DMA_Start_IT>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2210      	movs	r2, #16
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e012      	b.n	80055b2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2240      	movs	r2, #64	; 0x40
 8005592:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055aa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e000      	b.n	80055b2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	080061bd 	.word	0x080061bd
 80055c0:	08006211 	.word	0x08006211
 80055c4:	0800622d 	.word	0x0800622d

080055c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d113      	bne.n	800561e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00e      	beq.n	800561e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80ff 	beq.w	8005812 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
      }
      return;
 800561c:	e0f9      	b.n	8005812 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80c1 	beq.w	80057a8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80b6 	beq.w	80057a8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <HAL_UART_IRQHandler+0x9c>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2201      	movs	r2, #1
 8005656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <HAL_UART_IRQHandler+0xc4>
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2202      	movs	r2, #2
 800567e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005684:	f043 0204 	orr.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <HAL_UART_IRQHandler+0xec>
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2204      	movs	r2, #4
 80056a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ac:	f043 0202 	orr.w	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2208      	movs	r2, #8
 80056d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056de:	f043 0208 	orr.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8093 	beq.w	8005816 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005718:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d004      	beq.n	8005732 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d031      	beq.n	8005796 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fd22 	bl	800617c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d123      	bne.n	800578e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005754:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d013      	beq.n	8005786 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	4a30      	ldr	r2, [pc, #192]	; (8005824 <HAL_UART_IRQHandler+0x25c>)
 8005764:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb f852 	bl	8000814 <HAL_DMA_Abort_IT>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	e00e      	b.n	80057a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f862 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e00a      	b.n	80057a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f85e 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e006      	b.n	80057a4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f85a 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80057a2:	e038      	b.n	8005816 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	bf00      	nop
    return;
 80057a6:	e036      	b.n	8005816 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_UART_IRQHandler+0x206>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd9b 	bl	8006302 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057cc:	e026      	b.n	800581c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d017      	beq.n	800581a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
    }
    return;
 80057f2:	e012      	b.n	800581a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <HAL_UART_IRQHandler+0x254>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fd61 	bl	80062d0 <UART_EndTransmit_IT>
    return;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <HAL_UART_IRQHandler+0x254>
      return;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <HAL_UART_IRQHandler+0x254>
    return;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <HAL_UART_IRQHandler+0x254>
    return;
 800581a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	080062a5 	.word	0x080062a5

08005828 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005868:	b088      	sub	sp, #32
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4313      	orrs	r3, r2
 8005890:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4bac      	ldr	r3, [pc, #688]	; (8005b4c <UART_SetConfig+0x2e8>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	69f9      	ldr	r1, [r7, #28]
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4aa2      	ldr	r2, [pc, #648]	; (8005b50 <UART_SetConfig+0x2ec>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a99      	ldr	r2, [pc, #612]	; (8005b54 <UART_SetConfig+0x2f0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d121      	bne.n	8005938 <UART_SetConfig+0xd4>
 80058f4:	4b98      	ldr	r3, [pc, #608]	; (8005b58 <UART_SetConfig+0x2f4>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d816      	bhi.n	8005930 <UART_SetConfig+0xcc>
 8005902:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0xa4>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005919 	.word	0x08005919
 800590c:	08005925 	.word	0x08005925
 8005910:	0800591f 	.word	0x0800591f
 8005914:	0800592b 	.word	0x0800592b
 8005918:	2301      	movs	r3, #1
 800591a:	76fb      	strb	r3, [r7, #27]
 800591c:	e0e8      	b.n	8005af0 <UART_SetConfig+0x28c>
 800591e:	2302      	movs	r3, #2
 8005920:	76fb      	strb	r3, [r7, #27]
 8005922:	e0e5      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005924:	2304      	movs	r3, #4
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e0e2      	b.n	8005af0 <UART_SetConfig+0x28c>
 800592a:	2308      	movs	r3, #8
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e0df      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005930:	2310      	movs	r3, #16
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	bf00      	nop
 8005936:	e0db      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a87      	ldr	r2, [pc, #540]	; (8005b5c <UART_SetConfig+0x2f8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d134      	bne.n	80059ac <UART_SetConfig+0x148>
 8005942:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d829      	bhi.n	80059a4 <UART_SetConfig+0x140>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0xf4>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800598d 	.word	0x0800598d
 800595c:	080059a5 	.word	0x080059a5
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059a5 	.word	0x080059a5
 8005968:	08005999 	.word	0x08005999
 800596c:	080059a5 	.word	0x080059a5
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059a5 	.word	0x080059a5
 8005978:	08005993 	.word	0x08005993
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059a5 	.word	0x080059a5
 8005988:	0800599f 	.word	0x0800599f
 800598c:	2300      	movs	r3, #0
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e0ae      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005992:	2302      	movs	r3, #2
 8005994:	76fb      	strb	r3, [r7, #27]
 8005996:	e0ab      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005998:	2304      	movs	r3, #4
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e0a8      	b.n	8005af0 <UART_SetConfig+0x28c>
 800599e:	2308      	movs	r3, #8
 80059a0:	76fb      	strb	r3, [r7, #27]
 80059a2:	e0a5      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059a4:	2310      	movs	r3, #16
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	bf00      	nop
 80059aa:	e0a1      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a6b      	ldr	r2, [pc, #428]	; (8005b60 <UART_SetConfig+0x2fc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d120      	bne.n	80059f8 <UART_SetConfig+0x194>
 80059b6:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <UART_SetConfig+0x2f4>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d00f      	beq.n	80059e4 <UART_SetConfig+0x180>
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d802      	bhi.n	80059ce <UART_SetConfig+0x16a>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <UART_SetConfig+0x174>
 80059cc:	e010      	b.n	80059f0 <UART_SetConfig+0x18c>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d005      	beq.n	80059de <UART_SetConfig+0x17a>
 80059d2:	2b30      	cmp	r3, #48	; 0x30
 80059d4:	d009      	beq.n	80059ea <UART_SetConfig+0x186>
 80059d6:	e00b      	b.n	80059f0 <UART_SetConfig+0x18c>
 80059d8:	2300      	movs	r3, #0
 80059da:	76fb      	strb	r3, [r7, #27]
 80059dc:	e088      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059de:	2302      	movs	r3, #2
 80059e0:	76fb      	strb	r3, [r7, #27]
 80059e2:	e085      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059e4:	2304      	movs	r3, #4
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e082      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059ea:	2308      	movs	r3, #8
 80059ec:	76fb      	strb	r3, [r7, #27]
 80059ee:	e07f      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059f0:	2310      	movs	r3, #16
 80059f2:	76fb      	strb	r3, [r7, #27]
 80059f4:	bf00      	nop
 80059f6:	e07b      	b.n	8005af0 <UART_SetConfig+0x28c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a59      	ldr	r2, [pc, #356]	; (8005b64 <UART_SetConfig+0x300>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d120      	bne.n	8005a44 <UART_SetConfig+0x1e0>
 8005a02:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d00f      	beq.n	8005a30 <UART_SetConfig+0x1cc>
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d802      	bhi.n	8005a1a <UART_SetConfig+0x1b6>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0x1c0>
 8005a18:	e010      	b.n	8005a3c <UART_SetConfig+0x1d8>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d005      	beq.n	8005a2a <UART_SetConfig+0x1c6>
 8005a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a20:	d009      	beq.n	8005a36 <UART_SetConfig+0x1d2>
 8005a22:	e00b      	b.n	8005a3c <UART_SetConfig+0x1d8>
 8005a24:	2300      	movs	r3, #0
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e062      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e05f      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a30:	2304      	movs	r3, #4
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e05c      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a36:	2308      	movs	r3, #8
 8005a38:	76fb      	strb	r3, [r7, #27]
 8005a3a:	e059      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	bf00      	nop
 8005a42:	e055      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a47      	ldr	r2, [pc, #284]	; (8005b68 <UART_SetConfig+0x304>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d124      	bne.n	8005a98 <UART_SetConfig+0x234>
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d012      	beq.n	8005a84 <UART_SetConfig+0x220>
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a62:	d802      	bhi.n	8005a6a <UART_SetConfig+0x206>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <UART_SetConfig+0x214>
 8005a68:	e012      	b.n	8005a90 <UART_SetConfig+0x22c>
 8005a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6e:	d006      	beq.n	8005a7e <UART_SetConfig+0x21a>
 8005a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0x226>
 8005a76:	e00b      	b.n	8005a90 <UART_SetConfig+0x22c>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e038      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	76fb      	strb	r3, [r7, #27]
 8005a82:	e035      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a84:	2304      	movs	r3, #4
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e032      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	76fb      	strb	r3, [r7, #27]
 8005a8e:	e02f      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a90:	2310      	movs	r3, #16
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	bf00      	nop
 8005a96:	e02b      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <UART_SetConfig+0x2ec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d124      	bne.n	8005aec <UART_SetConfig+0x288>
 8005aa2:	4b2d      	ldr	r3, [pc, #180]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d012      	beq.n	8005ad8 <UART_SetConfig+0x274>
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d802      	bhi.n	8005abe <UART_SetConfig+0x25a>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <UART_SetConfig+0x268>
 8005abc:	e012      	b.n	8005ae4 <UART_SetConfig+0x280>
 8005abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac2:	d006      	beq.n	8005ad2 <UART_SetConfig+0x26e>
 8005ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac8:	d009      	beq.n	8005ade <UART_SetConfig+0x27a>
 8005aca:	e00b      	b.n	8005ae4 <UART_SetConfig+0x280>
 8005acc:	2300      	movs	r3, #0
 8005ace:	76fb      	strb	r3, [r7, #27]
 8005ad0:	e00e      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	76fb      	strb	r3, [r7, #27]
 8005ad6:	e00b      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	76fb      	strb	r3, [r7, #27]
 8005adc:	e008      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	76fb      	strb	r3, [r7, #27]
 8005ae2:	e005      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	bf00      	nop
 8005aea:	e001      	b.n	8005af0 <UART_SetConfig+0x28c>
 8005aec:	2310      	movs	r3, #16
 8005aee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <UART_SetConfig+0x2ec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f040 80fa 	bne.w	8005cf0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005afc:	7efb      	ldrb	r3, [r7, #27]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d836      	bhi.n	8005b70 <UART_SetConfig+0x30c>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x2a4>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b3b 	.word	0x08005b3b
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b43 	.word	0x08005b43
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fd fd30 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8005b30:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b32:	e020      	b.n	8005b76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <UART_SetConfig+0x308>)
 8005b36:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b38:	e01d      	b.n	8005b76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd fc93 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8005b3e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b40:	e019      	b.n	8005b76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b48:	e015      	b.n	8005b76 <UART_SetConfig+0x312>
 8005b4a:	bf00      	nop
 8005b4c:	efff69f3 	.word	0xefff69f3
 8005b50:	40008000 	.word	0x40008000
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40004400 	.word	0x40004400
 8005b60:	40004800 	.word	0x40004800
 8005b64:	40004c00 	.word	0x40004c00
 8005b68:	40005000 	.word	0x40005000
 8005b6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	74fb      	strb	r3, [r7, #19]
        break;
 8005b74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 81ac 	beq.w	8005ed6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d305      	bcc.n	8005b9a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d902      	bls.n	8005ba0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	74fb      	strb	r3, [r7, #19]
 8005b9e:	e19a      	b.n	8005ed6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8005ba0:	7efb      	ldrb	r3, [r7, #27]
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	f200 8091 	bhi.w	8005cca <UART_SetConfig+0x466>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <UART_SetConfig+0x34c>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005ccb 	.word	0x08005ccb
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005ccb 	.word	0x08005ccb
 8005bc0:	08005c55 	.word	0x08005c55
 8005bc4:	08005ccb 	.word	0x08005ccb
 8005bc8:	08005ccb 	.word	0x08005ccb
 8005bcc:	08005ccb 	.word	0x08005ccb
 8005bd0:	08005ca1 	.word	0x08005ca1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bd4:	f7fd fcdc 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	0214      	lsls	r4, r2, #8
 8005bea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005bee:	020b      	lsls	r3, r1, #8
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6852      	ldr	r2, [r2, #4]
 8005bf4:	0852      	lsrs	r2, r2, #1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	eb13 0b01 	adds.w	fp, r3, r1
 8005c00:	eb44 0c02 	adc.w	ip, r4, r2
 8005c04:	4658      	mov	r0, fp
 8005c06:	4661      	mov	r1, ip
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f04f 0400 	mov.w	r4, #0
 8005c10:	461a      	mov	r2, r3
 8005c12:	4623      	mov	r3, r4
 8005c14:	f7fa fadc 	bl	80001d0 <__aeabi_uldivmod>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c1e:	e057      	b.n	8005cd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	f04f 0400 	mov.w	r4, #0
 8005c2a:	49b1      	ldr	r1, [pc, #708]	; (8005ef0 <UART_SetConfig+0x68c>)
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	eb13 0b01 	adds.w	fp, r3, r1
 8005c34:	eb44 0c02 	adc.w	ip, r4, r2
 8005c38:	4658      	mov	r0, fp
 8005c3a:	4661      	mov	r1, ip
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	461a      	mov	r2, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	f7fa fac2 	bl	80001d0 <__aeabi_uldivmod>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c52:	e03d      	b.n	8005cd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c54:	f7fd fc06 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f04f 0400 	mov.w	r4, #0
 8005c68:	0214      	lsls	r4, r2, #8
 8005c6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c6e:	020b      	lsls	r3, r1, #8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	0852      	lsrs	r2, r2, #1
 8005c76:	4611      	mov	r1, r2
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	eb13 0b01 	adds.w	fp, r3, r1
 8005c80:	eb44 0c02 	adc.w	ip, r4, r2
 8005c84:	4658      	mov	r0, fp
 8005c86:	4661      	mov	r1, ip
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f04f 0400 	mov.w	r4, #0
 8005c90:	461a      	mov	r2, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	f7fa fa9c 	bl	80001d0 <__aeabi_uldivmod>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c9e:	e017      	b.n	8005cd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	f04f 0400 	mov.w	r4, #0
 8005caa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005cae:	f144 0100 	adc.w	r1, r4, #0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f04f 0400 	mov.w	r4, #0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	f7fa fa87 	bl	80001d0 <__aeabi_uldivmod>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cc8:	e002      	b.n	8005cd0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	74fb      	strb	r3, [r7, #19]
            break;
 8005cce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd6:	d308      	bcc.n	8005cea <UART_SetConfig+0x486>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e0f5      	b.n	8005ed6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	74fb      	strb	r3, [r7, #19]
 8005cee:	e0f2      	b.n	8005ed6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf8:	d17f      	bne.n	8005dfa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8005cfa:	7efb      	ldrb	r3, [r7, #27]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d85c      	bhi.n	8005dba <UART_SetConfig+0x556>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x4a4>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d4b 	.word	0x08005d4b
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005dbb 	.word	0x08005dbb
 8005d18:	08005d85 	.word	0x08005d85
 8005d1c:	08005dbb 	.word	0x08005dbb
 8005d20:	08005dbb 	.word	0x08005dbb
 8005d24:	08005dbb 	.word	0x08005dbb
 8005d28:	08005da3 	.word	0x08005da3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d2c:	f7fd fc30 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8005d30:	4603      	mov	r3, r0
 8005d32:	005a      	lsls	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d48:	e03a      	b.n	8005dc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005d4a:	f7fd fc37 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	005a      	lsls	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d66:	e02b      	b.n	8005dc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005d72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6852      	ldr	r2, [r2, #4]
 8005d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d82:	e01d      	b.n	8005dc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d84:	f7fd fb6e 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	005a      	lsls	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	441a      	add	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005da0:	e00e      	b.n	8005dc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005db8:	e002      	b.n	8005dc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8005dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d916      	bls.n	8005df4 <UART_SetConfig+0x590>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d212      	bcs.n	8005df4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f023 030f 	bic.w	r3, r3, #15
 8005dd6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	897b      	ldrh	r3, [r7, #10]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	897a      	ldrh	r2, [r7, #10]
 8005df0:	60da      	str	r2, [r3, #12]
 8005df2:	e070      	b.n	8005ed6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	74fb      	strb	r3, [r7, #19]
 8005df8:	e06d      	b.n	8005ed6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8005dfa:	7efb      	ldrb	r3, [r7, #27]
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d859      	bhi.n	8005eb4 <UART_SetConfig+0x650>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x5a4>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e49 	.word	0x08005e49
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005eb5 	.word	0x08005eb5
 8005e18:	08005e81 	.word	0x08005e81
 8005e1c:	08005eb5 	.word	0x08005eb5
 8005e20:	08005eb5 	.word	0x08005eb5
 8005e24:	08005eb5 	.word	0x08005eb5
 8005e28:	08005e9d 	.word	0x08005e9d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e2c:	f7fd fbb0 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e46:	e038      	b.n	8005eba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005e48:	f7fd fbb8 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	441a      	add	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e62:	e02a      	b.n	8005eba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005e6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6852      	ldr	r2, [r2, #4]
 8005e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e7e:	e01c      	b.n	8005eba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e80:	f7fd faf0 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e9a:	e00e      	b.n	8005eba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eb2:	e002      	b.n	8005eba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8005eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d908      	bls.n	8005ed2 <UART_SetConfig+0x66e>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d204      	bcs.n	8005ed2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e001      	b.n	8005ed6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005eee:	bf00      	nop
 8005ef0:	f4240000 	.word	0xf4240000

08005ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01a      	beq.n	800600a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff2:	d10a      	bne.n	800600a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af02      	add	r7, sp, #8
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006046:	f7fa fa75 	bl	8000534 <HAL_GetTick>
 800604a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b08      	cmp	r3, #8
 8006058:	d10e      	bne.n	8006078 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800605a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f82a 	bl	80060c2 <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e020      	b.n	80060ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d10e      	bne.n	80060a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f814 	bl	80060c2 <UART_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e00a      	b.n	80060ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d2:	e02a      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d026      	beq.n	800612a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060dc:	f7fa fa2a 	bl	8000534 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11b      	bne.n	800612a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006100:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e00f      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0c5      	beq.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006168:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006192:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	661a      	str	r2, [r3, #96]	; 0x60
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d114      	bne.n	8006202 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ee:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006200:	e002      	b.n	8006208 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f7ff fb10 	bl	8005828 <HAL_UART_TxCpltCallback>
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fb0c 	bl	800583c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006244:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d109      	bne.n	8006268 <UART_DMAError+0x3c>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b21      	cmp	r3, #33	; 0x21
 8006258:	d106      	bne.n	8006268 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff75 	bl	8006152 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d109      	bne.n	800628a <UART_DMAError+0x5e>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b22      	cmp	r3, #34	; 0x22
 800627a:	d106      	bne.n	800628a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006284:	6978      	ldr	r0, [r7, #20]
 8006286:	f7ff ff79 	bl	800617c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628e:	f043 0210 	orr.w	r2, r3, #16
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff fada 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff fac4 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fa97 	bl	8005828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006316:	b084      	sub	sp, #16
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	f107 001c 	add.w	r0, r7, #28
 8006324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2b01      	cmp	r3, #1
 800632c:	d122      	bne.n	8006374 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d105      	bne.n	8006368 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f937 	bl	80065dc <USB_CoreReset>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e01a      	b.n	80063aa <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f92b 	bl	80065dc <USB_CoreReset>
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800638a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
 800639c:	e005      	b.n	80063aa <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b6:	b004      	add	sp, #16
 80063b8:	4770      	bx	lr

080063ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 0201 	bic.w	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d106      	bne.n	800642a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]
 8006428:	e00b      	b.n	8006442 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	e001      	b.n	8006442 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e003      	b.n	800644a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006442:	2032      	movs	r0, #50	; 0x32
 8006444:	f7fa f882 	bl	800054c <HAL_Delay>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	019b      	lsls	r3, r3, #6
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <USB_FlushTxFifo+0x48>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d901      	bls.n	8006480 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b20      	cmp	r3, #32
 800648a:	d0f0      	beq.n	800646e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	00030d40 	.word	0x00030d40

080064a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2210      	movs	r2, #16
 80064b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <USB_FlushRxFifo+0x40>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d0f0      	beq.n	80064b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	00030d40 	.word	0x00030d40

080064e4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b089      	sub	sp, #36	; 0x24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4611      	mov	r1, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	460b      	mov	r3, r1
 80064f4:	71fb      	strb	r3, [r7, #7]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006502:	88bb      	ldrh	r3, [r7, #4]
 8006504:	3303      	adds	r3, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e00f      	b.n	8006530 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	031a      	lsls	r2, r3, #12
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4413      	add	r3, r2
 8006518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651c:	461a      	mov	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3304      	adds	r3, #4
 8006528:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	3301      	adds	r3, #1
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d3eb      	bcc.n	8006510 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3724      	adds	r7, #36	; 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006546:	b480      	push	{r7}
 8006548:	b089      	sub	sp, #36	; 0x24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	4613      	mov	r3, r2
 8006552:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	3303      	adds	r3, #3
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e00b      	b.n	8006582 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	601a      	str	r2, [r3, #0]
    pDest++;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3304      	adds	r3, #4
 800657a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	3301      	adds	r3, #1
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d3ef      	bcc.n	800656a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800658a:	69fb      	ldr	r3, [r7, #28]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3724      	adds	r7, #36	; 0x24
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0301 	and.w	r3, r3, #1
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <USB_CoreReset+0x64>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e01b      	b.n	8006632 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	daf2      	bge.n	80065e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <USB_CoreReset+0x64>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e006      	b.n	8006632 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d0f0      	beq.n	8006612 <USB_CoreReset+0x36>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	00030d40 	.word	0x00030d40

08006644 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006644:	b084      	sub	sp, #16
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	f107 001c 	add.w	r0, r7, #28
 8006652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006692:	2110      	movs	r1, #16
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fedd 	bl	8006454 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ff00 	bl	80064a0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e015      	b.n	80066d2 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	461a      	mov	r2, r3
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3e5      	bcc.n	80066a6 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80066da:	2101      	movs	r1, #1
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f893 	bl	8006808 <USB_DriveVbus>

  HAL_Delay(200U);
 80066e2:	20c8      	movs	r0, #200	; 0xc8
 80066e4:	f7f9 ff32 	bl	800054c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2280      	movs	r2, #128	; 0x80
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a0d      	ldr	r2, [pc, #52]	; (8006734 <USB_HostInit+0xf0>)
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <USB_HostInit+0xf4>)
 8006706:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f043 0210 	orr.w	r2, r3, #16
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <USB_HostInit+0xf8>)
 800671c:	4313      	orrs	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800672e:	b004      	add	sp, #16
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	00600080 	.word	0x00600080
 8006738:	004000e0 	.word	0x004000e0
 800673c:	a3200008 	.word	0xa3200008

08006740 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006778:	4313      	orrs	r3, r2
 800677a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006788:	461a      	mov	r2, r3
 800678a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800678e:	6053      	str	r3, [r2, #4]
 8006790:	e009      	b.n	80067a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d106      	bne.n	80067a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679e:	461a      	mov	r2, r3
 80067a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80067a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067e4:	2064      	movs	r0, #100	; 0x64
 80067e6:	f7f9 feb1 	bl	800054c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067f8:	200a      	movs	r0, #10
 80067fa:	f7f9 fea7 	bl	800054c <HAL_Delay>

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800682c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <USB_DriveVbus+0x44>
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d106      	bne.n	800684c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800684a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d109      	bne.n	800686c <USB_DriveVbus+0x64>
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	0c5b      	lsrs	r3, r3, #17
 8006898:	f003 0303 	and.w	r3, r3, #3
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	b29b      	uxth	r3, r3
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	70fb      	strb	r3, [r7, #3]
 80068de:	460b      	mov	r3, r1
 80068e0:	70bb      	strb	r3, [r7, #2]
 80068e2:	4613      	mov	r3, r2
 80068e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	461a      	mov	r2, r3
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006902:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006906:	2b03      	cmp	r3, #3
 8006908:	d867      	bhi.n	80069da <USB_HC_Init+0x10e>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USB_HC_Init+0x44>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006921 	.word	0x08006921
 8006914:	0800699d 	.word	0x0800699d
 8006918:	08006921 	.word	0x08006921
 800691c:	0800695f 	.word	0x0800695f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006932:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da51      	bge.n	80069e0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800695c:	e040      	b.n	80069e0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	461a      	mov	r2, r3
 800696c:	f240 639d 	movw	r3, #1693	; 0x69d
 8006970:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da34      	bge.n	80069e4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	440a      	add	r2, r1
 8006990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006998:	60d3      	str	r3, [r2, #12]
      }

      break;
 800699a:	e023      	b.n	80069e4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	461a      	mov	r2, r3
 80069aa:	f240 2325 	movw	r3, #549	; 0x225
 80069ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da17      	bge.n	80069e8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069d6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069d8:	e006      	b.n	80069e8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]
      break;
 80069de:	e004      	b.n	80069ea <USB_HC_Init+0x11e>
      break;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <USB_HC_Init+0x11e>
      break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <USB_HC_Init+0x11e>
      break;
 80069e8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	2101      	movs	r1, #1
 80069fa:	fa01 f303 	lsl.w	r3, r1, r3
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a04:	4313      	orrs	r3, r2
 8006a06:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da03      	bge.n	8006a24 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	e001      	b.n	8006a28 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006a28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d103      	bne.n	8006a38 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e001      	b.n	8006a3c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a3c:	787b      	ldrb	r3, [r7, #1]
 8006a3e:	059b      	lsls	r3, r3, #22
 8006a40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a44:	78bb      	ldrb	r3, [r7, #2]
 8006a46:	02db      	lsls	r3, r3, #11
 8006a48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a52:	049b      	lsls	r3, r3, #18
 8006a54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	0159      	lsls	r1, r3, #5
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	440b      	add	r3, r1
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d10f      	bne.n	8006aa2 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aa0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d018      	beq.n	8006b04 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	8912      	ldrh	r2, [r2, #8]
 8006ada:	4413      	add	r3, r2
 8006adc:	3b01      	subs	r3, #1
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	8912      	ldrh	r2, [r2, #8]
 8006ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006ae8:	8bfa      	ldrh	r2, [r7, #30]
 8006aea:	8a7b      	ldrh	r3, [r7, #18]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d90b      	bls.n	8006b08 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006af0:	8a7b      	ldrh	r3, [r7, #18]
 8006af2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006af4:	8bfb      	ldrh	r3, [r7, #30]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	8912      	ldrh	r2, [r2, #8]
 8006afa:	fb02 f203 	mul.w	r2, r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	611a      	str	r2, [r3, #16]
 8006b02:	e001      	b.n	8006b08 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006b04:	2301      	movs	r3, #1
 8006b06:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	78db      	ldrb	r3, [r3, #3]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d006      	beq.n	8006b1e <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	8912      	ldrh	r2, [r2, #8]
 8006b16:	fb02 f203 	mul.w	r2, r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b26:	8bfb      	ldrh	r3, [r7, #30]
 8006b28:	04d9      	lsls	r1, r3, #19
 8006b2a:	4b5f      	ldr	r3, [pc, #380]	; (8006ca8 <USB_HC_StartXfer+0x1f8>)
 8006b2c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b2e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	7a9b      	ldrb	r3, [r3, #10]
 8006b34:	075b      	lsls	r3, r3, #29
 8006b36:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	0148      	lsls	r0, r1, #5
 8006b3e:	69b9      	ldr	r1, [r7, #24]
 8006b40:	4401      	add	r1, r0
 8006b42:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b46:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b48:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	7c7b      	ldrb	r3, [r7, #17]
 8006b92:	075b      	lsls	r3, r3, #29
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	0148      	lsls	r0, r1, #5
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3e      	ldr	r2, [pc, #248]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bb4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	4a3b      	ldr	r2, [pc, #236]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bc0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bca:	4b38      	ldr	r3, [pc, #224]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd2:	4a36      	ldr	r2, [pc, #216]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	e005      	b.n	8006be4 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006bd8:	4b34      	ldr	r3, [pc, #208]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006be0:	4a32      	ldr	r2, [pc, #200]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006be2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006be4:	4b31      	ldr	r3, [pc, #196]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006bee:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <USB_HC_StartXfer+0x1fc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d148      	bne.n	8006c9e <USB_HC_StartXfer+0x1ee>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d044      	beq.n	8006c9e <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	79db      	ldrb	r3, [r3, #7]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d831      	bhi.n	8006c80 <USB_HC_StartXfer+0x1d0>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <USB_HC_StartXfer+0x174>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c35 	.word	0x08006c35
 8006c30:	08006c59 	.word	0x08006c59
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c3e:	89fa      	ldrh	r2, [r7, #14]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d91c      	bls.n	8006c84 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f043 0220 	orr.w	r2, r3, #32
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	619a      	str	r2, [r3, #24]
          }
          break;
 8006c56:	e015      	b.n	8006c84 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	3303      	adds	r3, #3
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c62:	89fa      	ldrh	r2, [r7, #14]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d90a      	bls.n	8006c88 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	619a      	str	r2, [r3, #24]
          }
          break;
 8006c7e:	e003      	b.n	8006c88 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <USB_HC_StartXfer+0x1da>
          break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <USB_HC_StartXfer+0x1da>
          break;
 8006c88:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68d9      	ldr	r1, [r3, #12]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	785a      	ldrb	r2, [r3, #1]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff fc23 	bl	80064e4 <USB_WritePacket>
    }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	1ff80000 	.word	0x1ff80000
 8006cac:	200000b0 	.word	0x200000b0

08006cb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	b29b      	uxth	r3, r3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b087      	sub	sp, #28
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	0c9b      	lsrs	r3, r3, #18
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <USB_HC_Halt+0x3a>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d16c      	bne.n	8006de6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d2a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d143      	bne.n	8006dc0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d96:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da4:	d81d      	bhi.n	8006de2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dbc:	d0ec      	beq.n	8006d98 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dbe:	e080      	b.n	8006ec2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dde:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006de0:	e06f      	b.n	8006ec2 <USB_HC_Halt+0x1f0>
          break;
 8006de2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006de4:	e06d      	b.n	8006ec2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e04:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d143      	bne.n	8006e9e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e74:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e82:	d81d      	bhi.n	8006ec0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9a:	d0ec      	beq.n	8006e76 <USB_HC_Halt+0x1a4>
 8006e9c:	e011      	b.n	8006ec2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e000      	b.n	8006ec2 <USB_HC_Halt+0x1f0>
          break;
 8006ec0:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fa7b 	bl	80063dc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff fab3 	bl	8006454 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fad6 	bl	80064a0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	e01f      	b.n	8006f3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	461a      	mov	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3301      	adds	r3, #1
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b0f      	cmp	r3, #15
 8006f3e:	d9dc      	bls.n	8006efa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e034      	b.n	8006fb0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	3301      	adds	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f8c:	d80c      	bhi.n	8006fa8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa4:	d0ec      	beq.n	8006f80 <USB_StopHost+0xb0>
 8006fa6:	e000      	b.n	8006faa <USB_StopHost+0xda>
        break;
 8006fa8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3301      	adds	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d9c7      	bls.n	8006f46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fca:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff f9f4 	bl	80063ba <USB_EnableGlobalInt>

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b089      	sub	sp, #36	; 0x24
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006fe8:	2301      	movs	r3, #1
 8006fea:	2202      	movs	r2, #2
 8006fec:	2102      	movs	r1, #2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc8c 	bl	800790c <USBH_FindInterface>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2bff      	cmp	r3, #255	; 0xff
 8006ffc:	f000 812a 	beq.w	8007254 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fc65 	bl	80078d4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8007010:	2050      	movs	r0, #80	; 0x50
 8007012:	f005 fd0f 	bl	800ca34 <malloc>
 8007016:	4603      	mov	r3, r0
 8007018:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	211a      	movs	r1, #26
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b25b      	sxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	da15      	bge.n	8007068 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	211a      	movs	r1, #26
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	211a      	movs	r1, #26
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	4413      	add	r3, r2
 800705e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 ff2f 	bl	8008ed2 <USBH_AllocPipe>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	7819      	ldrb	r1, [r3, #0]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	7858      	ldrb	r0, [r3, #1]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	8952      	ldrh	r2, [r2, #10]
 8007094:	9202      	str	r2, [sp, #8]
 8007096:	2203      	movs	r2, #3
 8007098:	9201      	str	r2, [sp, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4623      	mov	r3, r4
 800709e:	4602      	mov	r2, r0
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fee7 	bl	8008e74 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f005 fbe6 	bl	800c880 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80070b4:	2300      	movs	r3, #0
 80070b6:	2200      	movs	r2, #0
 80070b8:	210a      	movs	r1, #10
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc26 	bl	800790c <USBH_FindInterface>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2bff      	cmp	r3, #255	; 0xff
 80070c8:	f000 80c4 	beq.w	8007254 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	211a      	movs	r1, #26
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da16      	bge.n	8007112 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	211a      	movs	r1, #26
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	211a      	movs	r1, #26
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	4413      	add	r3, r2
 8007106:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800710a:	881a      	ldrh	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	835a      	strh	r2, [r3, #26]
 8007110:	e015      	b.n	800713e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	211a      	movs	r1, #26
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	211a      	movs	r1, #26
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	4413      	add	r3, r2
 8007134:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007138:	881a      	ldrh	r2, [r3, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	211a      	movs	r1, #26
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b25b      	sxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	da16      	bge.n	8007184 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	211a      	movs	r1, #26
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	211a      	movs	r1, #26
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	835a      	strh	r2, [r3, #26]
 8007182:	e015      	b.n	80071b0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	211a      	movs	r1, #26
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	4413      	add	r3, r2
 8007190:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007194:	781a      	ldrb	r2, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	211a      	movs	r1, #26
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	7b9b      	ldrb	r3, [r3, #14]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fe8b 	bl	8008ed2 <USBH_AllocPipe>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	7bdb      	ldrb	r3, [r3, #15]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fe81 	bl	8008ed2 <USBH_AllocPipe>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	7b59      	ldrb	r1, [r3, #13]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7b98      	ldrb	r0, [r3, #14]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	8b12      	ldrh	r2, [r2, #24]
 80071f0:	9202      	str	r2, [sp, #8]
 80071f2:	2202      	movs	r2, #2
 80071f4:	9201      	str	r2, [sp, #4]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4623      	mov	r3, r4
 80071fa:	4602      	mov	r2, r0
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fe39 	bl	8008e74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	7b19      	ldrb	r1, [r3, #12]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	7bd8      	ldrb	r0, [r3, #15]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	8b52      	ldrh	r2, [r2, #26]
 800721a:	9202      	str	r2, [sp, #8]
 800721c:	2202      	movs	r2, #2
 800721e:	9201      	str	r2, [sp, #4]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4623      	mov	r3, r4
 8007224:	4602      	mov	r2, r0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fe24 	bl	8008e74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7b5b      	ldrb	r3, [r3, #13]
 8007238:	2200      	movs	r2, #0
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f005 fb1f 	bl	800c880 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	7b1b      	ldrb	r3, [r3, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f005 fb18 	bl	800c880 <USBH_LL_SetToggle>
      status = USBH_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}

0800725e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fe17 	bl	8008eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fe3f 	bl	8008f0e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	7b1b      	ldrb	r3, [r3, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	7b1b      	ldrb	r3, [r3, #12]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fe04 	bl	8008eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	7b1b      	ldrb	r3, [r3, #12]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fe2c 	bl	8008f0e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	7b5b      	ldrb	r3, [r3, #13]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00e      	beq.n	80072e2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	7b5b      	ldrb	r3, [r3, #13]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fdf1 	bl	8008eb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	7b5b      	ldrb	r3, [r3, #13]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fe19 	bl	8008f0e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f005 fba4 	bl	800ca44 <free>
    phost->pActiveClass->pData = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007318:	2302      	movs	r3, #2
 800731a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3340      	adds	r3, #64	; 0x40
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f8b2 	bl	8007496 <GetLineCoding>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007342:	2102      	movs	r1, #2
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
  }
  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007374:	2b04      	cmp	r3, #4
 8007376:	d877      	bhi.n	8007468 <USBH_CDC_Process+0x114>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <USBH_CDC_Process+0x2c>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007395 	.word	0x08007395
 8007384:	0800739b 	.word	0x0800739b
 8007388:	080073cb 	.word	0x080073cb
 800738c:	0800743f 	.word	0x0800743f
 8007390:	0800744d 	.word	0x0800744d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
    break;
 8007398:	e06d      	b.n	8007476 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f897 	bl	80074d4 <SetLineCoding>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80073b8:	e058      	b.n	800746c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d055      	beq.n	800746c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2204      	movs	r2, #4
 80073c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80073c8:	e050      	b.n	800746c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3340      	adds	r3, #64	; 0x40
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f860 	bl	8007496 <GetLineCoding>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d126      	bne.n	800742e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d13b      	bne.n	8007470 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007402:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007404:	429a      	cmp	r2, r3
 8007406:	d133      	bne.n	8007470 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007414:	429a      	cmp	r2, r3
 8007416:	d12b      	bne.n	8007470 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007420:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007422:	429a      	cmp	r2, r3
 8007424:	d124      	bne.n	8007470 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f984 	bl	8007734 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800742c:	e020      	b.n	8007470 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d01d      	beq.n	8007470 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800743c:	e018      	b.n	8007470 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f867 	bl	8007512 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8f8 	bl	800763a <CDC_ProcessReception>
    break;
 800744a:	e014      	b.n	8007476 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fffa 	bl	8008448 <USBH_ClrFeature>
 8007454:	4603      	mov	r3, r0
 8007456:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8007466:	e005      	b.n	8007474 <USBH_CDC_Process+0x120>

  default:
    break;
 8007468:	bf00      	nop
 800746a:	e004      	b.n	8007476 <USBH_CDC_Process+0x122>
    break;
 800746c:	bf00      	nop
 800746e:	e002      	b.n	8007476 <USBH_CDC_Process+0x122>
    break;
 8007470:	bf00      	nop
 8007472:	e000      	b.n	8007476 <USBH_CDC_Process+0x122>
    break;
 8007474:	bf00      	nop

  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	22a1      	movs	r2, #161	; 0xa1
 80074a4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2207      	movs	r2, #7
 80074bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2207      	movs	r2, #7
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f99f 	bl	8008808 <USBH_CtlReq>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2221      	movs	r2, #33	; 0x21
 80074e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2207      	movs	r2, #7
 80074fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2207      	movs	r2, #7
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f980 	bl	8008808 <USBH_CtlReq>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af02      	add	r7, sp, #8
 8007518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007524:	2300      	movs	r3, #0
 8007526:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800752e:	2b01      	cmp	r3, #1
 8007530:	d002      	beq.n	8007538 <CDC_ProcessTransmission+0x26>
 8007532:	2b02      	cmp	r3, #2
 8007534:	d025      	beq.n	8007582 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8007536:	e07c      	b.n	8007632 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	8b12      	ldrh	r2, [r2, #24]
 8007540:	4293      	cmp	r3, r2
 8007542:	d90c      	bls.n	800755e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	69d9      	ldr	r1, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8b1a      	ldrh	r2, [r3, #24]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	7b58      	ldrb	r0, [r3, #13]
 8007550:	2301      	movs	r3, #1
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fc49 	bl	8008dee <USBH_BulkSendData>
 800755c:	e00c      	b.n	8007578 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7b58      	ldrb	r0, [r3, #13]
 800756c:	2301      	movs	r3, #1
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fc3b 	bl	8008dee <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007580:	e057      	b.n	8007632 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	7b5b      	ldrb	r3, [r3, #13]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f005 f94f 	bl	800c82c <USBH_LL_GetURBState>
 800758e:	4603      	mov	r3, r0
 8007590:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d136      	bne.n	8007606 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	8b12      	ldrh	r2, [r2, #24]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d90e      	bls.n	80075c2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	8b12      	ldrh	r2, [r2, #24]
 80075ac:	1a9a      	subs	r2, r3, r2
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	8b12      	ldrh	r2, [r2, #24]
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	61da      	str	r2, [r3, #28]
 80075c0:	e002      	b.n	80075c8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80075d8:	e006      	b.n	80075e8 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f892 	bl	800770c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2204      	movs	r2, #4
 80075ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075fc:	2200      	movs	r2, #0
 80075fe:	4619      	mov	r1, r3
 8007600:	f001 fd4e 	bl	80090a0 <osMessagePut>
    break;
 8007604:	e014      	b.n	8007630 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d111      	bne.n	8007630 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2204      	movs	r2, #4
 8007618:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007628:	2200      	movs	r2, #0
 800762a:	4619      	mov	r1, r3
 800762c:	f001 fd38 	bl	80090a0 <osMessagePut>
    break;
 8007630:	bf00      	nop
  }
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800764c:	2300      	movs	r3, #0
 800764e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007656:	2b03      	cmp	r3, #3
 8007658:	d002      	beq.n	8007660 <CDC_ProcessReception+0x26>
 800765a:	2b04      	cmp	r3, #4
 800765c:	d00e      	beq.n	800767c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800765e:	e051      	b.n	8007704 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	6a19      	ldr	r1, [r3, #32]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	8b5a      	ldrh	r2, [r3, #26]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	7b1b      	ldrb	r3, [r3, #12]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fbe3 	bl	8008e38 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2204      	movs	r2, #4
 8007676:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800767a:	e043      	b.n	8007704 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f005 f8d2 	bl	800c82c <USBH_LL_GetURBState>
 8007688:	4603      	mov	r3, r0
 800768a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800768c:	7cfb      	ldrb	r3, [r7, #19]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d137      	bne.n	8007702 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	7b1b      	ldrb	r3, [r3, #12]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f005 f835 	bl	800c708 <USBH_LL_GetLastXferSize>
 800769e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d016      	beq.n	80076d8 <CDC_ProcessReception+0x9e>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	8b5b      	ldrh	r3, [r3, #26]
 80076ae:	461a      	mov	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d910      	bls.n	80076d8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	441a      	add	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2203      	movs	r2, #3
 80076d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80076d6:	e006      	b.n	80076e6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f81d 	bl	8007720 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2204      	movs	r2, #4
 80076ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076fa:	2200      	movs	r2, #0
 80076fc:	4619      	mov	r1, r3
 80076fe:	f001 fccf 	bl	80090a0 <osMessagePut>
    break;
 8007702:	bf00      	nop
  }
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b08c      	sub	sp, #48	; 0x30
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	e03c      	b.n	80077da <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	79fa      	ldrb	r2, [r7, #7]
 8007764:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f837 	bl	80077ec <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <USBH_Init+0x9c>)
 800778e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007796:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800779a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fc6b 	bl	800907c <osMessageCreate>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <USBH_Init+0xa0>)
 80077b0:	f107 0414 	add.w	r4, r7, #20
 80077b4:	461d      	mov	r5, r3
 80077b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ba:	682b      	ldr	r3, [r5, #0]
 80077bc:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fc12 	bl	8008fee <osThreadCreate>
 80077ca:	4602      	mov	r2, r0
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f004 fee6 	bl	800c5a4 <USBH_LL_Init>

  return USBH_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3730      	adds	r7, #48	; 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	bdb0      	pop	{r4, r5, r7, pc}
 80077e2:	bf00      	nop
 80077e4:	0800cc0c 	.word	0x0800cc0c
 80077e8:	0800cc20 	.word	0x0800cc20

080077ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80077f8:	e008      	b.n	800780c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	32e0      	adds	r2, #224	; 0xe0
 8007800:	2100      	movs	r1, #0
 8007802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b0e      	cmp	r3, #14
 8007810:	d9f3      	bls.n	80077fa <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e009      	b.n	800782c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007832:	d3f1      	bcc.n	8007818 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d017      	beq.n	80078c2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	33dc      	adds	r3, #220	; 0xdc
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e004      	b.n	80078c6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e001      	b.n	80078c6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d204      	bcs.n	80078fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80078f8:	e001      	b.n	80078fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	4603      	mov	r3, r0
 800791c:	70fb      	strb	r3, [r7, #3]
 800791e:	460b      	mov	r3, r1
 8007920:	70bb      	strb	r3, [r7, #2]
 8007922:	4613      	mov	r3, r2
 8007924:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007934:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007936:	e025      	b.n	8007984 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	221a      	movs	r2, #26
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	3308      	adds	r3, #8
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	3302      	adds	r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <USBH_FindInterface+0x4e>
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d111      	bne.n	800797e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800795e:	78ba      	ldrb	r2, [r7, #2]
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007964:	78bb      	ldrb	r3, [r7, #2]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d109      	bne.n	800797e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800796e:	787a      	ldrb	r2, [r7, #1]
 8007970:	429a      	cmp	r2, r3
 8007972:	d002      	beq.n	800797a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007974:	787b      	ldrb	r3, [r7, #1]
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d101      	bne.n	800797e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	e006      	b.n	800798c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	3301      	adds	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d9d6      	bls.n	8007938 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800798a:	23ff      	movs	r3, #255	; 0xff
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f004 fe3b 	bl	800c61c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f004 ff52 	bl	800c852 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af04      	add	r7, sp, #16
 80079be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079c0:	2302      	movs	r3, #2
 80079c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fb7e 	bl	80080ca <USBH_IsPortEnabled>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <USBH_Process+0x36>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d002      	beq.n	80079ee <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2203      	movs	r2, #3
 80079ec:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b0b      	cmp	r3, #11
 80079f6:	f200 81ab 	bhi.w	8007d50 <USBH_Process+0x398>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <USBH_Process+0x48>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a31 	.word	0x08007a31
 8007a04:	08007a6f 	.word	0x08007a6f
 8007a08:	08007a83 	.word	0x08007a83
 8007a0c:	08007d2b 	.word	0x08007d2b
 8007a10:	08007d51 	.word	0x08007d51
 8007a14:	08007b2d 	.word	0x08007b2d
 8007a18:	08007cc5 	.word	0x08007cc5
 8007a1c:	08007b5d 	.word	0x08007b5d
 8007a20:	08007b99 	.word	0x08007b99
 8007a24:	08007bd3 	.word	0x08007bd3
 8007a28:	08007c1b 	.word	0x08007c1b
 8007a2c:	08007d13 	.word	0x08007d13
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 818b 	beq.w	8007d54 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007a44:	20c8      	movs	r0, #200	; 0xc8
 8007a46:	f004 ff4e 	bl	800c8e6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f004 fe41 	bl	800c6d2 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a64:	2200      	movs	r2, #0
 8007a66:	4619      	mov	r1, r3
 8007a68:	f001 fb1a 	bl	80090a0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a6c:	e172      	b.n	8007d54 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	f040 816f 	bne.w	8007d58 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007a80:	e16a      	b.n	8007d58 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007a82:	2064      	movs	r0, #100	; 0x64
 8007a84:	f004 ff2f 	bl	800c8e6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f004 fdfd 	bl	800c688 <USBH_LL_GetSpeed>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2205      	movs	r2, #5
 8007a9c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fa16 	bl	8008ed2 <USBH_AllocPipe>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fa0e 	bl	8008ed2 <USBH_AllocPipe>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7919      	ldrb	r1, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007ad2:	b292      	uxth	r2, r2
 8007ad4:	9202      	str	r2, [sp, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	9201      	str	r2, [sp, #4]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4603      	mov	r3, r0
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f9c7 	bl	8008e74 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7959      	ldrb	r1, [r3, #5]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007afa:	b292      	uxth	r2, r2
 8007afc:	9202      	str	r2, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	9201      	str	r2, [sp, #4]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	2200      	movs	r2, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f9b3 	bl	8008e74 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b22:	2200      	movs	r2, #0
 8007b24:	4619      	mov	r1, r3
 8007b26:	f001 fabb 	bl	80090a0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007b2a:	e120      	b.n	8007d6e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f923 	bl	8007d78 <USBH_HandleEnum>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 8111 	bne.w	8007d5c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d103      	bne.n	8007b54 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2208      	movs	r2, #8
 8007b50:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007b52:	e103      	b.n	8007d5c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2207      	movs	r2, #7
 8007b58:	701a      	strb	r2, [r3, #0]
    break;
 8007b5a:	e0ff      	b.n	8007d5c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80fc 	beq.w	8007d60 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2208      	movs	r2, #8
 8007b78:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2205      	movs	r2, #5
 8007b7e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b8e:	2200      	movs	r2, #0
 8007b90:	4619      	mov	r1, r3
 8007b92:	f001 fa85 	bl	80090a0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b96:	e0e3      	b.n	8007d60 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fc09 	bl	80083ba <USBH_SetCfg>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2209      	movs	r2, #9
 8007bb2:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f001 fa68 	bl	80090a0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007bd0:	e0cd      	b.n	8007d6e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007be0:	2101      	movs	r1, #1
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fc0c 	bl	8008400 <USBH_SetFeature>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	e002      	b.n	8007bfc <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c10:	2200      	movs	r2, #0
 8007c12:	4619      	mov	r1, r3
 8007c14:	f001 fa44 	bl	80090a0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007c18:	e0a9      	b.n	8007d6e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d040      	beq.n	8007ca6 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
 8007c30:	e017      	b.n	8007c62 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	33dc      	adds	r3, #220	; 0xdc
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	791a      	ldrb	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d108      	bne.n	8007c5c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	33dc      	adds	r3, #220	; 0xdc
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0e4      	beq.n	8007c32 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2206      	movs	r2, #6
 8007c88:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c90:	2103      	movs	r1, #3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
 8007c96:	e006      	b.n	8007ca6 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	220d      	movs	r2, #13
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	220d      	movs	r2, #13
 8007ca4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2205      	movs	r2, #5
 8007caa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f001 f9ef 	bl	80090a0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007cc2:	e054      	b.n	8007d6e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00f      	beq.n	8007cee <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d13e      	bne.n	8007d64 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	220b      	movs	r2, #11
 8007cea:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007cec:	e03a      	b.n	8007d64 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220d      	movs	r2, #13
 8007cf2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f001 f9c8 	bl	80090a0 <osMessagePut>
    break;
 8007d10:	e028      	b.n	8007d64 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d025      	beq.n	8007d68 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
    }
    break;
 8007d28:	e01e      	b.n	8007d68 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff fd5e 	bl	80077ec <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d018      	beq.n	8007d6c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007d4e:	e00d      	b.n	8007d6c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8007d50:	bf00      	nop
 8007d52:	e00c      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d54:	bf00      	nop
 8007d56:	e00a      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d58:	bf00      	nop
 8007d5a:	e008      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d5c:	bf00      	nop
 8007d5e:	e006      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d60:	bf00      	nop
 8007d62:	e004      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d64:	bf00      	nop
 8007d66:	e002      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d6c:	bf00      	nop
  }
 return USBH_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b07      	cmp	r3, #7
 8007d8a:	f200 8132 	bhi.w	8007ff2 <USBH_HandleEnum+0x27a>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBH_HandleEnum+0x1c>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007e27 	.word	0x08007e27
 8007d9c:	08007e3f 	.word	0x08007e3f
 8007da0:	08007eb5 	.word	0x08007eb5
 8007da4:	08007ecd 	.word	0x08007ecd
 8007da8:	08007eeb 	.word	0x08007eeb
 8007dac:	08007f57 	.word	0x08007f57
 8007db0:	08007fa7 	.word	0x08007fa7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007db4:	2108      	movs	r1, #8
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa2f 	bl	800821a <USBH_Get_DevDesc>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 8119 	bne.w	8007ff6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7919      	ldrb	r1, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007de8:	b292      	uxth	r2, r2
 8007dea:	9202      	str	r2, [sp, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	9201      	str	r2, [sp, #4]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4603      	mov	r3, r0
 8007df4:	2280      	movs	r2, #128	; 0x80
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 f83c 	bl	8008e74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	7959      	ldrb	r1, [r3, #5]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007e10:	b292      	uxth	r2, r2
 8007e12:	9202      	str	r2, [sp, #8]
 8007e14:	2200      	movs	r2, #0
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f828 	bl	8008e74 <USBH_OpenPipe>

    }
    break;
 8007e24:	e0e7      	b.n	8007ff6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007e26:	2112      	movs	r1, #18
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f9f6 	bl	800821a <USBH_Get_DevDesc>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 80e2 	bne.w	8007ffa <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007e3c:	e0dd      	b.n	8007ffa <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007e3e:	2101      	movs	r1, #1
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa96 	bl	8008372 <USBH_SetAddress>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 80d8 	bne.w	8007ffe <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8007e4e:	2002      	movs	r0, #2
 8007e50:	f004 fd49 	bl	800c8e6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2203      	movs	r2, #3
 8007e60:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7919      	ldrb	r1, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007e76:	b292      	uxth	r2, r2
 8007e78:	9202      	str	r2, [sp, #8]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	9201      	str	r2, [sp, #4]
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	4603      	mov	r3, r0
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fff5 	bl	8008e74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7959      	ldrb	r1, [r3, #5]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	9202      	str	r2, [sp, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	9201      	str	r2, [sp, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2200      	movs	r2, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 ffe1 	bl	8008e74 <USBH_OpenPipe>
    }
    break;
 8007eb2:	e0a4      	b.n	8007ffe <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007eb4:	2109      	movs	r1, #9
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9d7 	bl	800826a <USBH_Get_CfgDesc>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 809f 	bne.w	8008002 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007eca:	e09a      	b.n	8008002 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9c8 	bl	800826a <USBH_Get_CfgDesc>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 8092 	bne.w	8008006 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007ee8:	e08d      	b.n	8008006 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01e      	beq.n	8007f32 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007f00:	23ff      	movs	r3, #255	; 0xff
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9d5 	bl	80082b2 <USBH_Get_StringDesc>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d17d      	bne.n	800800a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2206      	movs	r2, #6
 8007f12:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2205      	movs	r2, #5
 8007f18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f001 f8b8 	bl	80090a0 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007f30:	e06b      	b.n	800800a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2206      	movs	r2, #6
 8007f36:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f001 f8a6 	bl	80090a0 <osMessagePut>
    break;
 8007f54:	e059      	b.n	800800a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007f6c:	23ff      	movs	r3, #255	; 0xff
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f99f 	bl	80082b2 <USBH_Get_StringDesc>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d149      	bne.n	800800e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007f80:	e045      	b.n	800800e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2207      	movs	r2, #7
 8007f86:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f001 f87e 	bl	80090a0 <osMessagePut>
    break;
 8007fa4:	e033      	b.n	800800e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007fbc:	23ff      	movs	r3, #255	; 0xff
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f977 	bl	80082b2 <USBH_Get_StringDesc>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d123      	bne.n	8008012 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007fce:	e020      	b.n	8008012 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4619      	mov	r1, r3
 8007fec:	f001 f858 	bl	80090a0 <osMessagePut>
    break;
 8007ff0:	e00f      	b.n	8008012 <USBH_HandleEnum+0x29a>

  default:
    break;
 8007ff2:	bf00      	nop
 8007ff4:	e00e      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8007ff6:	bf00      	nop
 8007ff8:	e00c      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8007ffa:	bf00      	nop
 8007ffc:	e00a      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8007ffe:	bf00      	nop
 8008000:	e008      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8008002:	bf00      	nop
 8008004:	e006      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8008006:	bf00      	nop
 8008008:	e004      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 800800a:	bf00      	nop
 800800c:	e002      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 800800e:	bf00      	nop
 8008010:	e000      	b.n	8008014 <USBH_HandleEnum+0x29c>
    break;
 8008012:	bf00      	nop
  }
  return Status;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f804 	bl	8008062 <USBH_HandleSof>
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b0b      	cmp	r3, #11
 8008072:	d10a      	bne.n	800808a <USBH_HandleSof+0x28>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
  }
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80080a2:	bf00      	nop
}
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80080be:	bf00      	nop
}
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10f      	bne.n	8008116 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00e      	beq.n	8008126 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800810e:	2104      	movs	r1, #4
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
 8008114:	e007      	b.n	8008126 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800811c:	2b01      	cmp	r3, #1
 800811e:	d102      	bne.n	8008126 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800813a:	2200      	movs	r2, #0
 800813c:	4619      	mov	r1, r3
 800813e:	f000 ffaf 	bl	80090a0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f004 fa7c 	bl	800c652 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	791b      	ldrb	r3, [r3, #4]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fed4 	bl	8008f0e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fece 	bl	8008f0e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800818a:	2105      	movs	r1, #5
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f004 fa43 	bl	800c61c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2203      	movs	r2, #3
 800819a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081b0:	2200      	movs	r2, #0
 80081b2:	4619      	mov	r1, r3
 80081b4:	f000 ff74 	bl	80090a0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 80081d0:	f107 030c 	add.w	r3, r7, #12
 80081d4:	f04f 32ff 	mov.w	r2, #4294967295
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 ffa1 	bl	8009120 <osMessageGet>
    if(event.status == osEventMessage)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d1f2      	bne.n	80081ca <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fbe7 	bl	80079b8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80081ea:	e7ee      	b.n	80081ca <USBH_Process_OS+0x8>

080081ec <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008208:	2200      	movs	r2, #0
 800820a:	4619      	mov	r1, r3
 800820c:	f000 ff48 	bl	80090a0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af02      	add	r7, sp, #8
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	b29b      	uxth	r3, r3
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008238:	2100      	movs	r1, #0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f864 	bl	8008308 <USBH_GetDescriptor>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	b292      	uxth	r2, r2
 800825a:	4619      	mov	r1, r3
 800825c:	f000 f918 	bl	8008490 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af02      	add	r7, sp, #8
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	331c      	adds	r3, #28
 800827a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f83d 	bl	8008308 <USBH_GetDescriptor>
 800828e:	4603      	mov	r3, r0
 8008290:	72fb      	strb	r3, [r7, #11]
 8008292:	7afb      	ldrb	r3, [r7, #11]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d107      	bne.n	80082a8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800829e:	887a      	ldrh	r2, [r7, #2]
 80082a0:	68f9      	ldr	r1, [r7, #12]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f964 	bl	8008570 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b088      	sub	sp, #32
 80082b6:	af02      	add	r7, sp, #8
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	72fb      	strb	r3, [r7, #11]
 80082c2:	4613      	mov	r3, r2
 80082c4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80082ce:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	460b      	mov	r3, r1
 80082dc:	2100      	movs	r1, #0
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f812 	bl	8008308 <USBH_GetDescriptor>
 80082e4:	4603      	mov	r3, r0
 80082e6:	75fb      	strb	r3, [r7, #23]
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d107      	bne.n	80082fe <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082f4:	893a      	ldrh	r2, [r7, #8]
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fa37 	bl	800876c <USBH_ParseStringDesc>
  }
  return status;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	72fb      	strb	r3, [r7, #11]
 8008316:	4613      	mov	r3, r2
 8008318:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	789b      	ldrb	r3, [r3, #2]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d11c      	bne.n	800835c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008328:	b2da      	uxtb	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2206      	movs	r2, #6
 8008332:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	893a      	ldrh	r2, [r7, #8]
 8008338:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800833a:	893b      	ldrh	r3, [r7, #8]
 800833c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008344:	d104      	bne.n	8008350 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f240 4209 	movw	r2, #1033	; 0x409
 800834c:	829a      	strh	r2, [r3, #20]
 800834e:	e002      	b.n	8008356 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8b3a      	ldrh	r2, [r7, #24]
 800835a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800835c:	8b3b      	ldrh	r3, [r7, #24]
 800835e:	461a      	mov	r2, r3
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fa50 	bl	8008808 <USBH_CtlReq>
 8008368:	4603      	mov	r3, r0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	789b      	ldrb	r3, [r3, #2]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10f      	bne.n	80083a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2205      	movs	r2, #5
 8008390:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80083a6:	2200      	movs	r2, #0
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa2c 	bl	8008808 <USBH_CtlReq>
 80083b0:	4603      	mov	r3, r0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	789b      	ldrb	r3, [r3, #2]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d10e      	bne.n	80083ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2209      	movs	r2, #9
 80083d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	887a      	ldrh	r2, [r7, #2]
 80083de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa09 	bl	8008808 <USBH_CtlReq>
 80083f6:	4603      	mov	r3, r0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d10f      	bne.n	8008434 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2203      	movs	r2, #3
 800841e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f9e5 	bl	8008808 <USBH_CtlReq>
 800843e:	4603      	mov	r3, r0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	789b      	ldrb	r3, [r3, #2]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d10f      	bne.n	800847c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f9c1 	bl	8008808 <USBH_CtlReq>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	785a      	ldrb	r2, [r3, #1]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	3302      	adds	r3, #2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3303      	adds	r3, #3
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	791a      	ldrb	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	795a      	ldrb	r2, [r3, #5]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	799a      	ldrb	r2, [r3, #6]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	79da      	ldrb	r2, [r3, #7]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d939      	bls.n	8008564 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3308      	adds	r3, #8
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	3309      	adds	r3, #9
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	b29b      	uxth	r3, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	330a      	adds	r3, #10
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	330b      	adds	r3, #11
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	b29b      	uxth	r3, r3
 8008520:	4313      	orrs	r3, r2
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	330c      	adds	r3, #12
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b29a      	uxth	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	330d      	adds	r3, #13
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	b29b      	uxth	r3, r3
 800853c:	4313      	orrs	r3, r2
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	7b9a      	ldrb	r2, [r3, #14]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	7bda      	ldrb	r2, [r3, #15]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	7c1a      	ldrb	r2, [r3, #16]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	7c5a      	ldrb	r2, [r3, #17]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	745a      	strb	r2, [r3, #17]
  }
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785a      	ldrb	r2, [r3, #1]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	3302      	adds	r3, #2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3303      	adds	r3, #3
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	791a      	ldrb	r2, [r3, #4]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	795a      	ldrb	r2, [r3, #5]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	799a      	ldrb	r2, [r3, #6]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	79da      	ldrb	r2, [r3, #7]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	7a1a      	ldrb	r2, [r3, #8]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	d95f      	bls.n	80086ac <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80085ec:	2309      	movs	r3, #9
 80085ee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085f4:	e051      	b.n	800869a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085f6:	f107 0316 	add.w	r3, r7, #22
 80085fa:	4619      	mov	r1, r3
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f000 f8e8 	bl	80087d2 <USBH_GetNextDesc>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d146      	bne.n	800869a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800860c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008610:	221a      	movs	r2, #26
 8008612:	fb02 f303 	mul.w	r3, r2, r3
 8008616:	3308      	adds	r3, #8
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	3302      	adds	r3, #2
 800861e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008622:	69f8      	ldr	r0, [r7, #28]
 8008624:	f000 f846 	bl	80086b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800862e:	2300      	movs	r3, #0
 8008630:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008632:	e022      	b.n	800867a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008634:	f107 0316 	add.w	r3, r7, #22
 8008638:	4619      	mov	r1, r3
 800863a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800863c:	f000 f8c9 	bl	80087d2 <USBH_GetNextDesc>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b05      	cmp	r3, #5
 8008648:	d117      	bne.n	800867a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800864a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800864e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008652:	3201      	adds	r2, #1
 8008654:	00d2      	lsls	r2, r2, #3
 8008656:	211a      	movs	r1, #26
 8008658:	fb01 f303 	mul.w	r3, r1, r3
 800865c:	4413      	add	r3, r2
 800865e:	3308      	adds	r3, #8
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	3304      	adds	r3, #4
 8008666:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800866a:	69b8      	ldr	r0, [r7, #24]
 800866c:	f000 f851 	bl	8008712 <USBH_ParseEPDesc>
            ep_ix++;
 8008670:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008674:	3301      	adds	r3, #1
 8008676:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008682:	429a      	cmp	r2, r3
 8008684:	d204      	bcs.n	8008690 <USBH_ParseCfgDesc+0x120>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	885a      	ldrh	r2, [r3, #2]
 800868a:	8afb      	ldrh	r3, [r7, #22]
 800868c:	429a      	cmp	r2, r3
 800868e:	d8d1      	bhi.n	8008634 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008694:	3301      	adds	r3, #1
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800869a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d804      	bhi.n	80086ac <USBH_ParseCfgDesc+0x13c>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	885a      	ldrh	r2, [r3, #2]
 80086a6:	8afb      	ldrh	r3, [r7, #22]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d8a4      	bhi.n	80085f6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80086ac:	bf00      	nop
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	785a      	ldrb	r2, [r3, #1]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	789a      	ldrb	r2, [r3, #2]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	78da      	ldrb	r2, [r3, #3]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	791a      	ldrb	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	795a      	ldrb	r2, [r3, #5]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	799a      	ldrb	r2, [r3, #6]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	79da      	ldrb	r2, [r3, #7]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	7a1a      	ldrb	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	721a      	strb	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785a      	ldrb	r2, [r3, #1]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	789a      	ldrb	r2, [r3, #2]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	78da      	ldrb	r2, [r3, #3]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	3304      	adds	r3, #4
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	3305      	adds	r3, #5
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	799a      	ldrb	r2, [r3, #6]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	719a      	strb	r2, [r3, #6]
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3301      	adds	r3, #1
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d120      	bne.n	80087c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	1e9a      	subs	r2, r3, #2
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	4293      	cmp	r3, r2
 800878e:	bf28      	it	cs
 8008790:	4613      	movcs	r3, r2
 8008792:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3302      	adds	r3, #2
 8008798:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800879a:	2300      	movs	r3, #0
 800879c:	82fb      	strh	r3, [r7, #22]
 800879e:	e00b      	b.n	80087b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087a0:	8afb      	ldrh	r3, [r7, #22]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087b2:	8afb      	ldrh	r3, [r7, #22]
 80087b4:	3302      	adds	r3, #2
 80087b6:	82fb      	strh	r3, [r7, #22]
 80087b8:	8afa      	ldrh	r2, [r7, #22]
 80087ba:	8abb      	ldrh	r3, [r7, #20]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3ef      	bcc.n	80087a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
  }
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	881a      	ldrh	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80087fa:	68fb      	ldr	r3, [r7, #12]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	789b      	ldrb	r3, [r3, #2]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d002      	beq.n	8008828 <USBH_CtlReq+0x20>
 8008822:	2b02      	cmp	r3, #2
 8008824:	d01d      	beq.n	8008862 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8008826:	e042      	b.n	80088ae <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2202      	movs	r2, #2
 800883e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008840:	2301      	movs	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2203      	movs	r2, #3
 8008848:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008858:	2200      	movs	r2, #0
 800885a:	4619      	mov	r1, r3
 800885c:	f000 fc20 	bl	80090a0 <osMessagePut>
    break;
 8008860:	e025      	b.n	80088ae <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f828 	bl	80088b8 <USBH_HandleControl>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]
    break;
 8008882:	e013      	b.n	80088ac <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	2b03      	cmp	r3, #3
 8008888:	d108      	bne.n	800889c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2201      	movs	r2, #1
 800888e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008896:	2303      	movs	r3, #3
 8008898:	75fb      	strb	r3, [r7, #23]
    break;
 800889a:	e007      	b.n	80088ac <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d104      	bne.n	80088ac <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	75fb      	strb	r3, [r7, #23]
    break;
 80088ac:	bf00      	nop
  }
  return status;
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7e1b      	ldrb	r3, [r3, #24]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	2b0a      	cmp	r3, #10
 80088d0:	f200 821f 	bhi.w	8008d12 <USBH_HandleControl+0x45a>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <USBH_HandleControl+0x24>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	08008909 	.word	0x08008909
 80088e0:	08008923 	.word	0x08008923
 80088e4:	080089c5 	.word	0x080089c5
 80088e8:	080089eb 	.word	0x080089eb
 80088ec:	08008a77 	.word	0x08008a77
 80088f0:	08008aa3 	.word	0x08008aa3
 80088f4:	08008b65 	.word	0x08008b65
 80088f8:	08008b87 	.word	0x08008b87
 80088fc:	08008c19 	.word	0x08008c19
 8008900:	08008c41 	.word	0x08008c41
 8008904:	08008cd3 	.word	0x08008cd3
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f103 0110 	add.w	r1, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	795b      	ldrb	r3, [r3, #5]
 8008912:	461a      	mov	r2, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa0d 	bl	8008d34 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2202      	movs	r2, #2
 800891e:	761a      	strb	r2, [r3, #24]
    break;
 8008920:	e202      	b.n	8008d28 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	795b      	ldrb	r3, [r3, #5]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f003 ff7f 	bl	800c82c <USBH_LL_GetURBState>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d12c      	bne.n	8008992 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7c1b      	ldrb	r3, [r3, #16]
 800893c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008940:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	8adb      	ldrh	r3, [r3, #22]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800894a:	7b7b      	ldrb	r3, [r7, #13]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d103      	bne.n	8008958 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2203      	movs	r2, #3
 8008954:	761a      	strb	r2, [r3, #24]
 8008956:	e00d      	b.n	8008974 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2205      	movs	r2, #5
 800895c:	761a      	strb	r2, [r3, #24]
 800895e:	e009      	b.n	8008974 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8008960:	7b7b      	ldrb	r3, [r7, #13]
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d103      	bne.n	800896e <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2209      	movs	r2, #9
 800896a:	761a      	strb	r2, [r3, #24]
 800896c:	e002      	b.n	8008974 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2207      	movs	r2, #7
 8008972:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2203      	movs	r2, #3
 8008978:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008988:	2200      	movs	r2, #0
 800898a:	4619      	mov	r1, r3
 800898c:	f000 fb88 	bl	80090a0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008990:	e1c1      	b.n	8008d16 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b04      	cmp	r3, #4
 8008996:	d003      	beq.n	80089a0 <USBH_HandleControl+0xe8>
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b02      	cmp	r3, #2
 800899c:	f040 81bb 	bne.w	8008d16 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	220b      	movs	r2, #11
 80089a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2203      	movs	r2, #3
 80089aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089ba:	2200      	movs	r2, #0
 80089bc:	4619      	mov	r1, r3
 80089be:	f000 fb6f 	bl	80090a0 <osMessagePut>
    break;
 80089c2:	e1a8      	b.n	8008d16 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6899      	ldr	r1, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	899a      	ldrh	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9e8 	bl	8008db2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	761a      	strb	r2, [r3, #24]
    break;
 80089e8:	e19e      	b.n	8008d28 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f003 ff1b 	bl	800c82c <USBH_LL_GetURBState>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d110      	bne.n	8008a22 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2209      	movs	r2, #9
 8008a04:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2203      	movs	r2, #3
 8008a0a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f000 fb3f 	bl	80090a0 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d110      	bne.n	8008a4a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2203      	movs	r2, #3
 8008a30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a40:	2200      	movs	r2, #0
 8008a42:	4619      	mov	r1, r3
 8008a44:	f000 fb2c 	bl	80090a0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008a48:	e167      	b.n	8008d1a <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	f040 8164 	bne.w	8008d1a <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	220b      	movs	r2, #11
 8008a56:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f000 fb16 	bl	80090a0 <osMessagePut>
    break;
 8008a74:	e151      	b.n	8008d1a <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6899      	ldr	r1, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	899a      	ldrh	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7958      	ldrb	r0, [r3, #5]
 8008a82:	2301      	movs	r3, #1
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4603      	mov	r3, r0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f96d 	bl	8008d68 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2206      	movs	r2, #6
 8008a9e:	761a      	strb	r2, [r3, #24]
    break;
 8008aa0:	e142      	b.n	8008d28 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	795b      	ldrb	r3, [r3, #5]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f003 febf 	bl	800c82c <USBH_LL_GetURBState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d111      	bne.n	8008adc <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2207      	movs	r2, #7
 8008abc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f000 fae3 	bl	80090a0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ada:	e120      	b.n	8008d1e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d113      	bne.n	8008b0a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	220c      	movs	r2, #12
 8008ae6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2203      	movs	r2, #3
 8008af0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b00:	2200      	movs	r2, #0
 8008b02:	4619      	mov	r1, r3
 8008b04:	f000 facc 	bl	80090a0 <osMessagePut>
    break;
 8008b08:	e109      	b.n	8008d1e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d111      	bne.n	8008b34 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2205      	movs	r2, #5
 8008b14:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2203      	movs	r2, #3
 8008b1a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f000 fab7 	bl	80090a0 <osMessagePut>
    break;
 8008b32:	e0f4      	b.n	8008d1e <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	f040 80f1 	bne.w	8008d1e <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	220b      	movs	r2, #11
 8008b40:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2203      	movs	r2, #3
 8008b4a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f000 fa9f 	bl	80090a0 <osMessagePut>
    break;
 8008b62:	e0dc      	b.n	8008d1e <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	791b      	ldrb	r3, [r3, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f920 	bl	8008db2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2208      	movs	r2, #8
 8008b82:	761a      	strb	r2, [r3, #24]

    break;
 8008b84:	e0d0      	b.n	8008d28 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f003 fe4d 	bl	800c82c <USBH_LL_GetURBState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d113      	bne.n	8008bc4 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	220d      	movs	r2, #13
 8008ba0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f000 fa6f 	bl	80090a0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008bc2:	e0ae      	b.n	8008d22 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d111      	bne.n	8008bee <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	220b      	movs	r2, #11
 8008bce:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008be4:	2200      	movs	r2, #0
 8008be6:	4619      	mov	r1, r3
 8008be8:	f000 fa5a 	bl	80090a0 <osMessagePut>
    break;
 8008bec:	e099      	b.n	8008d22 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b05      	cmp	r3, #5
 8008bf2:	f040 8096 	bne.w	8008d22 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4619      	mov	r1, r3
 8008c12:	f000 fa45 	bl	80090a0 <osMessagePut>
    break;
 8008c16:	e084      	b.n	8008d22 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	795a      	ldrb	r2, [r3, #5]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	2200      	movs	r2, #0
 8008c24:	2100      	movs	r1, #0
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f89e 	bl	8008d68 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	220a      	movs	r2, #10
 8008c3c:	761a      	strb	r2, [r3, #24]
    break;
 8008c3e:	e073      	b.n	8008d28 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	795b      	ldrb	r3, [r3, #5]
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f003 fdf0 	bl	800c82c <USBH_LL_GetURBState>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d113      	bne.n	8008c7e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	220d      	movs	r2, #13
 8008c5e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2203      	movs	r2, #3
 8008c64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c74:	2200      	movs	r2, #0
 8008c76:	4619      	mov	r1, r3
 8008c78:	f000 fa12 	bl	80090a0 <osMessagePut>
#endif
#endif
      }

    }
    break;
 8008c7c:	e053      	b.n	8008d26 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d111      	bne.n	8008ca8 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2209      	movs	r2, #9
 8008c88:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f000 f9fd 	bl	80090a0 <osMessagePut>
    break;
 8008ca6:	e03e      	b.n	8008d26 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d13b      	bne.n	8008d26 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	220b      	movs	r2, #11
 8008cb2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f000 f9e8 	bl	80090a0 <osMessagePut>
    break;
 8008cd0:	e029      	b.n	8008d26 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7e5b      	ldrb	r3, [r3, #25]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	765a      	strb	r2, [r3, #25]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7e5b      	ldrb	r3, [r3, #25]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d809      	bhi.n	8008cfa <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f003 fcb3 	bl	800c652 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008cf8:	e016      	b.n	8008d28 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d00:	2106      	movs	r1, #6
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	e00a      	b.n	8008d28 <USBH_HandleControl+0x470>

  default:
    break;
 8008d12:	bf00      	nop
 8008d14:	e008      	b.n	8008d28 <USBH_HandleControl+0x470>
    break;
 8008d16:	bf00      	nop
 8008d18:	e006      	b.n	8008d28 <USBH_HandleControl+0x470>
    break;
 8008d1a:	bf00      	nop
 8008d1c:	e004      	b.n	8008d28 <USBH_HandleControl+0x470>
    break;
 8008d1e:	bf00      	nop
 8008d20:	e002      	b.n	8008d28 <USBH_HandleControl+0x470>
    break;
 8008d22:	bf00      	nop
 8008d24:	e000      	b.n	8008d28 <USBH_HandleControl+0x470>
    break;
 8008d26:	bf00      	nop
  }
  return status;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop

08008d34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af04      	add	r7, sp, #16
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008d42:	79f9      	ldrb	r1, [r7, #7]
 8008d44:	2300      	movs	r3, #0
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	2308      	movs	r3, #8
 8008d4a:	9302      	str	r3, [sp, #8]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	2300      	movs	r3, #0
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	2200      	movs	r2, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f003 fd36 	bl	800c7ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af04      	add	r7, sp, #16
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	460b      	mov	r3, r1
 8008d78:	80fb      	strh	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008d8c:	7979      	ldrb	r1, [r7, #5]
 8008d8e:	7e3b      	ldrb	r3, [r7, #24]
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2200      	movs	r2, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f003 fd11 	bl	800c7ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b088      	sub	sp, #32
 8008db6:	af04      	add	r7, sp, #16
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	80fb      	strh	r3, [r7, #6]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008dc8:	7979      	ldrb	r1, [r7, #5]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	88fb      	ldrh	r3, [r7, #6]
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2201      	movs	r2, #1
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f003 fcf3 	bl	800c7ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008de4:	2300      	movs	r3, #0

}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b088      	sub	sp, #32
 8008df2:	af04      	add	r7, sp, #16
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	4611      	mov	r1, r2
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	80fb      	strh	r3, [r7, #6]
 8008e00:	4613      	mov	r3, r2
 8008e02:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008e12:	7979      	ldrb	r1, [r7, #5]
 8008e14:	7e3b      	ldrb	r3, [r7, #24]
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	9302      	str	r3, [sp, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2301      	movs	r3, #1
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	2302      	movs	r3, #2
 8008e26:	2200      	movs	r2, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f003 fcce 	bl	800c7ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af04      	add	r7, sp, #16
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	4611      	mov	r1, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	460b      	mov	r3, r1
 8008e48:	80fb      	strh	r3, [r7, #6]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008e4e:	7979      	ldrb	r1, [r7, #5]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	9302      	str	r3, [sp, #8]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2302      	movs	r3, #2
 8008e62:	2201      	movs	r2, #1
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f003 fcb0 	bl	800c7ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	461a      	mov	r2, r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	70fb      	strb	r3, [r7, #3]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70bb      	strb	r3, [r7, #2]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008e8e:	7878      	ldrb	r0, [r7, #1]
 8008e90:	78ba      	ldrb	r2, [r7, #2]
 8008e92:	78f9      	ldrb	r1, [r7, #3]
 8008e94:	8b3b      	ldrh	r3, [r7, #24]
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	7d3b      	ldrb	r3, [r7, #20]
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	7c3b      	ldrb	r3, [r7, #16]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f003 fc43 	bl	800c72e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008ea8:	2300      	movs	r3, #0

}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f003 fc62 	bl	800c78c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ec8:	2300      	movs	r3, #0

}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f831 	bl	8008f46 <USBH_GetFreePipe>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ee8:	89fb      	ldrh	r3, [r7, #14]
 8008eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d007      	beq.n	8008f02 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	89fa      	ldrh	r2, [r7, #14]
 8008ef6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32e0      	adds	r2, #224	; 0xe0
 8008efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008f02:	89fb      	ldrh	r3, [r7, #14]
 8008f04:	b2db      	uxtb	r3, r3
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	2b0a      	cmp	r3, #10
 8008f1e:	d80b      	bhi.n	8008f38 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32e0      	adds	r2, #224	; 0xe0
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	32e0      	adds	r2, #224	; 0xe0
 8008f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
 8008f56:	e00e      	b.n	8008f76 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32e0      	adds	r2, #224	; 0xe0
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d102      	bne.n	8008f70 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	e007      	b.n	8008f80 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b0a      	cmp	r3, #10
 8008f7a:	d9ed      	bls.n	8008f58 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f9e:	2b84      	cmp	r3, #132	; 0x84
 8008fa0:	d005      	beq.n	8008fae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3303      	adds	r3, #3
 8008fac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fae:	68fb      	ldr	r3, [r7, #12]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc2:	f3ef 8305 	mrs	r3, IPSR
 8008fc6:	607b      	str	r3, [r7, #4]
  return(result);
 8008fc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fe4:	f001 f80a 	bl	8009ffc <vTaskStartScheduler>
  
  return osOK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	bd80      	pop	{r7, pc}

08008fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff0:	b087      	sub	sp, #28
 8008ff2:	af02      	add	r7, sp, #8
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685c      	ldr	r4, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009004:	b29e      	uxth	r6, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ffbd 	bl	8008f8c <makeFreeRtosPriority>
 8009012:	4602      	mov	r2, r0
 8009014:	f107 030c 	add.w	r3, r7, #12
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	9200      	str	r2, [sp, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	4632      	mov	r2, r6
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
 8009024:	f000 fe8d 	bl	8009d42 <xTaskCreate>
 8009028:	4603      	mov	r3, r0
 800902a:	2b01      	cmp	r3, #1
 800902c:	d001      	beq.n	8009032 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	e000      	b.n	8009034 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800903c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <osDelay+0x16>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	e000      	b.n	8009054 <osDelay+0x18>
 8009052:	2301      	movs	r3, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f000 ff9d 	bl	8009f94 <vTaskDelay>
  
  return osOK;
 800905a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800906c:	2001      	movs	r0, #1
 800906e:	f000 fa59 	bl	8009524 <xQueueCreateMutex>
 8009072:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	4619      	mov	r1, r3
 8009092:	f000 f9d5 	bl	8009440 <xQueueGenericCreate>
 8009096:	4603      	mov	r3, r0
#endif
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <osMessagePut+0x1e>
    ticks = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80090be:	f7ff ff7d 	bl	8008fbc <inHandlerMode>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d018      	beq.n	80090fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80090c8:	f107 0210 	add.w	r2, r7, #16
 80090cc:	f107 0108 	add.w	r1, r7, #8
 80090d0:	2300      	movs	r3, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fb38 	bl	8009748 <xQueueGenericSendFromISR>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <osMessagePut+0x42>
      return osErrorOS;
 80090de:	23ff      	movs	r3, #255	; 0xff
 80090e0:	e018      	b.n	8009114 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d014      	beq.n	8009112 <osMessagePut+0x72>
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <osMessagePut+0x7c>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	e00b      	b.n	8009112 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80090fa:	f107 0108 	add.w	r1, r7, #8
 80090fe:	2300      	movs	r3, #0
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fa26 	bl	8009554 <xQueueGenericSend>
 8009108:	4603      	mov	r3, r0
 800910a:	2b01      	cmp	r3, #1
 800910c:	d001      	beq.n	8009112 <osMessagePut+0x72>
      return osErrorOS;
 800910e:	23ff      	movs	r3, #255	; 0xff
 8009110:	e000      	b.n	8009114 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	e000ed04 	.word	0xe000ed04

08009120 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009120:	b590      	push	{r4, r7, lr}
 8009122:	b08b      	sub	sp, #44	; 0x2c
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800913a:	2380      	movs	r3, #128	; 0x80
 800913c:	617b      	str	r3, [r7, #20]
    return event;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	461c      	mov	r4, r3
 8009142:	f107 0314 	add.w	r3, r7, #20
 8009146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800914a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800914e:	e054      	b.n	80091fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d103      	bne.n	8009168 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009160:	f04f 33ff 	mov.w	r3, #4294967295
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
 8009166:	e009      	b.n	800917c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d006      	beq.n	800917c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <osMessageGet+0x5c>
      ticks = 1;
 8009178:	2301      	movs	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800917c:	f7ff ff1e 	bl	8008fbc <inHandlerMode>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01c      	beq.n	80091c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009186:	f107 0220 	add.w	r2, r7, #32
 800918a:	f107 0314 	add.w	r3, r7, #20
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	68b8      	ldr	r0, [r7, #8]
 8009194:	f000 fc48 	bl	8009a28 <xQueueReceiveFromISR>
 8009198:	4603      	mov	r3, r0
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800919e:	2310      	movs	r3, #16
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	e001      	b.n	80091a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01d      	beq.n	80091ea <osMessageGet+0xca>
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <osMessageGet+0xe4>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	e014      	b.n	80091ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	3304      	adds	r3, #4
 80091c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c8:	4619      	mov	r1, r3
 80091ca:	68b8      	ldr	r0, [r7, #8]
 80091cc:	f000 fb50 	bl	8009870 <xQueueReceive>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d102      	bne.n	80091dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80091d6:	2310      	movs	r3, #16
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e006      	b.n	80091ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <osMessageGet+0xc6>
 80091e2:	2300      	movs	r3, #0
 80091e4:	e000      	b.n	80091e8 <osMessageGet+0xc8>
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	461c      	mov	r4, r3
 80091ee:	f107 0314 	add.w	r3, r7, #20
 80091f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	372c      	adds	r7, #44	; 0x2c
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd90      	pop	{r4, r7, pc}
 8009202:	bf00      	nop
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f103 0208 	add.w	r2, r3, #8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f04f 32ff 	mov.w	r2, #4294967295
 8009220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f103 0208 	add.w	r2, r3, #8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f103 0208 	add.w	r2, r3, #8
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	601a      	str	r2, [r3, #0]
}
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092aa:	b480      	push	{r7}
 80092ac:	b085      	sub	sp, #20
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d103      	bne.n	80092ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e00c      	b.n	80092e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	3308      	adds	r3, #8
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e002      	b.n	80092d8 <vListInsert+0x2e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d2f6      	bcs.n	80092d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]
}
 8009310:	bf00      	nop
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6852      	ldr	r2, [r2, #4]
 800933c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d103      	bne.n	8009350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	1e5a      	subs	r2, r3, #1
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60bb      	str	r3, [r7, #8]
 8009396:	e7fe      	b.n	8009396 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009398:	f001 fc28 	bl	800abec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	68f9      	ldr	r1, [r7, #12]
 80093a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	441a      	add	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c8:	3b01      	subs	r3, #1
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	441a      	add	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	22ff      	movs	r2, #255	; 0xff
 80093dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	22ff      	movs	r2, #255	; 0xff
 80093e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d114      	bne.n	8009418 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01a      	beq.n	800942c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3310      	adds	r3, #16
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f828 	bl	800a450 <xTaskRemoveFromEventList>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d012      	beq.n	800942c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009406:	4b0d      	ldr	r3, [pc, #52]	; (800943c <xQueueGenericReset+0xcc>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e009      	b.n	800942c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3310      	adds	r3, #16
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fef3 	bl	8009208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3324      	adds	r3, #36	; 0x24
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff feee 	bl	8009208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800942c:	f001 fc0c 	bl	800ac48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009430:	2301      	movs	r3, #1
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	; 0x28
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <xQueueGenericCreate+0x28>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	e7fe      	b.n	8009466 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e004      	b.n	800947e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	3348      	adds	r3, #72	; 0x48
 8009482:	4618      	mov	r0, r3
 8009484:	f001 fccc 	bl	800ae20 <pvPortMalloc>
 8009488:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	3348      	adds	r3, #72	; 0x48
 8009494:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009496:	79fa      	ldrb	r2, [r7, #7]
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 f805 	bl	80094b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80094a8:	69bb      	ldr	r3, [r7, #24]
	}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3720      	adds	r7, #32
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	e002      	b.n	80094d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094e0:	2101      	movs	r1, #1
 80094e2:	69b8      	ldr	r0, [r7, #24]
 80094e4:	f7ff ff44 	bl	8009370 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009510:	2300      	movs	r3, #0
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f81c 	bl	8009554 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800952e:	2301      	movs	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	461a      	mov	r2, r3
 800953a:	6939      	ldr	r1, [r7, #16]
 800953c:	6978      	ldr	r0, [r7, #20]
 800953e:	f7ff ff7f 	bl	8009440 <xQueueGenericCreate>
 8009542:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff ffd3 	bl	80094f0 <prvInitialiseMutex>

		return pxNewQueue;
 800954a:	68fb      	ldr	r3, [r7, #12]
	}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08e      	sub	sp, #56	; 0x38
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009562:	2300      	movs	r3, #0
 8009564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <xQueueGenericSend+0x30>
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	62bb      	str	r3, [r7, #40]	; 0x28
 8009582:	e7fe      	b.n	8009582 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <xQueueGenericSend+0x3e>
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <xQueueGenericSend+0x42>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <xQueueGenericSend+0x44>
 8009596:	2300      	movs	r3, #0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <xQueueGenericSend+0x5c>
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
 80095ae:	e7fe      	b.n	80095ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d103      	bne.n	80095be <xQueueGenericSend+0x6a>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <xQueueGenericSend+0x6e>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <xQueueGenericSend+0x70>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d109      	bne.n	80095dc <xQueueGenericSend+0x88>
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	623b      	str	r3, [r7, #32]
 80095da:	e7fe      	b.n	80095da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095dc:	f001 f8d6 	bl	800a78c <xTaskGetSchedulerState>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <xQueueGenericSend+0x98>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <xQueueGenericSend+0x9c>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <xQueueGenericSend+0x9e>
 80095f0:	2300      	movs	r3, #0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d109      	bne.n	800960a <xQueueGenericSend+0xb6>
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e7fe      	b.n	8009608 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800960a:	f001 faef 	bl	800abec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009616:	429a      	cmp	r2, r3
 8009618:	d302      	bcc.n	8009620 <xQueueGenericSend+0xcc>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d129      	bne.n	8009674 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009626:	f000 fa7c 	bl	8009b22 <prvCopyDataToQueue>
 800962a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d010      	beq.n	8009656 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	3324      	adds	r3, #36	; 0x24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 ff09 	bl	800a450 <xTaskRemoveFromEventList>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d013      	beq.n	800966c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009644:	4b3f      	ldr	r3, [pc, #252]	; (8009744 <xQueueGenericSend+0x1f0>)
 8009646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	e00a      	b.n	800966c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800965c:	4b39      	ldr	r3, [pc, #228]	; (8009744 <xQueueGenericSend+0x1f0>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800966c:	f001 faec 	bl	800ac48 <vPortExitCritical>
				return pdPASS;
 8009670:	2301      	movs	r3, #1
 8009672:	e063      	b.n	800973c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800967a:	f001 fae5 	bl	800ac48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800967e:	2300      	movs	r3, #0
 8009680:	e05c      	b.n	800973c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009688:	f107 0314 	add.w	r3, r7, #20
 800968c:	4618      	mov	r0, r3
 800968e:	f000 ff41 	bl	800a514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009692:	2301      	movs	r3, #1
 8009694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009696:	f001 fad7 	bl	800ac48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800969a:	f000 fcf5 	bl	800a088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800969e:	f001 faa5 	bl	800abec <vPortEnterCritical>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096a8:	b25b      	sxtb	r3, r3
 80096aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ae:	d103      	bne.n	80096b8 <xQueueGenericSend+0x164>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d103      	bne.n	80096ce <xQueueGenericSend+0x17a>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096ce:	f001 fabb 	bl	800ac48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096d2:	1d3a      	adds	r2, r7, #4
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	4611      	mov	r1, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 ff30 	bl	800a540 <xTaskCheckForTimeOut>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d124      	bne.n	8009730 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e8:	f000 fb13 	bl	8009d12 <prvIsQueueFull>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d018      	beq.n	8009724 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	3310      	adds	r3, #16
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fe84 	bl	800a408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009702:	f000 fa9e 	bl	8009c42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009706:	f000 fccd 	bl	800a0a4 <xTaskResumeAll>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	f47f af7c 	bne.w	800960a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <xQueueGenericSend+0x1f0>)
 8009714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	e772      	b.n	800960a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009726:	f000 fa8c 	bl	8009c42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800972a:	f000 fcbb 	bl	800a0a4 <xTaskResumeAll>
 800972e:	e76c      	b.n	800960a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009732:	f000 fa86 	bl	8009c42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009736:	f000 fcb5 	bl	800a0a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800973a:	2300      	movs	r3, #0
		}
	}
}
 800973c:	4618      	mov	r0, r3
 800973e:	3738      	adds	r7, #56	; 0x38
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08e      	sub	sp, #56	; 0x38
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <xQueueGenericSendFromISR+0x2c>
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
 8009772:	e7fe      	b.n	8009772 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <xQueueGenericSendFromISR+0x3a>
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <xQueueGenericSendFromISR+0x3e>
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <xQueueGenericSendFromISR+0x40>
 8009786:	2300      	movs	r3, #0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d109      	bne.n	80097a0 <xQueueGenericSendFromISR+0x58>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	623b      	str	r3, [r7, #32]
 800979e:	e7fe      	b.n	800979e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d103      	bne.n	80097ae <xQueueGenericSendFromISR+0x66>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <xQueueGenericSendFromISR+0x6a>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <xQueueGenericSendFromISR+0x6c>
 80097b2:	2300      	movs	r3, #0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <xQueueGenericSendFromISR+0x84>
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	e7fe      	b.n	80097ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097cc:	f001 faea 	bl	800ada4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097d0:	f3ef 8211 	mrs	r2, BASEPRI
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	61ba      	str	r2, [r7, #24]
 80097e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <xQueueGenericSendFromISR+0xb6>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d12c      	bne.n	8009858 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800980e:	f000 f988 	bl	8009b22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009812:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d112      	bne.n	8009842 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d016      	beq.n	8009852 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fe11 	bl	800a450 <xTaskRemoveFromEventList>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00e      	beq.n	8009852 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e007      	b.n	8009852 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009846:	3301      	adds	r3, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	b25a      	sxtb	r2, r3
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009852:	2301      	movs	r3, #1
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009856:	e001      	b.n	800985c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009858:	2300      	movs	r3, #0
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
 800985c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009868:	4618      	mov	r0, r3
 800986a:	3738      	adds	r7, #56	; 0x38
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08c      	sub	sp, #48	; 0x30
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800987c:	2300      	movs	r3, #0
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <xQueueReceive+0x2e>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	623b      	str	r3, [r7, #32]
 800989c:	e7fe      	b.n	800989c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <xQueueReceive+0x3c>
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <xQueueReceive+0x40>
 80098ac:	2301      	movs	r3, #1
 80098ae:	e000      	b.n	80098b2 <xQueueReceive+0x42>
 80098b0:	2300      	movs	r3, #0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d109      	bne.n	80098ca <xQueueReceive+0x5a>
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	e7fe      	b.n	80098c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098ca:	f000 ff5f 	bl	800a78c <xTaskGetSchedulerState>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <xQueueReceive+0x6a>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <xQueueReceive+0x6e>
 80098da:	2301      	movs	r3, #1
 80098dc:	e000      	b.n	80098e0 <xQueueReceive+0x70>
 80098de:	2300      	movs	r3, #0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <xQueueReceive+0x88>
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	e7fe      	b.n	80098f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80098f8:	f001 f978 	bl	800abec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01f      	beq.n	8009948 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990c:	f000 f973 	bl	8009bf6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	1e5a      	subs	r2, r3, #1
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00f      	beq.n	8009940 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	3310      	adds	r3, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fd93 	bl	800a450 <xTaskRemoveFromEventList>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d007      	beq.n	8009940 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009930:	4b3c      	ldr	r3, [pc, #240]	; (8009a24 <xQueueReceive+0x1b4>)
 8009932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009940:	f001 f982 	bl	800ac48 <vPortExitCritical>
				return pdPASS;
 8009944:	2301      	movs	r3, #1
 8009946:	e069      	b.n	8009a1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800994e:	f001 f97b 	bl	800ac48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009952:	2300      	movs	r3, #0
 8009954:	e062      	b.n	8009a1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d106      	bne.n	800996a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800995c:	f107 0310 	add.w	r3, r7, #16
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fdd7 	bl	800a514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009966:	2301      	movs	r3, #1
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800996a:	f001 f96d 	bl	800ac48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800996e:	f000 fb8b 	bl	800a088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009972:	f001 f93b 	bl	800abec <vPortEnterCritical>
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800997c:	b25b      	sxtb	r3, r3
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009982:	d103      	bne.n	800998c <xQueueReceive+0x11c>
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009992:	b25b      	sxtb	r3, r3
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d103      	bne.n	80099a2 <xQueueReceive+0x132>
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a2:	f001 f951 	bl	800ac48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	f107 0310 	add.w	r3, r7, #16
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fdc6 	bl	800a540 <xTaskCheckForTimeOut>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d123      	bne.n	8009a02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099bc:	f000 f993 	bl	8009ce6 <prvIsQueueEmpty>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d017      	beq.n	80099f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fd1a 	bl	800a408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d6:	f000 f934 	bl	8009c42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099da:	f000 fb63 	bl	800a0a4 <xTaskResumeAll>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d189      	bne.n	80098f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80099e4:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <xQueueReceive+0x1b4>)
 80099e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	e780      	b.n	80098f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f8:	f000 f923 	bl	8009c42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099fc:	f000 fb52 	bl	800a0a4 <xTaskResumeAll>
 8009a00:	e77a      	b.n	80098f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a04:	f000 f91d 	bl	8009c42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a08:	f000 fb4c 	bl	800a0a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0e:	f000 f96a 	bl	8009ce6 <prvIsQueueEmpty>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f43f af6f 	beq.w	80098f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3730      	adds	r7, #48	; 0x30
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08e      	sub	sp, #56	; 0x38
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d109      	bne.n	8009a52 <xQueueReceiveFromISR+0x2a>
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	623b      	str	r3, [r7, #32]
 8009a50:	e7fe      	b.n	8009a50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <xQueueReceiveFromISR+0x38>
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <xQueueReceiveFromISR+0x3c>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <xQueueReceiveFromISR+0x3e>
 8009a64:	2300      	movs	r3, #0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <xQueueReceiveFromISR+0x56>
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	e7fe      	b.n	8009a7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a7e:	f001 f991 	bl	800ada4 <vPortValidateInterruptPriority>
	__asm volatile
 8009a82:	f3ef 8211 	mrs	r2, BASEPRI
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	61ba      	str	r2, [r7, #24]
 8009a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d02f      	beq.n	8009b0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ab8:	f000 f89d 	bl	8009bf6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	1e5a      	subs	r2, r3, #1
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d112      	bne.n	8009af4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d016      	beq.n	8009b04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	3310      	adds	r3, #16
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fcb8 	bl	800a450 <xTaskRemoveFromEventList>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	e007      	b.n	8009b04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af8:	3301      	adds	r3, #1
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	b25a      	sxtb	r2, r3
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b04:	2301      	movs	r3, #1
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	e001      	b.n	8009b0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3738      	adds	r7, #56	; 0x38
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10d      	bne.n	8009b5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d14d      	bne.n	8009be4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fe3b 	bl	800a7c8 <xTaskPriorityDisinherit>
 8009b52:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	e043      	b.n	8009be4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d119      	bne.n	8009b96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6898      	ldr	r0, [r3, #8]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	f002 ff71 	bl	800ca54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	441a      	add	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d32b      	bcc.n	8009be4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	609a      	str	r2, [r3, #8]
 8009b94:	e026      	b.n	8009be4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68d8      	ldr	r0, [r3, #12]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	f002 ff57 	bl	800ca54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	425b      	negs	r3, r3
 8009bb0:	441a      	add	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d207      	bcs.n	8009bd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	425b      	negs	r3, r3
 8009bcc:	441a      	add	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d105      	bne.n	8009be4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009bec:	697b      	ldr	r3, [r7, #20]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d018      	beq.n	8009c3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	441a      	add	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d303      	bcc.n	8009c2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68d9      	ldr	r1, [r3, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	461a      	mov	r2, r3
 8009c34:	6838      	ldr	r0, [r7, #0]
 8009c36:	f002 ff0d 	bl	800ca54 <memcpy>
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c4a:	f000 ffcf 	bl	800abec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c56:	e011      	b.n	8009c7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d012      	beq.n	8009c86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fbf3 	bl	800a450 <xTaskRemoveFromEventList>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c70:	f000 fcc6 	bl	800a600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dce9      	bgt.n	8009c58 <prvUnlockQueue+0x16>
 8009c84:	e000      	b.n	8009c88 <prvUnlockQueue+0x46>
					break;
 8009c86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	22ff      	movs	r2, #255	; 0xff
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c90:	f000 ffda 	bl	800ac48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c94:	f000 ffaa 	bl	800abec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ca0:	e011      	b.n	8009cc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d012      	beq.n	8009cd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3310      	adds	r3, #16
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fbce 	bl	800a450 <xTaskRemoveFromEventList>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009cba:	f000 fca1 	bl	800a600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dce9      	bgt.n	8009ca2 <prvUnlockQueue+0x60>
 8009cce:	e000      	b.n	8009cd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009cd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009cda:	f000 ffb5 	bl	800ac48 <vPortExitCritical>
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cee:	f000 ff7d 	bl	800abec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e001      	b.n	8009d04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d04:	f000 ffa0 	bl	800ac48 <vPortExitCritical>

	return xReturn;
 8009d08:	68fb      	ldr	r3, [r7, #12]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d1a:	f000 ff67 	bl	800abec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d102      	bne.n	8009d30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e001      	b.n	8009d34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d34:	f000 ff88 	bl	800ac48 <vPortExitCritical>

	return xReturn;
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b08c      	sub	sp, #48	; 0x30
 8009d46:	af04      	add	r7, sp, #16
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 f862 	bl	800ae20 <pvPortMalloc>
 8009d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00e      	beq.n	8009d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009d64:	2054      	movs	r0, #84	; 0x54
 8009d66:	f001 f85b 	bl	800ae20 <pvPortMalloc>
 8009d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
 8009d78:	e005      	b.n	8009d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d7a:	6978      	ldr	r0, [r7, #20]
 8009d7c:	f001 f912 	bl	800afa4 <vPortFree>
 8009d80:	e001      	b.n	8009d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d013      	beq.n	8009db4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d8c:	88fa      	ldrh	r2, [r7, #6]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	9302      	str	r3, [sp, #8]
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f80e 	bl	8009dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da8:	69f8      	ldr	r0, [r7, #28]
 8009daa:	f000 f889 	bl	8009ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dae:	2301      	movs	r3, #1
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	e002      	b.n	8009dba <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009db4:	f04f 33ff 	mov.w	r3, #4294967295
 8009db8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dba:	69bb      	ldr	r3, [r7, #24]
	}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	f023 0307 	bic.w	r3, r3, #7
 8009dea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d009      	beq.n	8009e0a <prvInitialiseNewTask+0x46>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	e7fe      	b.n	8009e08 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	e012      	b.n	8009e36 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	4413      	add	r3, r2
 8009e16:	7819      	ldrb	r1, [r3, #0]
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3334      	adds	r3, #52	; 0x34
 8009e20:	460a      	mov	r2, r1
 8009e22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	3301      	adds	r3, #1
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	2b0f      	cmp	r3, #15
 8009e3a:	d9e9      	bls.n	8009e10 <prvInitialiseNewTask+0x4c>
 8009e3c:	e000      	b.n	8009e40 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009e3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	2b06      	cmp	r3, #6
 8009e4c:	d901      	bls.n	8009e52 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e4e:	2306      	movs	r3, #6
 8009e50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	2200      	movs	r2, #0
 8009e62:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff f9ed 	bl	8009248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	3318      	adds	r3, #24
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff f9e8 	bl	8009248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	f1c3 0207 	rsb	r2, r3, #7
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	2200      	movs	r2, #0
 8009e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	69b8      	ldr	r0, [r7, #24]
 8009ea2:	f000 fd7b 	bl	800a99c <pxPortInitialiseStack>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb8:	bf00      	nop
 8009eba:	3720      	adds	r7, #32
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ec8:	f000 fe90 	bl	800abec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ecc:	4b2a      	ldr	r3, [pc, #168]	; (8009f78 <prvAddNewTaskToReadyList+0xb8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4a29      	ldr	r2, [pc, #164]	; (8009f78 <prvAddNewTaskToReadyList+0xb8>)
 8009ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ed6:	4b29      	ldr	r3, [pc, #164]	; (8009f7c <prvAddNewTaskToReadyList+0xbc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ede:	4a27      	ldr	r2, [pc, #156]	; (8009f7c <prvAddNewTaskToReadyList+0xbc>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ee4:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <prvAddNewTaskToReadyList+0xb8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d110      	bne.n	8009f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009eec:	f000 fbac 	bl	800a648 <prvInitialiseTaskLists>
 8009ef0:	e00d      	b.n	8009f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ef2:	4b23      	ldr	r3, [pc, #140]	; (8009f80 <prvAddNewTaskToReadyList+0xc0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d109      	bne.n	8009f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <prvAddNewTaskToReadyList+0xbc>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d802      	bhi.n	8009f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f08:	4a1c      	ldr	r2, [pc, #112]	; (8009f7c <prvAddNewTaskToReadyList+0xbc>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f0e:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <prvAddNewTaskToReadyList+0xc4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <prvAddNewTaskToReadyList+0xc4>)
 8009f16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	409a      	lsls	r2, r3
 8009f20:	4b19      	ldr	r3, [pc, #100]	; (8009f88 <prvAddNewTaskToReadyList+0xc8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <prvAddNewTaskToReadyList+0xc8>)
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4a15      	ldr	r2, [pc, #84]	; (8009f8c <prvAddNewTaskToReadyList+0xcc>)
 8009f38:	441a      	add	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7ff f98e 	bl	8009262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f46:	f000 fe7f 	bl	800ac48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <prvAddNewTaskToReadyList+0xc0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f52:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <prvAddNewTaskToReadyList+0xbc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d207      	bcs.n	8009f70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <prvAddNewTaskToReadyList+0xd0>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	200001b4 	.word	0x200001b4
 8009f7c:	200000b4 	.word	0x200000b4
 8009f80:	200001c0 	.word	0x200001c0
 8009f84:	200001d0 	.word	0x200001d0
 8009f88:	200001bc 	.word	0x200001bc
 8009f8c:	200000b8 	.word	0x200000b8
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d016      	beq.n	8009fd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <vTaskDelay+0x60>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <vTaskDelay+0x2e>
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	e7fe      	b.n	8009fc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009fc2:	f000 f861 	bl	800a088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fc81 	bl	800a8d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fce:	f000 f869 	bl	800a0a4 <xTaskResumeAll>
 8009fd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d107      	bne.n	8009fea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <vTaskDelay+0x64>)
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200001dc 	.word	0x200001dc
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a002:	4b1b      	ldr	r3, [pc, #108]	; (800a070 <vTaskStartScheduler+0x74>)
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	2300      	movs	r3, #0
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	2280      	movs	r2, #128	; 0x80
 800a00e:	4919      	ldr	r1, [pc, #100]	; (800a074 <vTaskStartScheduler+0x78>)
 800a010:	4819      	ldr	r0, [pc, #100]	; (800a078 <vTaskStartScheduler+0x7c>)
 800a012:	f7ff fe96 	bl	8009d42 <xTaskCreate>
 800a016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d115      	bne.n	800a04a <vTaskStartScheduler+0x4e>
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a030:	4b12      	ldr	r3, [pc, #72]	; (800a07c <vTaskStartScheduler+0x80>)
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a038:	4b11      	ldr	r3, [pc, #68]	; (800a080 <vTaskStartScheduler+0x84>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a03e:	4b11      	ldr	r3, [pc, #68]	; (800a084 <vTaskStartScheduler+0x88>)
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a044:	f000 fd34 	bl	800aab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a048:	e00d      	b.n	800a066 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a050:	d109      	bne.n	800a066 <vTaskStartScheduler+0x6a>
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	607b      	str	r3, [r7, #4]
 800a064:	e7fe      	b.n	800a064 <vTaskStartScheduler+0x68>
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200001d8 	.word	0x200001d8
 800a074:	0800cc34 	.word	0x0800cc34
 800a078:	0800a619 	.word	0x0800a619
 800a07c:	200001d4 	.word	0x200001d4
 800a080:	200001c0 	.word	0x200001c0
 800a084:	200001b8 	.word	0x200001b8

0800a088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a08c:	4b04      	ldr	r3, [pc, #16]	; (800a0a0 <vTaskSuspendAll+0x18>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	4a03      	ldr	r2, [pc, #12]	; (800a0a0 <vTaskSuspendAll+0x18>)
 800a094:	6013      	str	r3, [r2, #0]
}
 800a096:	bf00      	nop
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	200001dc 	.word	0x200001dc

0800a0a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0b2:	4b41      	ldr	r3, [pc, #260]	; (800a1b8 <xTaskResumeAll+0x114>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <xTaskResumeAll+0x2a>
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	e7fe      	b.n	800a0cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0ce:	f000 fd8d 	bl	800abec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0d2:	4b39      	ldr	r3, [pc, #228]	; (800a1b8 <xTaskResumeAll+0x114>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	4a37      	ldr	r2, [pc, #220]	; (800a1b8 <xTaskResumeAll+0x114>)
 800a0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0dc:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <xTaskResumeAll+0x114>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d161      	bne.n	800a1a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0e4:	4b35      	ldr	r3, [pc, #212]	; (800a1bc <xTaskResumeAll+0x118>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d05d      	beq.n	800a1a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0ec:	e02e      	b.n	800a14c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a0ee:	4b34      	ldr	r3, [pc, #208]	; (800a1c0 <xTaskResumeAll+0x11c>)
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3318      	adds	r3, #24
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff f90e 	bl	800931c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3304      	adds	r3, #4
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff f909 	bl	800931c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	2201      	movs	r2, #1
 800a110:	409a      	lsls	r2, r3
 800a112:	4b2c      	ldr	r3, [pc, #176]	; (800a1c4 <xTaskResumeAll+0x120>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4313      	orrs	r3, r2
 800a118:	4a2a      	ldr	r2, [pc, #168]	; (800a1c4 <xTaskResumeAll+0x120>)
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4a27      	ldr	r2, [pc, #156]	; (800a1c8 <xTaskResumeAll+0x124>)
 800a12a:	441a      	add	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3304      	adds	r3, #4
 800a130:	4619      	mov	r1, r3
 800a132:	4610      	mov	r0, r2
 800a134:	f7ff f895 	bl	8009262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <xTaskResumeAll+0x128>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	429a      	cmp	r2, r3
 800a144:	d302      	bcc.n	800a14c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a146:	4b22      	ldr	r3, [pc, #136]	; (800a1d0 <xTaskResumeAll+0x12c>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a14c:	4b1c      	ldr	r3, [pc, #112]	; (800a1c0 <xTaskResumeAll+0x11c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1cc      	bne.n	800a0ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a15a:	f000 faf1 	bl	800a740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a15e:	4b1d      	ldr	r3, [pc, #116]	; (800a1d4 <xTaskResumeAll+0x130>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a16a:	f000 f837 	bl	800a1dc <xTaskIncrementTick>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a174:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <xTaskResumeAll+0x12c>)
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f1      	bne.n	800a16a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <xTaskResumeAll+0x130>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <xTaskResumeAll+0x12c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d009      	beq.n	800a1a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a194:	2301      	movs	r3, #1
 800a196:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a198:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <xTaskResumeAll+0x134>)
 800a19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1a8:	f000 fd4e 	bl	800ac48 <vPortExitCritical>

	return xAlreadyYielded;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	200001dc 	.word	0x200001dc
 800a1bc:	200001b4 	.word	0x200001b4
 800a1c0:	20000174 	.word	0x20000174
 800a1c4:	200001bc 	.word	0x200001bc
 800a1c8:	200000b8 	.word	0x200000b8
 800a1cc:	200000b4 	.word	0x200000b4
 800a1d0:	200001c8 	.word	0x200001c8
 800a1d4:	200001c4 	.word	0x200001c4
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1e6:	4b50      	ldr	r3, [pc, #320]	; (800a328 <xTaskIncrementTick+0x14c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 808c 	bne.w	800a308 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1f0:	4b4e      	ldr	r3, [pc, #312]	; (800a32c <xTaskIncrementTick+0x150>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1f8:	4a4c      	ldr	r2, [pc, #304]	; (800a32c <xTaskIncrementTick+0x150>)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d11f      	bne.n	800a244 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a204:	4b4a      	ldr	r3, [pc, #296]	; (800a330 <xTaskIncrementTick+0x154>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <xTaskIncrementTick+0x46>
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	e7fe      	b.n	800a220 <xTaskIncrementTick+0x44>
 800a222:	4b43      	ldr	r3, [pc, #268]	; (800a330 <xTaskIncrementTick+0x154>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	4b42      	ldr	r3, [pc, #264]	; (800a334 <xTaskIncrementTick+0x158>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a40      	ldr	r2, [pc, #256]	; (800a330 <xTaskIncrementTick+0x154>)
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	4a40      	ldr	r2, [pc, #256]	; (800a334 <xTaskIncrementTick+0x158>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4b40      	ldr	r3, [pc, #256]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3301      	adds	r3, #1
 800a23c:	4a3e      	ldr	r2, [pc, #248]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	f000 fa7e 	bl	800a740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a244:	4b3d      	ldr	r3, [pc, #244]	; (800a33c <xTaskIncrementTick+0x160>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d34d      	bcc.n	800a2ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a24e:	4b38      	ldr	r3, [pc, #224]	; (800a330 <xTaskIncrementTick+0x154>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <xTaskIncrementTick+0x80>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <xTaskIncrementTick+0x82>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a262:	4b36      	ldr	r3, [pc, #216]	; (800a33c <xTaskIncrementTick+0x160>)
 800a264:	f04f 32ff 	mov.w	r2, #4294967295
 800a268:	601a      	str	r2, [r3, #0]
					break;
 800a26a:	e03e      	b.n	800a2ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a26c:	4b30      	ldr	r3, [pc, #192]	; (800a330 <xTaskIncrementTick+0x154>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d203      	bcs.n	800a28c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a284:	4a2d      	ldr	r2, [pc, #180]	; (800a33c <xTaskIncrementTick+0x160>)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6013      	str	r3, [r2, #0]
						break;
 800a28a:	e02e      	b.n	800a2ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	3304      	adds	r3, #4
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff f843 	bl	800931c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	3318      	adds	r3, #24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff f83a 	bl	800931c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	409a      	lsls	r2, r3
 800a2b0:	4b23      	ldr	r3, [pc, #140]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	4a22      	ldr	r2, [pc, #136]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2c8:	441a      	add	r2, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7fe ffc6 	bl	8009262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <xTaskIncrementTick+0x16c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d3b4      	bcc.n	800a24e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e8:	e7b1      	b.n	800a24e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2ea:	4b17      	ldr	r3, [pc, #92]	; (800a348 <xTaskIncrementTick+0x16c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	4914      	ldr	r1, [pc, #80]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	440b      	add	r3, r1
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d907      	bls.n	800a312 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a302:	2301      	movs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e004      	b.n	800a312 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a308:	4b10      	ldr	r3, [pc, #64]	; (800a34c <xTaskIncrementTick+0x170>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3301      	adds	r3, #1
 800a30e:	4a0f      	ldr	r2, [pc, #60]	; (800a34c <xTaskIncrementTick+0x170>)
 800a310:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <xTaskIncrementTick+0x174>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a31a:	2301      	movs	r3, #1
 800a31c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a31e:	697b      	ldr	r3, [r7, #20]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	200001dc 	.word	0x200001dc
 800a32c:	200001b8 	.word	0x200001b8
 800a330:	2000016c 	.word	0x2000016c
 800a334:	20000170 	.word	0x20000170
 800a338:	200001cc 	.word	0x200001cc
 800a33c:	200001d4 	.word	0x200001d4
 800a340:	200001bc 	.word	0x200001bc
 800a344:	200000b8 	.word	0x200000b8
 800a348:	200000b4 	.word	0x200000b4
 800a34c:	200001c4 	.word	0x200001c4
 800a350:	200001c8 	.word	0x200001c8

0800a354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a35a:	4b26      	ldr	r3, [pc, #152]	; (800a3f4 <vTaskSwitchContext+0xa0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a362:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <vTaskSwitchContext+0xa4>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a368:	e03e      	b.n	800a3e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <vTaskSwitchContext+0xa4>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a370:	4b22      	ldr	r3, [pc, #136]	; (800a3fc <vTaskSwitchContext+0xa8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	fab3 f383 	clz	r3, r3
 800a37c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a37e:	7afb      	ldrb	r3, [r7, #11]
 800a380:	f1c3 031f 	rsb	r3, r3, #31
 800a384:	617b      	str	r3, [r7, #20]
 800a386:	491e      	ldr	r1, [pc, #120]	; (800a400 <vTaskSwitchContext+0xac>)
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	440b      	add	r3, r1
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	607b      	str	r3, [r7, #4]
 800a3ac:	e7fe      	b.n	800a3ac <vTaskSwitchContext+0x58>
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4a11      	ldr	r2, [pc, #68]	; (800a400 <vTaskSwitchContext+0xac>)
 800a3ba:	4413      	add	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	605a      	str	r2, [r3, #4]
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d104      	bne.n	800a3de <vTaskSwitchContext+0x8a>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	4a07      	ldr	r2, [pc, #28]	; (800a404 <vTaskSwitchContext+0xb0>)
 800a3e6:	6013      	str	r3, [r2, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	200001dc 	.word	0x200001dc
 800a3f8:	200001c8 	.word	0x200001c8
 800a3fc:	200001bc 	.word	0x200001bc
 800a400:	200000b8 	.word	0x200000b8
 800a404:	200000b4 	.word	0x200000b4

0800a408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <vTaskPlaceOnEventList+0x24>
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	e7fe      	b.n	800a42a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a42c:	4b07      	ldr	r3, [pc, #28]	; (800a44c <vTaskPlaceOnEventList+0x44>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3318      	adds	r3, #24
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7fe ff38 	bl	80092aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a43a:	2101      	movs	r1, #1
 800a43c:	6838      	ldr	r0, [r7, #0]
 800a43e:	f000 fa47 	bl	800a8d0 <prvAddCurrentTaskToDelayedList>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200000b4 	.word	0x200000b4

0800a450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <xTaskRemoveFromEventList+0x2a>
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	e7fe      	b.n	800a478 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	3318      	adds	r3, #24
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe ff4c 	bl	800931c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <xTaskRemoveFromEventList+0xac>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d11c      	bne.n	800a4c6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	3304      	adds	r3, #4
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe ff43 	bl	800931c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	2201      	movs	r2, #1
 800a49c:	409a      	lsls	r2, r3
 800a49e:	4b18      	ldr	r3, [pc, #96]	; (800a500 <xTaskRemoveFromEventList+0xb0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	4a16      	ldr	r2, [pc, #88]	; (800a500 <xTaskRemoveFromEventList+0xb0>)
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4a13      	ldr	r2, [pc, #76]	; (800a504 <xTaskRemoveFromEventList+0xb4>)
 800a4b6:	441a      	add	r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	f7fe fecf 	bl	8009262 <vListInsertEnd>
 800a4c4:	e005      	b.n	800a4d2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	3318      	adds	r3, #24
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	480e      	ldr	r0, [pc, #56]	; (800a508 <xTaskRemoveFromEventList+0xb8>)
 800a4ce:	f7fe fec8 	bl	8009262 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <xTaskRemoveFromEventList+0xbc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d905      	bls.n	800a4ec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <xTaskRemoveFromEventList+0xc0>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e001      	b.n	800a4f0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a4f0:	697b      	ldr	r3, [r7, #20]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200001dc 	.word	0x200001dc
 800a500:	200001bc 	.word	0x200001bc
 800a504:	200000b8 	.word	0x200000b8
 800a508:	20000174 	.word	0x20000174
 800a50c:	200000b4 	.word	0x200000b4
 800a510:	200001c8 	.word	0x200001c8

0800a514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <vTaskInternalSetTimeOutState+0x24>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <vTaskInternalSetTimeOutState+0x28>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	605a      	str	r2, [r3, #4]
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	200001cc 	.word	0x200001cc
 800a53c:	200001b8 	.word	0x200001b8

0800a540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <xTaskCheckForTimeOut+0x24>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	e7fe      	b.n	800a562 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <xTaskCheckForTimeOut+0x3e>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e7fe      	b.n	800a57c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a57e:	f000 fb35 	bl	800abec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a582:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <xTaskCheckForTimeOut+0xb8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59a:	d102      	bne.n	800a5a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
 800a5a0:	e023      	b.n	800a5ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <xTaskCheckForTimeOut+0xbc>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d007      	beq.n	800a5be <xTaskCheckForTimeOut+0x7e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d302      	bcc.n	800a5be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	e015      	b.n	800a5ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d20b      	bcs.n	800a5e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff ff9d 	bl	800a514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	e004      	b.n	800a5ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5ea:	f000 fb2d 	bl	800ac48 <vPortExitCritical>

	return xReturn;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	200001b8 	.word	0x200001b8
 800a5fc:	200001cc 	.word	0x200001cc

0800a600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <vTaskMissedYield+0x14>)
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
}
 800a60a:	bf00      	nop
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	200001c8 	.word	0x200001c8

0800a618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a620:	f000 f852 	bl	800a6c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a624:	4b06      	ldr	r3, [pc, #24]	; (800a640 <prvIdleTask+0x28>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d9f9      	bls.n	800a620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <prvIdleTask+0x2c>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a63c:	e7f0      	b.n	800a620 <prvIdleTask+0x8>
 800a63e:	bf00      	nop
 800a640:	200000b8 	.word	0x200000b8
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a64e:	2300      	movs	r3, #0
 800a650:	607b      	str	r3, [r7, #4]
 800a652:	e00c      	b.n	800a66e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4a12      	ldr	r2, [pc, #72]	; (800a6a8 <prvInitialiseTaskLists+0x60>)
 800a660:	4413      	add	r3, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fdd0 	bl	8009208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3301      	adds	r3, #1
 800a66c:	607b      	str	r3, [r7, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b06      	cmp	r3, #6
 800a672:	d9ef      	bls.n	800a654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a674:	480d      	ldr	r0, [pc, #52]	; (800a6ac <prvInitialiseTaskLists+0x64>)
 800a676:	f7fe fdc7 	bl	8009208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a67a:	480d      	ldr	r0, [pc, #52]	; (800a6b0 <prvInitialiseTaskLists+0x68>)
 800a67c:	f7fe fdc4 	bl	8009208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a680:	480c      	ldr	r0, [pc, #48]	; (800a6b4 <prvInitialiseTaskLists+0x6c>)
 800a682:	f7fe fdc1 	bl	8009208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a686:	480c      	ldr	r0, [pc, #48]	; (800a6b8 <prvInitialiseTaskLists+0x70>)
 800a688:	f7fe fdbe 	bl	8009208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a68c:	480b      	ldr	r0, [pc, #44]	; (800a6bc <prvInitialiseTaskLists+0x74>)
 800a68e:	f7fe fdbb 	bl	8009208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a692:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <prvInitialiseTaskLists+0x78>)
 800a694:	4a05      	ldr	r2, [pc, #20]	; (800a6ac <prvInitialiseTaskLists+0x64>)
 800a696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a698:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <prvInitialiseTaskLists+0x7c>)
 800a69a:	4a05      	ldr	r2, [pc, #20]	; (800a6b0 <prvInitialiseTaskLists+0x68>)
 800a69c:	601a      	str	r2, [r3, #0]
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	200000b8 	.word	0x200000b8
 800a6ac:	20000144 	.word	0x20000144
 800a6b0:	20000158 	.word	0x20000158
 800a6b4:	20000174 	.word	0x20000174
 800a6b8:	20000188 	.word	0x20000188
 800a6bc:	200001a0 	.word	0x200001a0
 800a6c0:	2000016c 	.word	0x2000016c
 800a6c4:	20000170 	.word	0x20000170

0800a6c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6ce:	e019      	b.n	800a704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6d0:	f000 fa8c 	bl	800abec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <prvCheckTasksWaitingTermination+0x4c>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fe1b 	bl	800931c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6e6:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <prvCheckTasksWaitingTermination+0x50>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	4a0a      	ldr	r2, [pc, #40]	; (800a718 <prvCheckTasksWaitingTermination+0x50>)
 800a6ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <prvCheckTasksWaitingTermination+0x54>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	4a09      	ldr	r2, [pc, #36]	; (800a71c <prvCheckTasksWaitingTermination+0x54>)
 800a6f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6fa:	f000 faa5 	bl	800ac48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f80e 	bl	800a720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <prvCheckTasksWaitingTermination+0x54>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e1      	bne.n	800a6d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20000188 	.word	0x20000188
 800a718:	200001b4 	.word	0x200001b4
 800a71c:	2000019c 	.word	0x2000019c

0800a720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fc39 	bl	800afa4 <vPortFree>
			vPortFree( pxTCB );
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fc36 	bl	800afa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a746:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <prvResetNextTaskUnblockTime+0x44>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <prvResetNextTaskUnblockTime+0x14>
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <prvResetNextTaskUnblockTime+0x16>
 800a754:	2300      	movs	r3, #0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <prvResetNextTaskUnblockTime+0x48>)
 800a75c:	f04f 32ff 	mov.w	r2, #4294967295
 800a760:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a762:	e008      	b.n	800a776 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a764:	4b07      	ldr	r3, [pc, #28]	; (800a784 <prvResetNextTaskUnblockTime+0x44>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	4a05      	ldr	r2, [pc, #20]	; (800a788 <prvResetNextTaskUnblockTime+0x48>)
 800a774:	6013      	str	r3, [r2, #0]
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	2000016c 	.word	0x2000016c
 800a788:	200001d4 	.word	0x200001d4

0800a78c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a792:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <xTaskGetSchedulerState+0x34>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a79a:	2301      	movs	r3, #1
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	e008      	b.n	800a7b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a0:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <xTaskGetSchedulerState+0x38>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	607b      	str	r3, [r7, #4]
 800a7ac:	e001      	b.n	800a7b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7b2:	687b      	ldr	r3, [r7, #4]
	}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	200001c0 	.word	0x200001c0
 800a7c4:	200001dc 	.word	0x200001dc

0800a7c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d06c      	beq.n	800a8b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7de:	4b39      	ldr	r3, [pc, #228]	; (800a8c4 <xTaskPriorityDisinherit+0xfc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d009      	beq.n	800a7fc <xTaskPriorityDisinherit+0x34>
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	e7fe      	b.n	800a7fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <xTaskPriorityDisinherit+0x50>
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60bb      	str	r3, [r7, #8]
 800a816:	e7fe      	b.n	800a816 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a81c:	1e5a      	subs	r2, r3, #1
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d044      	beq.n	800a8b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a832:	2b00      	cmp	r3, #0
 800a834:	d140      	bne.n	800a8b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	3304      	adds	r3, #4
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fd6e 	bl	800931c <uxListRemove>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d115      	bne.n	800a872 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84a:	491f      	ldr	r1, [pc, #124]	; (800a8c8 <xTaskPriorityDisinherit+0x100>)
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <xTaskPriorityDisinherit+0xaa>
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	2201      	movs	r2, #1
 800a862:	fa02 f303 	lsl.w	r3, r2, r3
 800a866:	43da      	mvns	r2, r3
 800a868:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <xTaskPriorityDisinherit+0x104>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4013      	ands	r3, r2
 800a86e:	4a17      	ldr	r2, [pc, #92]	; (800a8cc <xTaskPriorityDisinherit+0x104>)
 800a870:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	f1c3 0207 	rsb	r2, r3, #7
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	2201      	movs	r2, #1
 800a88c:	409a      	lsls	r2, r3
 800a88e:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <xTaskPriorityDisinherit+0x104>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4313      	orrs	r3, r2
 800a894:	4a0d      	ldr	r2, [pc, #52]	; (800a8cc <xTaskPriorityDisinherit+0x104>)
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4a08      	ldr	r2, [pc, #32]	; (800a8c8 <xTaskPriorityDisinherit+0x100>)
 800a8a6:	441a      	add	r2, r3
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7fe fcd7 	bl	8009262 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8b8:	697b      	ldr	r3, [r7, #20]
	}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200000b4 	.word	0x200000b4
 800a8c8:	200000b8 	.word	0x200000b8
 800a8cc:	200001bc 	.word	0x200001bc

0800a8d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8da:	4b29      	ldr	r3, [pc, #164]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fd18 	bl	800931c <uxListRemove>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10b      	bne.n	800a90a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a8f2:	4b24      	ldr	r3, [pc, #144]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	43da      	mvns	r2, r3
 800a900:	4b21      	ldr	r3, [pc, #132]	; (800a988 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4013      	ands	r3, r2
 800a906:	4a20      	ldr	r2, [pc, #128]	; (800a988 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a908:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d10a      	bne.n	800a928 <prvAddCurrentTaskToDelayedList+0x58>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a918:	4b1a      	ldr	r3, [pc, #104]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	481a      	ldr	r0, [pc, #104]	; (800a98c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a922:	f7fe fc9e 	bl	8009262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a926:	e026      	b.n	800a976 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4413      	add	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a930:	4b14      	ldr	r3, [pc, #80]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d209      	bcs.n	800a954 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a940:	4b13      	ldr	r3, [pc, #76]	; (800a990 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3304      	adds	r3, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7fe fcac 	bl	80092aa <vListInsert>
}
 800a952:	e010      	b.n	800a976 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a954:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3304      	adds	r3, #4
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f7fe fca2 	bl	80092aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d202      	bcs.n	800a976 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a970:	4a09      	ldr	r2, [pc, #36]	; (800a998 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6013      	str	r3, [r2, #0]
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200001b8 	.word	0x200001b8
 800a984:	200000b4 	.word	0x200000b4
 800a988:	200001bc 	.word	0x200001bc
 800a98c:	200001a0 	.word	0x200001a0
 800a990:	20000170 	.word	0x20000170
 800a994:	2000016c 	.word	0x2000016c
 800a998:	200001d4 	.word	0x200001d4

0800a99c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	3b04      	subs	r3, #4
 800a9ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3b04      	subs	r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f023 0201 	bic.w	r2, r3, #1
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9cc:	4a0c      	ldr	r2, [pc, #48]	; (800aa00 <pxPortInitialiseStack+0x64>)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3b14      	subs	r3, #20
 800a9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3b04      	subs	r3, #4
 800a9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f06f 0202 	mvn.w	r2, #2
 800a9ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3b20      	subs	r3, #32
 800a9f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	0800aa05 	.word	0x0800aa05

0800aa04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <prvTaskExitError+0x50>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa16:	d009      	beq.n	800aa2c <prvTaskExitError+0x28>
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	e7fe      	b.n	800aa2a <prvTaskExitError+0x26>
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa3e:	bf00      	nop
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0fc      	beq.n	800aa40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000028 	.word	0x20000028
	...

0800aa60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <pxCurrentTCBConst2>)
 800aa62:	6819      	ldr	r1, [r3, #0]
 800aa64:	6808      	ldr	r0, [r1, #0]
 800aa66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	f380 8809 	msr	PSP, r0
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f04f 0000 	mov.w	r0, #0
 800aa76:	f380 8811 	msr	BASEPRI, r0
 800aa7a:	4770      	bx	lr
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst2>:
 800aa80:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa88:	4808      	ldr	r0, [pc, #32]	; (800aaac <prvPortStartFirstTask+0x24>)
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	f380 8808 	msr	MSP, r0
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f380 8814 	msr	CONTROL, r0
 800aa9a:	b662      	cpsie	i
 800aa9c:	b661      	cpsie	f
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	df00      	svc	0
 800aaa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaaa:	bf00      	nop
 800aaac:	e000ed08 	.word	0xe000ed08

0800aab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aab6:	4b44      	ldr	r3, [pc, #272]	; (800abc8 <xPortStartScheduler+0x118>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a44      	ldr	r2, [pc, #272]	; (800abcc <xPortStartScheduler+0x11c>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d109      	bne.n	800aad4 <xPortStartScheduler+0x24>
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	e7fe      	b.n	800aad2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aad4:	4b3c      	ldr	r3, [pc, #240]	; (800abc8 <xPortStartScheduler+0x118>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a3d      	ldr	r2, [pc, #244]	; (800abd0 <xPortStartScheduler+0x120>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d109      	bne.n	800aaf2 <xPortStartScheduler+0x42>
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e7fe      	b.n	800aaf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaf2:	4b38      	ldr	r3, [pc, #224]	; (800abd4 <xPortStartScheduler+0x124>)
 800aaf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	22ff      	movs	r2, #255	; 0xff
 800ab02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab0c:	78fb      	ldrb	r3, [r7, #3]
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	4b30      	ldr	r3, [pc, #192]	; (800abd8 <xPortStartScheduler+0x128>)
 800ab18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab1a:	4b30      	ldr	r3, [pc, #192]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab1c:	2207      	movs	r2, #7
 800ab1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab20:	e009      	b.n	800ab36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ab22:	4b2e      	ldr	r3, [pc, #184]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	4a2c      	ldr	r2, [pc, #176]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab36:	78fb      	ldrb	r3, [r7, #3]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d0ef      	beq.n	800ab22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab42:	4b26      	ldr	r3, [pc, #152]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1c3 0307 	rsb	r3, r3, #7
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d009      	beq.n	800ab62 <xPortStartScheduler+0xb2>
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60bb      	str	r3, [r7, #8]
 800ab60:	e7fe      	b.n	800ab60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab62:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	021b      	lsls	r3, r3, #8
 800ab68:	4a1c      	ldr	r2, [pc, #112]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab6c:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <xPortStartScheduler+0x12c>)
 800ab76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab80:	4b17      	ldr	r3, [pc, #92]	; (800abe0 <xPortStartScheduler+0x130>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a16      	ldr	r2, [pc, #88]	; (800abe0 <xPortStartScheduler+0x130>)
 800ab86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab8c:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <xPortStartScheduler+0x130>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a13      	ldr	r2, [pc, #76]	; (800abe0 <xPortStartScheduler+0x130>)
 800ab92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab98:	f000 f8d6 	bl	800ad48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab9c:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aba2:	f000 f8f5 	bl	800ad90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aba6:	4b10      	ldr	r3, [pc, #64]	; (800abe8 <xPortStartScheduler+0x138>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a0f      	ldr	r2, [pc, #60]	; (800abe8 <xPortStartScheduler+0x138>)
 800abac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abb2:	f7ff ff69 	bl	800aa88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abb6:	f7ff fbcd 	bl	800a354 <vTaskSwitchContext>
	prvTaskExitError();
 800abba:	f7ff ff23 	bl	800aa04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	e000ed00 	.word	0xe000ed00
 800abcc:	410fc271 	.word	0x410fc271
 800abd0:	410fc270 	.word	0x410fc270
 800abd4:	e000e400 	.word	0xe000e400
 800abd8:	200001e0 	.word	0x200001e0
 800abdc:	200001e4 	.word	0x200001e4
 800abe0:	e000ed20 	.word	0xe000ed20
 800abe4:	20000028 	.word	0x20000028
 800abe8:	e000ef34 	.word	0xe000ef34

0800abec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac04:	4b0e      	ldr	r3, [pc, #56]	; (800ac40 <vPortEnterCritical+0x54>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	4a0d      	ldr	r2, [pc, #52]	; (800ac40 <vPortEnterCritical+0x54>)
 800ac0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <vPortEnterCritical+0x54>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d10e      	bne.n	800ac34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <vPortEnterCritical+0x58>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <vPortEnterCritical+0x48>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	603b      	str	r3, [r7, #0]
 800ac32:	e7fe      	b.n	800ac32 <vPortEnterCritical+0x46>
	}
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000028 	.word	0x20000028
 800ac44:	e000ed04 	.word	0xe000ed04

0800ac48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <vPortExitCritical+0x4c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <vPortExitCritical+0x22>
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	607b      	str	r3, [r7, #4]
 800ac68:	e7fe      	b.n	800ac68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ac6a:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <vPortExitCritical+0x4c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	4a08      	ldr	r2, [pc, #32]	; (800ac94 <vPortExitCritical+0x4c>)
 800ac72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac74:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <vPortExitCritical+0x4c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <vPortExitCritical+0x3e>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000028 	.word	0x20000028
	...

0800aca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aca0:	f3ef 8009 	mrs	r0, PSP
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <pxCurrentTCBConst>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	f01e 0f10 	tst.w	lr, #16
 800acb0:	bf08      	it	eq
 800acb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	6010      	str	r0, [r2, #0]
 800acbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800acc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acc4:	f380 8811 	msr	BASEPRI, r0
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f7ff fb40 	bl	800a354 <vTaskSwitchContext>
 800acd4:	f04f 0000 	mov.w	r0, #0
 800acd8:	f380 8811 	msr	BASEPRI, r0
 800acdc:	bc09      	pop	{r0, r3}
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	6808      	ldr	r0, [r1, #0]
 800ace2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace6:	f01e 0f10 	tst.w	lr, #16
 800acea:	bf08      	it	eq
 800acec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acf0:	f380 8809 	msr	PSP, r0
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	f3af 8000 	nop.w

0800ad00 <pxCurrentTCBConst>:
 800ad00:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad20:	f7ff fa5c 	bl	800a1dc <xTaskIncrementTick>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <SysTick_Handler+0x3c>)
 800ad2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	e000ed04 	.word	0xe000ed04

0800ad48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad4c:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <vPortSetupTimerInterrupt+0x34>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad52:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortSetupTimerInterrupt+0x38>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad58:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <vPortSetupTimerInterrupt+0x3c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a0a      	ldr	r2, [pc, #40]	; (800ad88 <vPortSetupTimerInterrupt+0x40>)
 800ad5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad62:	099b      	lsrs	r3, r3, #6
 800ad64:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <vPortSetupTimerInterrupt+0x44>)
 800ad66:	3b01      	subs	r3, #1
 800ad68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad6a:	4b04      	ldr	r3, [pc, #16]	; (800ad7c <vPortSetupTimerInterrupt+0x34>)
 800ad6c:	2207      	movs	r2, #7
 800ad6e:	601a      	str	r2, [r3, #0]
}
 800ad70:	bf00      	nop
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	e000e010 	.word	0xe000e010
 800ad80:	e000e018 	.word	0xe000e018
 800ad84:	2000002c 	.word	0x2000002c
 800ad88:	10624dd3 	.word	0x10624dd3
 800ad8c:	e000e014 	.word	0xe000e014

0800ad90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ada0 <vPortEnableVFP+0x10>
 800ad94:	6801      	ldr	r1, [r0, #0]
 800ad96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad9a:	6001      	str	r1, [r0, #0]
 800ad9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad9e:	bf00      	nop
 800ada0:	e000ed88 	.word	0xe000ed88

0800ada4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adaa:	f3ef 8305 	mrs	r3, IPSR
 800adae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b0f      	cmp	r3, #15
 800adb4:	d913      	bls.n	800adde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adb6:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <vPortValidateInterruptPriority+0x6c>)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800adc0:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <vPortValidateInterruptPriority+0x70>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	7afa      	ldrb	r2, [r7, #11]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d209      	bcs.n	800adde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	607b      	str	r3, [r7, #4]
 800addc:	e7fe      	b.n	800addc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adde:	4b0e      	ldr	r3, [pc, #56]	; (800ae18 <vPortValidateInterruptPriority+0x74>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ade6:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <vPortValidateInterruptPriority+0x78>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d909      	bls.n	800ae02 <vPortValidateInterruptPriority+0x5e>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	e7fe      	b.n	800ae00 <vPortValidateInterruptPriority+0x5c>
	}
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	e000e3f0 	.word	0xe000e3f0
 800ae14:	200001e0 	.word	0x200001e0
 800ae18:	e000ed0c 	.word	0xe000ed0c
 800ae1c:	200001e4 	.word	0x200001e4

0800ae20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae2c:	f7ff f92c 	bl	800a088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae30:	4b57      	ldr	r3, [pc, #348]	; (800af90 <pvPortMalloc+0x170>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae38:	f000 f90c 	bl	800b054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae3c:	4b55      	ldr	r3, [pc, #340]	; (800af94 <pvPortMalloc+0x174>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4013      	ands	r3, r2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f040 808c 	bne.w	800af62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d01c      	beq.n	800ae8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ae50:	2208      	movs	r2, #8
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4413      	add	r3, r2
 800ae56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f003 0307 	and.w	r3, r3, #7
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d013      	beq.n	800ae8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f023 0307 	bic.w	r3, r3, #7
 800ae68:	3308      	adds	r3, #8
 800ae6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f003 0307 	and.w	r3, r3, #7
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <pvPortMalloc+0x6a>
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e7fe      	b.n	800ae88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d068      	beq.n	800af62 <pvPortMalloc+0x142>
 800ae90:	4b41      	ldr	r3, [pc, #260]	; (800af98 <pvPortMalloc+0x178>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d863      	bhi.n	800af62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae9a:	4b40      	ldr	r3, [pc, #256]	; (800af9c <pvPortMalloc+0x17c>)
 800ae9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae9e:	4b3f      	ldr	r3, [pc, #252]	; (800af9c <pvPortMalloc+0x17c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aea4:	e004      	b.n	800aeb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d903      	bls.n	800aec2 <pvPortMalloc+0xa2>
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f1      	bne.n	800aea6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aec2:	4b33      	ldr	r3, [pc, #204]	; (800af90 <pvPortMalloc+0x170>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d04a      	beq.n	800af62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aecc:	6a3b      	ldr	r3, [r7, #32]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2208      	movs	r2, #8
 800aed2:	4413      	add	r3, r2
 800aed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	1ad2      	subs	r2, r2, r3
 800aee6:	2308      	movs	r3, #8
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d91e      	bls.n	800af2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4413      	add	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d009      	beq.n	800af14 <pvPortMalloc+0xf4>
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	e7fe      	b.n	800af12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af26:	69b8      	ldr	r0, [r7, #24]
 800af28:	f000 f8f6 	bl	800b118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af2c:	4b1a      	ldr	r3, [pc, #104]	; (800af98 <pvPortMalloc+0x178>)
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	4a18      	ldr	r2, [pc, #96]	; (800af98 <pvPortMalloc+0x178>)
 800af38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af3a:	4b17      	ldr	r3, [pc, #92]	; (800af98 <pvPortMalloc+0x178>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4b18      	ldr	r3, [pc, #96]	; (800afa0 <pvPortMalloc+0x180>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d203      	bcs.n	800af4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af46:	4b14      	ldr	r3, [pc, #80]	; (800af98 <pvPortMalloc+0x178>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a15      	ldr	r2, [pc, #84]	; (800afa0 <pvPortMalloc+0x180>)
 800af4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	4b10      	ldr	r3, [pc, #64]	; (800af94 <pvPortMalloc+0x174>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	431a      	orrs	r2, r3
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af62:	f7ff f89f 	bl	800a0a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	f003 0307 	and.w	r3, r3, #7
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <pvPortMalloc+0x164>
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e7fe      	b.n	800af82 <pvPortMalloc+0x162>
	return pvReturn;
 800af84:	69fb      	ldr	r3, [r7, #28]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20000da8 	.word	0x20000da8
 800af94:	20000db4 	.word	0x20000db4
 800af98:	20000dac 	.word	0x20000dac
 800af9c:	20000da0 	.word	0x20000da0
 800afa0:	20000db0 	.word	0x20000db0

0800afa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d046      	beq.n	800b044 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afb6:	2308      	movs	r3, #8
 800afb8:	425b      	negs	r3, r3
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4413      	add	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	4b20      	ldr	r3, [pc, #128]	; (800b04c <vPortFree+0xa8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4013      	ands	r3, r2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <vPortFree+0x42>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e7fe      	b.n	800afe4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <vPortFree+0x5e>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <vPortFree+0xa8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d019      	beq.n	800b044 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d115      	bne.n	800b044 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <vPortFree+0xa8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b028:	f7ff f82e 	bl	800a088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <vPortFree+0xac>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vPortFree+0xac>)
 800b038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f86c 	bl	800b118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b040:	f7ff f830 	bl	800a0a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000db4 	.word	0x20000db4
 800b050:	20000dac 	.word	0x20000dac

0800b054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b05a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <prvHeapInit+0xac>)
 800b062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3307      	adds	r3, #7
 800b072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <prvHeapInit+0xac>)
 800b084:	4413      	add	r3, r2
 800b086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b08c:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <prvHeapInit+0xb0>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b092:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <prvHeapInit+0xb0>)
 800b094:	2200      	movs	r2, #0
 800b096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	4413      	add	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4a15      	ldr	r2, [pc, #84]	; (800b108 <prvHeapInit+0xb4>)
 800b0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <prvHeapInit+0xb4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <prvHeapInit+0xb4>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <prvHeapInit+0xb8>)
 800b0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a09      	ldr	r2, [pc, #36]	; (800b110 <prvHeapInit+0xbc>)
 800b0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <prvHeapInit+0xc0>)
 800b0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	200001e8 	.word	0x200001e8
 800b104:	20000da0 	.word	0x20000da0
 800b108:	20000da8 	.word	0x20000da8
 800b10c:	20000db0 	.word	0x20000db0
 800b110:	20000dac 	.word	0x20000dac
 800b114:	20000db4 	.word	0x20000db4

0800b118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b120:	4b28      	ldr	r3, [pc, #160]	; (800b1c4 <prvInsertBlockIntoFreeList+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <prvInsertBlockIntoFreeList+0x14>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d8f7      	bhi.n	800b126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d108      	bne.n	800b15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	441a      	add	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	441a      	add	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d118      	bne.n	800b1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d00d      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e008      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e003      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d002      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	20000da0 	.word	0x20000da0
 800b1c8:	20000da8 	.word	0x20000da8

0800b1cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800b1cc:	b5b0      	push	{r4, r5, r7, lr}
 800b1ce:	b08c      	sub	sp, #48	; 0x30
 800b1d0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800b1d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fd ff42 	bl	8009064 <osMutexCreate>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4b13      	ldr	r3, [pc, #76]	; (800b230 <MX_FREERTOS_Init+0x64>)
 800b1e4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, Thread1, osPriorityNormal, 0, 128);
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <MX_FREERTOS_Init+0x68>)
 800b1e8:	f107 0418 	add.w	r4, r7, #24
 800b1ec:	461d      	mov	r5, r3
 800b1ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	6023      	str	r3, [r4, #0]
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fd fef6 	bl	8008fee <osThreadCreate>
 800b202:	4602      	mov	r2, r0
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <MX_FREERTOS_Init+0x6c>)
 800b206:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, Thread2, osPriorityIdle, 0, 128);
 800b208:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <MX_FREERTOS_Init+0x70>)
 800b20a:	1d3c      	adds	r4, r7, #4
 800b20c:	461d      	mov	r5, r3
 800b20e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	6023      	str	r3, [r4, #0]
  myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 800b216:	1d3b      	adds	r3, r7, #4
 800b218:	2100      	movs	r1, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fd fee7 	bl	8008fee <osThreadCreate>
 800b220:	4602      	mov	r2, r0
 800b222:	4b07      	ldr	r3, [pc, #28]	; (800b240 <MX_FREERTOS_Init+0x74>)
 800b224:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800b226:	bf00      	nop
 800b228:	3730      	adds	r7, #48	; 0x30
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bdb0      	pop	{r4, r5, r7, pc}
 800b22e:	bf00      	nop
 800b230:	20000dd8 	.word	0x20000dd8
 800b234:	0800cc44 	.word	0x0800cc44
 800b238:	20000dd0 	.word	0x20000dd0
 800b23c:	0800cc60 	.word	0x0800cc60
 800b240:	20000dd4 	.word	0x20000dd4

0800b244 <Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Thread1 */
void Thread1(void const * argument)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800b24c:	f001 f898 	bl	800c380 <MX_USB_HOST_Init>

  /* USER CODE BEGIN Thread1 */
  //motorMove(roboclaw0, 0, -115);
//  HAL_Delay(3000);
  motorMove(roboclaw0, 0, 15);
 800b250:	220f      	movs	r2, #15
 800b252:	2100      	movs	r1, #0
 800b254:	2080      	movs	r0, #128	; 0x80
 800b256:	f000 fd2f 	bl	800bcb8 <motorMove>
  HAL_Delay(3000);
 800b25a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b25e:	f7f5 f975 	bl	800054c <HAL_Delay>
  motorMove(roboclaw0, 0, -15);
 800b262:	f06f 020e 	mvn.w	r2, #14
 800b266:	2100      	movs	r1, #0
 800b268:	2080      	movs	r0, #128	; 0x80
 800b26a:	f000 fd25 	bl	800bcb8 <motorMove>
  HAL_Delay(3000);
 800b26e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b272:	f7f5 f96b 	bl	800054c <HAL_Delay>
  motorMove(roboclaw0, 0,0);
 800b276:	2200      	movs	r2, #0
 800b278:	2100      	movs	r1, #0
 800b27a:	2080      	movs	r0, #128	; 0x80
 800b27c:	f000 fd1c 	bl	800bcb8 <motorMove>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b280:	2001      	movs	r0, #1
 800b282:	f7fd fedb 	bl	800903c <osDelay>
 800b286:	e7fb      	b.n	800b280 <Thread1+0x3c>

0800b288 <Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2 */
void Thread2(void const * argument)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b290:	2001      	movs	r0, #1
 800b292:	f7fd fed3 	bl	800903c <osDelay>
 800b296:	e7fb      	b.n	800b290 <Thread2+0x8>

0800b298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	; 0x30
 800b29c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b29e:	f107 031c 	add.w	r3, r7, #28
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	605a      	str	r2, [r3, #4]
 800b2a8:	609a      	str	r2, [r3, #8]
 800b2aa:	60da      	str	r2, [r3, #12]
 800b2ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b2ae:	4b92      	ldr	r3, [pc, #584]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b2:	4a91      	ldr	r2, [pc, #580]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2b4:	f043 0310 	orr.w	r3, r3, #16
 800b2b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ba:	4b8f      	ldr	r3, [pc, #572]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	61bb      	str	r3, [r7, #24]
 800b2c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2c6:	4b8c      	ldr	r3, [pc, #560]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ca:	4a8b      	ldr	r2, [pc, #556]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2cc:	f043 0304 	orr.w	r3, r3, #4
 800b2d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2d2:	4b89      	ldr	r3, [pc, #548]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b2de:	4b86      	ldr	r3, [pc, #536]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e2:	4a85      	ldr	r2, [pc, #532]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ea:	4b83      	ldr	r3, [pc, #524]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f2:	613b      	str	r3, [r7, #16]
 800b2f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2f6:	4b80      	ldr	r3, [pc, #512]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fa:	4a7f      	ldr	r2, [pc, #508]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b2fc:	f043 0301 	orr.w	r3, r3, #1
 800b300:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b302:	4b7d      	ldr	r3, [pc, #500]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b30e:	4b7a      	ldr	r3, [pc, #488]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b312:	4a79      	ldr	r2, [pc, #484]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b314:	f043 0302 	orr.w	r3, r3, #2
 800b318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b31a:	4b77      	ldr	r3, [pc, #476]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	60bb      	str	r3, [r7, #8]
 800b324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b326:	4b74      	ldr	r3, [pc, #464]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32a:	4a73      	ldr	r2, [pc, #460]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b32c:	f043 0308 	orr.w	r3, r3, #8
 800b330:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b332:	4b71      	ldr	r3, [pc, #452]	; (800b4f8 <MX_GPIO_Init+0x260>)
 800b334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	607b      	str	r3, [r7, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800b33e:	2200      	movs	r2, #0
 800b340:	f240 1109 	movw	r1, #265	; 0x109
 800b344:	486d      	ldr	r0, [pc, #436]	; (800b4fc <MX_GPIO_Init+0x264>)
 800b346:	f7f5 fc7f 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800b34a:	2200      	movs	r2, #0
 800b34c:	210c      	movs	r1, #12
 800b34e:	486c      	ldr	r0, [pc, #432]	; (800b500 <MX_GPIO_Init+0x268>)
 800b350:	f7f5 fc7a 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b354:	2201      	movs	r2, #1
 800b356:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b35a:	486a      	ldr	r0, [pc, #424]	; (800b504 <MX_GPIO_Init+0x26c>)
 800b35c:	f7f5 fc74 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 800b360:	2200      	movs	r2, #0
 800b362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b366:	4867      	ldr	r0, [pc, #412]	; (800b504 <MX_GPIO_Init+0x26c>)
 800b368:	f7f5 fc6e 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800b36c:	2200      	movs	r2, #0
 800b36e:	2180      	movs	r1, #128	; 0x80
 800b370:	4865      	ldr	r0, [pc, #404]	; (800b508 <MX_GPIO_Init+0x270>)
 800b372:	f7f5 fc69 	bl	8000c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800b376:	2308      	movs	r3, #8
 800b378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b37a:	2301      	movs	r3, #1
 800b37c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b382:	2302      	movs	r3, #2
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800b386:	f107 031c 	add.w	r3, r7, #28
 800b38a:	4619      	mov	r1, r3
 800b38c:	485b      	ldr	r0, [pc, #364]	; (800b4fc <MX_GPIO_Init+0x264>)
 800b38e:	f7f5 fab3 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800b392:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b398:	4b5c      	ldr	r3, [pc, #368]	; (800b50c <MX_GPIO_Init+0x274>)
 800b39a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3a0:	f107 031c 	add.w	r3, r7, #28
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4857      	ldr	r0, [pc, #348]	; (800b504 <MX_GPIO_Init+0x26c>)
 800b3a8:	f7f5 faa6 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 800b3ac:	2307      	movs	r3, #7
 800b3ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3b8:	f107 031c 	add.w	r3, r7, #28
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4851      	ldr	r0, [pc, #324]	; (800b504 <MX_GPIO_Init+0x26c>)
 800b3c0:	f7f5 fa9a 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_DOWN_Pin;
 800b3c4:	2323      	movs	r3, #35	; 0x23
 800b3c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3d0:	f107 031c 	add.w	r3, r7, #28
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3da:	f7f5 fa8d 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800b3de:	2310      	movs	r3, #16
 800b3e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b3e2:	4b4a      	ldr	r3, [pc, #296]	; (800b50c <MX_GPIO_Init+0x274>)
 800b3e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800b3ea:	f107 031c 	add.w	r3, r7, #28
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3f4:	f7f5 fa80 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b400:	2301      	movs	r3, #1
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b404:	2303      	movs	r3, #3
 800b406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800b408:	f107 031c 	add.w	r3, r7, #28
 800b40c:	4619      	mov	r1, r3
 800b40e:	483c      	ldr	r0, [pc, #240]	; (800b500 <MX_GPIO_Init+0x268>)
 800b410:	f7f5 fa72 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800b414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b41a:	2301      	movs	r3, #1
 800b41c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b41e:	2301      	movs	r3, #1
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b422:	2303      	movs	r3, #3
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800b426:	f107 031c 	add.w	r3, r7, #28
 800b42a:	4619      	mov	r1, r3
 800b42c:	4833      	ldr	r0, [pc, #204]	; (800b4fc <MX_GPIO_Init+0x264>)
 800b42e:	f7f5 fa63 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800b432:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b438:	2301      	movs	r3, #1
 800b43a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b440:	2300      	movs	r3, #0
 800b442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b444:	f107 031c 	add.w	r3, r7, #28
 800b448:	4619      	mov	r1, r3
 800b44a:	482e      	ldr	r0, [pc, #184]	; (800b504 <MX_GPIO_Init+0x26c>)
 800b44c:	f7f5 fa54 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 800b450:	2305      	movs	r3, #5
 800b452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b454:	4b2d      	ldr	r3, [pc, #180]	; (800b50c <MX_GPIO_Init+0x274>)
 800b456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b458:	2300      	movs	r3, #0
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b45c:	f107 031c 	add.w	r3, r7, #28
 800b460:	4619      	mov	r1, r3
 800b462:	4829      	ldr	r0, [pc, #164]	; (800b508 <MX_GPIO_Init+0x270>)
 800b464:	f7f5 fa48 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800b468:	2380      	movs	r3, #128	; 0x80
 800b46a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b46c:	2301      	movs	r3, #1
 800b46e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b470:	2300      	movs	r3, #0
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b474:	2303      	movs	r3, #3
 800b476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800b478:	f107 031c 	add.w	r3, r7, #28
 800b47c:	4619      	mov	r1, r3
 800b47e:	4822      	ldr	r0, [pc, #136]	; (800b508 <MX_GPIO_Init+0x270>)
 800b480:	f7f5 fa3a 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800b484:	2308      	movs	r3, #8
 800b486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b488:	2301      	movs	r3, #1
 800b48a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b490:	2300      	movs	r3, #0
 800b492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800b494:	f107 031c 	add.w	r3, r7, #28
 800b498:	4619      	mov	r1, r3
 800b49a:	4819      	ldr	r0, [pc, #100]	; (800b500 <MX_GPIO_Init+0x268>)
 800b49c:	f7f5 fa2c 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800b4a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b4a6:	4b19      	ldr	r3, [pc, #100]	; (800b50c <MX_GPIO_Init+0x274>)
 800b4a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800b4ae:	f107 031c 	add.w	r3, r7, #28
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4812      	ldr	r0, [pc, #72]	; (800b500 <MX_GPIO_Init+0x268>)
 800b4b6:	f7f5 fa1f 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800b4ca:	f107 031c 	add.w	r3, r7, #28
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	480a      	ldr	r0, [pc, #40]	; (800b4fc <MX_GPIO_Init+0x264>)
 800b4d2:	f7f5 fa11 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b4da:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <MX_GPIO_Init+0x274>)
 800b4dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 800b4e2:	f107 031c 	add.w	r3, r7, #28
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4804      	ldr	r0, [pc, #16]	; (800b4fc <MX_GPIO_Init+0x264>)
 800b4ea:	f7f5 fa05 	bl	80008f8 <HAL_GPIO_Init>

}
 800b4ee:	bf00      	nop
 800b4f0:	3730      	adds	r7, #48	; 0x30
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	48001000 	.word	0x48001000
 800b500:	48000400 	.word	0x48000400
 800b504:	48000800 	.word	0x48000800
 800b508:	48000c00 	.word	0x48000c00
 800b50c:	10120000 	.word	0x10120000

0800b510 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b514:	4b1b      	ldr	r3, [pc, #108]	; (800b584 <MX_I2C1_Init+0x74>)
 800b516:	4a1c      	ldr	r2, [pc, #112]	; (800b588 <MX_I2C1_Init+0x78>)
 800b518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800b51a:	4b1a      	ldr	r3, [pc, #104]	; (800b584 <MX_I2C1_Init+0x74>)
 800b51c:	4a1b      	ldr	r2, [pc, #108]	; (800b58c <MX_I2C1_Init+0x7c>)
 800b51e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b520:	4b18      	ldr	r3, [pc, #96]	; (800b584 <MX_I2C1_Init+0x74>)
 800b522:	2200      	movs	r2, #0
 800b524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b526:	4b17      	ldr	r3, [pc, #92]	; (800b584 <MX_I2C1_Init+0x74>)
 800b528:	2201      	movs	r2, #1
 800b52a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b52c:	4b15      	ldr	r3, [pc, #84]	; (800b584 <MX_I2C1_Init+0x74>)
 800b52e:	2200      	movs	r2, #0
 800b530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b532:	4b14      	ldr	r3, [pc, #80]	; (800b584 <MX_I2C1_Init+0x74>)
 800b534:	2200      	movs	r2, #0
 800b536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b538:	4b12      	ldr	r3, [pc, #72]	; (800b584 <MX_I2C1_Init+0x74>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b53e:	4b11      	ldr	r3, [pc, #68]	; (800b584 <MX_I2C1_Init+0x74>)
 800b540:	2200      	movs	r2, #0
 800b542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b544:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <MX_I2C1_Init+0x74>)
 800b546:	2200      	movs	r2, #0
 800b548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b54a:	480e      	ldr	r0, [pc, #56]	; (800b584 <MX_I2C1_Init+0x74>)
 800b54c:	f7f6 ffb4 	bl	80024b8 <HAL_I2C_Init>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b556:	f000 fa6d 	bl	800ba34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b55a:	2100      	movs	r1, #0
 800b55c:	4809      	ldr	r0, [pc, #36]	; (800b584 <MX_I2C1_Init+0x74>)
 800b55e:	f7f7 f83a 	bl	80025d6 <HAL_I2CEx_ConfigAnalogFilter>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b568:	f000 fa64 	bl	800ba34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b56c:	2100      	movs	r1, #0
 800b56e:	4805      	ldr	r0, [pc, #20]	; (800b584 <MX_I2C1_Init+0x74>)
 800b570:	f7f7 f87c 	bl	800266c <HAL_I2CEx_ConfigDigitalFilter>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b57a:	f000 fa5b 	bl	800ba34 <Error_Handler>
  }

}
 800b57e:	bf00      	nop
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000ddc 	.word	0x20000ddc
 800b588:	40005400 	.word	0x40005400
 800b58c:	00909beb 	.word	0x00909beb

0800b590 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b594:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <MX_I2C2_Init+0x74>)
 800b596:	4a1c      	ldr	r2, [pc, #112]	; (800b608 <MX_I2C2_Init+0x78>)
 800b598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <MX_I2C2_Init+0x74>)
 800b59c:	4a1b      	ldr	r2, [pc, #108]	; (800b60c <MX_I2C2_Init+0x7c>)
 800b59e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b5a0:	4b18      	ldr	r3, [pc, #96]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b5a6:	4b17      	ldr	r3, [pc, #92]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b5ac:	4b15      	ldr	r3, [pc, #84]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b5b8:	4b12      	ldr	r3, [pc, #72]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b5be:	4b11      	ldr	r3, [pc, #68]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b5ca:	480e      	ldr	r0, [pc, #56]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5cc:	f7f6 ff74 	bl	80024b8 <HAL_I2C_Init>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b5d6:	f000 fa2d 	bl	800ba34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4809      	ldr	r0, [pc, #36]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5de:	f7f6 fffa 	bl	80025d6 <HAL_I2CEx_ConfigAnalogFilter>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b5e8:	f000 fa24 	bl	800ba34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4805      	ldr	r0, [pc, #20]	; (800b604 <MX_I2C2_Init+0x74>)
 800b5f0:	f7f7 f83c 	bl	800266c <HAL_I2CEx_ConfigDigitalFilter>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b5fa:	f000 fa1b 	bl	800ba34 <Error_Handler>
  }

}
 800b5fe:	bf00      	nop
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20000e28 	.word	0x20000e28
 800b608:	40005800 	.word	0x40005800
 800b60c:	00909beb 	.word	0x00909beb

0800b610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08c      	sub	sp, #48	; 0x30
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b618:	f107 031c 	add.w	r3, r7, #28
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	609a      	str	r2, [r3, #8]
 800b624:	60da      	str	r2, [r3, #12]
 800b626:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a2e      	ldr	r2, [pc, #184]	; (800b6e8 <HAL_I2C_MspInit+0xd8>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d128      	bne.n	800b684 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b632:	4b2e      	ldr	r3, [pc, #184]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b636:	4a2d      	ldr	r2, [pc, #180]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b638:	f043 0302 	orr.w	r3, r3, #2
 800b63c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b63e:	4b2b      	ldr	r3, [pc, #172]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	61bb      	str	r3, [r7, #24]
 800b648:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800b64a:	23c0      	movs	r3, #192	; 0xc0
 800b64c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b64e:	2312      	movs	r3, #18
 800b650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b652:	2301      	movs	r3, #1
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b656:	2303      	movs	r3, #3
 800b658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b65a:	2304      	movs	r3, #4
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b65e:	f107 031c 	add.w	r3, r7, #28
 800b662:	4619      	mov	r1, r3
 800b664:	4822      	ldr	r0, [pc, #136]	; (800b6f0 <HAL_I2C_MspInit+0xe0>)
 800b666:	f7f5 f947 	bl	80008f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b66a:	4b20      	ldr	r3, [pc, #128]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b66e:	4a1f      	ldr	r2, [pc, #124]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b674:	6593      	str	r3, [r2, #88]	; 0x58
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b682:	e02d      	b.n	800b6e0 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1a      	ldr	r2, [pc, #104]	; (800b6f4 <HAL_I2C_MspInit+0xe4>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d128      	bne.n	800b6e0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b68e:	4b17      	ldr	r3, [pc, #92]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b692:	4a16      	ldr	r2, [pc, #88]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b694:	f043 0302 	orr.w	r3, r3, #2
 800b698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b69a:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	613b      	str	r3, [r7, #16]
 800b6a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800b6a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b6aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b6ac:	2312      	movs	r3, #18
 800b6ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6bc:	f107 031c 	add.w	r3, r7, #28
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	480b      	ldr	r0, [pc, #44]	; (800b6f0 <HAL_I2C_MspInit+0xe0>)
 800b6c4:	f7f5 f918 	bl	80008f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6cc:	4a07      	ldr	r2, [pc, #28]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b6ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <HAL_I2C_MspInit+0xdc>)
 800b6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	68fb      	ldr	r3, [r7, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	3730      	adds	r7, #48	; 0x30
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40005400 	.word	0x40005400
 800b6ec:	40021000 	.word	0x40021000
 800b6f0:	48000400 	.word	0x48000400
 800b6f4:	40005800 	.word	0x40005800

0800b6f8 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 800b6fc:	4b18      	ldr	r3, [pc, #96]	; (800b760 <MX_LCD_Init+0x68>)
 800b6fe:	4a19      	ldr	r2, [pc, #100]	; (800b764 <MX_LCD_Init+0x6c>)
 800b700:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800b702:	4b17      	ldr	r3, [pc, #92]	; (800b760 <MX_LCD_Init+0x68>)
 800b704:	2200      	movs	r2, #0
 800b706:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800b708:	4b15      	ldr	r3, [pc, #84]	; (800b760 <MX_LCD_Init+0x68>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800b70e:	4b14      	ldr	r3, [pc, #80]	; (800b760 <MX_LCD_Init+0x68>)
 800b710:	220c      	movs	r2, #12
 800b712:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800b714:	4b12      	ldr	r3, [pc, #72]	; (800b760 <MX_LCD_Init+0x68>)
 800b716:	2200      	movs	r2, #0
 800b718:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800b71a:	4b11      	ldr	r3, [pc, #68]	; (800b760 <MX_LCD_Init+0x68>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <MX_LCD_Init+0x68>)
 800b722:	2200      	movs	r2, #0
 800b724:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800b726:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <MX_LCD_Init+0x68>)
 800b728:	2200      	movs	r2, #0
 800b72a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800b72c:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <MX_LCD_Init+0x68>)
 800b72e:	2200      	movs	r2, #0
 800b730:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <MX_LCD_Init+0x68>)
 800b734:	2200      	movs	r2, #0
 800b736:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800b738:	4b09      	ldr	r3, [pc, #36]	; (800b760 <MX_LCD_Init+0x68>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800b73e:	4b08      	ldr	r3, [pc, #32]	; (800b760 <MX_LCD_Init+0x68>)
 800b740:	2200      	movs	r2, #0
 800b742:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <MX_LCD_Init+0x68>)
 800b746:	2200      	movs	r2, #0
 800b748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800b74a:	4805      	ldr	r0, [pc, #20]	; (800b760 <MX_LCD_Init+0x68>)
 800b74c:	f7f6 ffda 	bl	8002704 <HAL_LCD_Init>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800b756:	f000 f96d 	bl	800ba34 <Error_Handler>
  }

}
 800b75a:	bf00      	nop
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000e74 	.word	0x20000e74
 800b764:	40002400 	.word	0x40002400

0800b768 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08c      	sub	sp, #48	; 0x30
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b770:	f107 031c 	add.w	r3, r7, #28
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	605a      	str	r2, [r3, #4]
 800b77a:	609a      	str	r2, [r3, #8]
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a44      	ldr	r2, [pc, #272]	; (800b898 <HAL_LCD_MspInit+0x130>)
 800b786:	4293      	cmp	r3, r2
 800b788:	f040 8081 	bne.w	800b88e <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800b78c:	4b43      	ldr	r3, [pc, #268]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b790:	4a42      	ldr	r2, [pc, #264]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b796:	6593      	str	r3, [r2, #88]	; 0x58
 800b798:	4b40      	ldr	r3, [pc, #256]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7a0:	61bb      	str	r3, [r7, #24]
 800b7a2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7a4:	4b3d      	ldr	r3, [pc, #244]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a8:	4a3c      	ldr	r2, [pc, #240]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7aa:	f043 0304 	orr.w	r3, r3, #4
 800b7ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7b0:	4b3a      	ldr	r3, [pc, #232]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7bc:	4b37      	ldr	r3, [pc, #220]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c0:	4a36      	ldr	r2, [pc, #216]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7c2:	f043 0301 	orr.w	r3, r3, #1
 800b7c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7c8:	4b34      	ldr	r3, [pc, #208]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7d4:	4b31      	ldr	r3, [pc, #196]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d8:	4a30      	ldr	r2, [pc, #192]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7da:	f043 0302 	orr.w	r3, r3, #2
 800b7de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7e0:	4b2e      	ldr	r3, [pc, #184]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7f0:	4a2a      	ldr	r2, [pc, #168]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7f2:	f043 0308 	orr.w	r3, r3, #8
 800b7f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7f8:	4b28      	ldr	r3, [pc, #160]	; (800b89c <HAL_LCD_MspInit+0x134>)
 800b7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	60bb      	str	r3, [r7, #8]
 800b802:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 800b804:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800b808:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b80a:	2302      	movs	r3, #2
 800b80c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b812:	2300      	movs	r3, #0
 800b814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b816:	230b      	movs	r3, #11
 800b818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b81a:	f107 031c 	add.w	r3, r7, #28
 800b81e:	4619      	mov	r1, r3
 800b820:	481f      	ldr	r0, [pc, #124]	; (800b8a0 <HAL_LCD_MspInit+0x138>)
 800b822:	f7f5 f869 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800b826:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800b82a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b82c:	2302      	movs	r3, #2
 800b82e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b830:	2300      	movs	r3, #0
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b834:	2300      	movs	r3, #0
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b838:	230b      	movs	r3, #11
 800b83a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b83c:	f107 031c 	add.w	r3, r7, #28
 800b840:	4619      	mov	r1, r3
 800b842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b846:	f7f5 f857 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 800b84a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800b84e:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b850:	2302      	movs	r3, #2
 800b852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b854:	2300      	movs	r3, #0
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b858:	2300      	movs	r3, #0
 800b85a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b85c:	230b      	movs	r3, #11
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b860:	f107 031c 	add.w	r3, r7, #28
 800b864:	4619      	mov	r1, r3
 800b866:	480f      	ldr	r0, [pc, #60]	; (800b8a4 <HAL_LCD_MspInit+0x13c>)
 800b868:	f7f5 f846 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 800b86c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b870:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b872:	2302      	movs	r3, #2
 800b874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b876:	2300      	movs	r3, #0
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b87a:	2300      	movs	r3, #0
 800b87c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b87e:	230b      	movs	r3, #11
 800b880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b882:	f107 031c 	add.w	r3, r7, #28
 800b886:	4619      	mov	r1, r3
 800b888:	4807      	ldr	r0, [pc, #28]	; (800b8a8 <HAL_LCD_MspInit+0x140>)
 800b88a:	f7f5 f835 	bl	80008f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 800b88e:	bf00      	nop
 800b890:	3730      	adds	r7, #48	; 0x30
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	40002400 	.word	0x40002400
 800b89c:	40021000 	.word	0x40021000
 800b8a0:	48000800 	.word	0x48000800
 800b8a4:	48000400 	.word	0x48000400
 800b8a8:	48000c00 	.word	0x48000c00

0800b8ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b8b0:	f7f4 fe0e 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b8b4:	f000 f816 	bl	800b8e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b8b8:	f7ff fcee 	bl	800b298 <MX_GPIO_Init>
  MX_I2C1_Init();
 800b8bc:	f7ff fe28 	bl	800b510 <MX_I2C1_Init>
  MX_I2C2_Init();
 800b8c0:	f7ff fe66 	bl	800b590 <MX_I2C2_Init>
  MX_LCD_Init();
 800b8c4:	f7ff ff18 	bl	800b6f8 <MX_LCD_Init>
  MX_QUADSPI_Init();
 800b8c8:	f000 f8bc 	bl	800ba44 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800b8cc:	f000 fa24 	bl	800bd18 <MX_SAI1_Init>
  MX_SPI2_Init();
 800b8d0:	f000 fb42 	bl	800bf58 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800b8d4:	f000 fcda 	bl	800c28c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800b8d8:	f7ff fc78 	bl	800b1cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b8dc:	f7fd fb80 	bl	8008fe0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800b8e0:	e7fe      	b.n	800b8e0 <main+0x34>
	...

0800b8e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b0b8      	sub	sp, #224	; 0xe0
 800b8e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b8ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b8ee:	2244      	movs	r2, #68	; 0x44
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 f8b9 	bl	800ca6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b8f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	605a      	str	r2, [r3, #4]
 800b902:	609a      	str	r2, [r3, #8]
 800b904:	60da      	str	r2, [r3, #12]
 800b906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b908:	463b      	mov	r3, r7
 800b90a:	2288      	movs	r2, #136	; 0x88
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 f8ab 	bl	800ca6a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b914:	2309      	movs	r3, #9
 800b916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b91a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b91e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b922:	2301      	movs	r3, #1
 800b924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b928:	2302      	movs	r3, #2
 800b92a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b92e:	2303      	movs	r3, #3
 800b930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b934:	2301      	movs	r3, #1
 800b936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b93a:	2314      	movs	r3, #20
 800b93c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b940:	2307      	movs	r3, #7
 800b942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b946:	2302      	movs	r3, #2
 800b948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b94c:	2302      	movs	r3, #2
 800b94e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b952:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b956:	4618      	mov	r0, r3
 800b958:	f7f7 f8f2 	bl	8002b40 <HAL_RCC_OscConfig>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800b962:	f000 f867 	bl	800ba34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b966:	230f      	movs	r3, #15
 800b968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b96c:	2303      	movs	r3, #3
 800b96e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800b972:	2380      	movs	r3, #128	; 0x80
 800b974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b978:	2300      	movs	r3, #0
 800b97a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b97e:	2300      	movs	r3, #0
 800b980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b984:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b988:	2102      	movs	r1, #2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f7 fc88 	bl	80032a0 <HAL_RCC_ClockConfig>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800b996:	f000 f84d 	bl	800ba34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800b99a:	4b1c      	ldr	r3, [pc, #112]	; (800ba0c <SystemClock_Config+0x128>)
 800b99c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b9ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b9b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b9ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b9c4:	2318      	movs	r3, #24
 800b9c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b9c8:	2307      	movs	r3, #7
 800b9ca:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 800b9d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b9d8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7f7 fea5 	bl	800372c <HAL_RCCEx_PeriphCLKConfig>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <SystemClock_Config+0x108>
  {
    Error_Handler();
 800b9e8:	f000 f824 	bl	800ba34 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800b9ec:	f7f7 fe2e 	bl	800364c <HAL_RCC_EnableCSS>
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b9f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b9f4:	f7f6 ff76 	bl	80028e4 <HAL_PWREx_ControlVoltageScaling>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800b9fe:	f000 f819 	bl	800ba34 <Error_Handler>
  }
}
 800ba02:	bf00      	nop
 800ba04:	37e0      	adds	r7, #224	; 0xe0
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	000228c2 	.word	0x000228c2

0800ba10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a04      	ldr	r2, [pc, #16]	; (800ba30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d101      	bne.n	800ba26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ba22:	f7f4 fd75 	bl	8000510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	40012c00 	.word	0x40012c00

0800ba34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ba34:	b480      	push	{r7}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ba38:	bf00      	nop
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
	...

0800ba44 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 800ba48:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba4a:	4a10      	ldr	r2, [pc, #64]	; (800ba8c <MX_QUADSPI_Init+0x48>)
 800ba4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba50:	22ff      	movs	r2, #255	; 0xff
 800ba52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800ba54:	4b0c      	ldr	r3, [pc, #48]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800ba5a:	4b0b      	ldr	r3, [pc, #44]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800ba60:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800ba66:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800ba6c:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800ba72:	4805      	ldr	r0, [pc, #20]	; (800ba88 <MX_QUADSPI_Init+0x44>)
 800ba74:	f7f6 ff9c 	bl	80029b0 <HAL_QSPI_Init>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800ba7e:	f7ff ffd9 	bl	800ba34 <Error_Handler>
  }

}
 800ba82:	bf00      	nop
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000eb0 	.word	0x20000eb0
 800ba8c:	a0001000 	.word	0xa0001000

0800ba90 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba98:	f107 0314 	add.w	r3, r7, #20
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	605a      	str	r2, [r3, #4]
 800baa2:	609a      	str	r2, [r3, #8]
 800baa4:	60da      	str	r2, [r3, #12]
 800baa6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a17      	ldr	r2, [pc, #92]	; (800bb0c <HAL_QSPI_MspInit+0x7c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d128      	bne.n	800bb04 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab6:	4a16      	ldr	r2, [pc, #88]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800babc:	6513      	str	r3, [r2, #80]	; 0x50
 800babe:	4b14      	ldr	r3, [pc, #80]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800baca:	4b11      	ldr	r3, [pc, #68]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bace:	4a10      	ldr	r2, [pc, #64]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bad0:	f043 0310 	orr.w	r3, r3, #16
 800bad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bad6:	4b0e      	ldr	r3, [pc, #56]	; (800bb10 <HAL_QSPI_MspInit+0x80>)
 800bad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bada:	f003 0310 	and.w	r3, r3, #16
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800bae2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800bae6:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bae8:	2302      	movs	r3, #2
 800baea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baec:	2300      	movs	r3, #0
 800baee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baf0:	2303      	movs	r3, #3
 800baf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800baf4:	230a      	movs	r3, #10
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800baf8:	f107 0314 	add.w	r3, r7, #20
 800bafc:	4619      	mov	r1, r3
 800bafe:	4805      	ldr	r0, [pc, #20]	; (800bb14 <HAL_QSPI_MspInit+0x84>)
 800bb00:	f7f4 fefa 	bl	80008f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800bb04:	bf00      	nop
 800bb06:	3728      	adds	r7, #40	; 0x28
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	a0001000 	.word	0xa0001000
 800bb10:	40021000 	.word	0x40021000
 800bb14:	48001000 	.word	0x48001000

0800bb18 <crc16>:
#include "roboclaw.h"

unsigned int crc16 (unsigned char *packet, int nBytes) {
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	82fb      	strh	r3, [r7, #22]
	for (int byte = 0; byte < nBytes; byte++) {
 800bb26:	2300      	movs	r3, #0
 800bb28:	613b      	str	r3, [r7, #16]
 800bb2a:	e026      	b.n	800bb7a <crc16+0x62>
		crc = crc ^ ((unsigned int)packet[byte] << 8);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	8afb      	ldrh	r3, [r7, #22]
 800bb3c:	4053      	eors	r3, r2
 800bb3e:	82fb      	strh	r3, [r7, #22]
		for (unsigned char bit = 0; bit < 8; bit++) {
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
 800bb44:	e013      	b.n	800bb6e <crc16+0x56>
			if (crc & 0x8000) {
 800bb46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	da09      	bge.n	800bb62 <crc16+0x4a>
					crc = (crc << 1) ^ 0x1021;
 800bb4e:	8afb      	ldrh	r3, [r7, #22]
 800bb50:	005b      	lsls	r3, r3, #1
 800bb52:	b21b      	sxth	r3, r3
 800bb54:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800bb58:	f083 0301 	eor.w	r3, r3, #1
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	82fb      	strh	r3, [r7, #22]
 800bb60:	e002      	b.n	800bb68 <crc16+0x50>
			} else {
				crc = crc << 1;
 800bb62:	8afb      	ldrh	r3, [r7, #22]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	82fb      	strh	r3, [r7, #22]
		for (unsigned char bit = 0; bit < 8; bit++) {
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	73fb      	strb	r3, [r7, #15]
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	2b07      	cmp	r3, #7
 800bb72:	d9e8      	bls.n	800bb46 <crc16+0x2e>
	for (int byte = 0; byte < nBytes; byte++) {
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3301      	adds	r3, #1
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	dbd4      	blt.n	800bb2c <crc16+0x14>
			}
		}
	}
	return crc;
 800bb82:	8afb      	ldrh	r3, [r7, #22]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	371c      	adds	r7, #28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <in_range>:
unsigned char in_range(unsigned char x, unsigned char a, unsigned char b) {
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	71bb      	strb	r3, [r7, #6]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	717b      	strb	r3, [r7, #5]
	if (x < a) return a;
 800bba2:	79fa      	ldrb	r2, [r7, #7]
 800bba4:	79bb      	ldrb	r3, [r7, #6]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d201      	bcs.n	800bbae <in_range+0x1e>
 800bbaa:	79bb      	ldrb	r3, [r7, #6]
 800bbac:	e006      	b.n	800bbbc <in_range+0x2c>
	if (x > b) return b;
 800bbae:	79fa      	ldrb	r2, [r7, #7]
 800bbb0:	797b      	ldrb	r3, [r7, #5]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d901      	bls.n	800bbba <in_range+0x2a>
 800bbb6:	797b      	ldrb	r3, [r7, #5]
 800bbb8:	e000      	b.n	800bbbc <in_range+0x2c>
	return x;
 800bbba:	79fb      	ldrb	r3, [r7, #7]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <motorForward>:

HAL_StatusTypeDef motorForward(unsigned char roboclaw, unsigned char motor, unsigned char speed) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	71bb      	strb	r3, [r7, #6]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	717b      	strb	r3, [r7, #5]
	unsigned char buffer[5];
	buffer[0] = roboclaw;
 800bbda:	79fb      	ldrb	r3, [r7, #7]
 800bbdc:	723b      	strb	r3, [r7, #8]
	if(motor == 0) buffer[1] = 0;
 800bbde:	79bb      	ldrb	r3, [r7, #6]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d102      	bne.n	800bbea <motorForward+0x22>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	727b      	strb	r3, [r7, #9]
 800bbe8:	e004      	b.n	800bbf4 <motorForward+0x2c>
	else if(motor == 1) buffer[1] = 4;
 800bbea:	79bb      	ldrb	r3, [r7, #6]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d101      	bne.n	800bbf4 <motorForward+0x2c>
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	727b      	strb	r3, [r7, #9]
	buffer[2] = in_range(speed, 0, 127);
 800bbf4:	797b      	ldrb	r3, [r7, #5]
 800bbf6:	227f      	movs	r2, #127	; 0x7f
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff ffc8 	bl	800bb90 <in_range>
 800bc00:	4603      	mov	r3, r0
 800bc02:	72bb      	strb	r3, [r7, #10]
	unsigned short crc = crc16(buffer, 3);
 800bc04:	f107 0308 	add.w	r3, r7, #8
 800bc08:	2103      	movs	r1, #3
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff ff84 	bl	800bb18 <crc16>
 800bc10:	4603      	mov	r3, r0
 800bc12:	81fb      	strh	r3, [r7, #14]
	buffer[3] = crc>>8;
 800bc14:	89fb      	ldrh	r3, [r7, #14]
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	72fb      	strb	r3, [r7, #11]
	buffer[4] = crc;
 800bc1e:	89fb      	ldrh	r3, [r7, #14]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit_DMA(&huart2, buffer, 5);
 800bc24:	f107 0308 	add.w	r3, r7, #8
 800bc28:	2205      	movs	r2, #5
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4803      	ldr	r0, [pc, #12]	; (800bc3c <motorForward+0x74>)
 800bc2e:	f7f9 fc4f 	bl	80054d0 <HAL_UART_Transmit_DMA>
 800bc32:	4603      	mov	r3, r0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	200010a0 	.word	0x200010a0

0800bc40 <motorBackward>:

HAL_StatusTypeDef motorBackward	(unsigned char roboclaw, unsigned char motor, unsigned char speed) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	71bb      	strb	r3, [r7, #6]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	717b      	strb	r3, [r7, #5]
	unsigned char buffer[5];
	buffer[0] = roboclaw;
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	723b      	strb	r3, [r7, #8]
	if(motor == 0) buffer[1] = 1;
 800bc56:	79bb      	ldrb	r3, [r7, #6]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <motorBackward+0x22>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	727b      	strb	r3, [r7, #9]
 800bc60:	e004      	b.n	800bc6c <motorBackward+0x2c>
	else if(motor == 1) buffer[1] = 5;
 800bc62:	79bb      	ldrb	r3, [r7, #6]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d101      	bne.n	800bc6c <motorBackward+0x2c>
 800bc68:	2305      	movs	r3, #5
 800bc6a:	727b      	strb	r3, [r7, #9]
	buffer[2] = in_range(speed, 0, 127);
 800bc6c:	797b      	ldrb	r3, [r7, #5]
 800bc6e:	227f      	movs	r2, #127	; 0x7f
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff ff8c 	bl	800bb90 <in_range>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	72bb      	strb	r3, [r7, #10]
	unsigned short crc = crc16(buffer, 3);
 800bc7c:	f107 0308 	add.w	r3, r7, #8
 800bc80:	2103      	movs	r1, #3
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff ff48 	bl	800bb18 <crc16>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	81fb      	strh	r3, [r7, #14]
	buffer[3] = crc>>8;
 800bc8c:	89fb      	ldrh	r3, [r7, #14]
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	72fb      	strb	r3, [r7, #11]
	buffer[4] = crc;
 800bc96:	89fb      	ldrh	r3, [r7, #14]
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit_DMA(&huart2, buffer, 5);
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	2205      	movs	r2, #5
 800bca2:	4619      	mov	r1, r3
 800bca4:	4803      	ldr	r0, [pc, #12]	; (800bcb4 <motorBackward+0x74>)
 800bca6:	f7f9 fc13 	bl	80054d0 <HAL_UART_Transmit_DMA>
 800bcaa:	4603      	mov	r3, r0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	200010a0 	.word	0x200010a0

0800bcb8 <motorMove>:

HAL_StatusTypeDef motorMove	(unsigned char roboclaw, unsigned char motor, signed char speed) {
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	71bb      	strb	r3, [r7, #6]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	717b      	strb	r3, [r7, #5]
	if(speed >= 0) {
 800bcca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	db0e      	blt.n	800bcf0 <motorMove+0x38>
		return motorForward(roboclaw, motor, in_range(speed, 0, 127));
 800bcd2:	797b      	ldrb	r3, [r7, #5]
 800bcd4:	227f      	movs	r2, #127	; 0x7f
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff ff59 	bl	800bb90 <in_range>
 800bcde:	4603      	mov	r3, r0
 800bce0:	461a      	mov	r2, r3
 800bce2:	79b9      	ldrb	r1, [r7, #6]
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff ff6e 	bl	800bbc8 <motorForward>
 800bcec:	4603      	mov	r3, r0
 800bcee:	e00f      	b.n	800bd10 <motorMove+0x58>
	}
	else {
		return motorBackward(roboclaw, motor, in_range(-(signed char)speed, 0, 127));
 800bcf0:	797b      	ldrb	r3, [r7, #5]
 800bcf2:	425b      	negs	r3, r3
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	227f      	movs	r2, #127	; 0x7f
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ff48 	bl	800bb90 <in_range>
 800bd00:	4603      	mov	r3, r0
 800bd02:	461a      	mov	r2, r3
 800bd04:	79b9      	ldrb	r1, [r7, #6]
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff ff99 	bl	800bc40 <motorBackward>
 800bd0e:	4603      	mov	r3, r0
	}
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd1e:	4a4e      	ldr	r2, [pc, #312]	; (800be58 <MX_SAI1_Init+0x140>)
 800bd20:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bd22:	4b4c      	ldr	r3, [pc, #304]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800bd28:	4b4a      	ldr	r3, [pc, #296]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800bd2e:	4b49      	ldr	r3, [pc, #292]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd30:	2240      	movs	r2, #64	; 0x40
 800bd32:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bd34:	4b47      	ldr	r3, [pc, #284]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bd3a:	4b46      	ldr	r3, [pc, #280]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bd40:	4b44      	ldr	r3, [pc, #272]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bd46:	4b43      	ldr	r3, [pc, #268]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bd4c:	4b41      	ldr	r3, [pc, #260]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bd52:	4b40      	ldr	r3, [pc, #256]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800bd58:	4b3e      	ldr	r3, [pc, #248]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd5a:	4a40      	ldr	r2, [pc, #256]	; (800be5c <MX_SAI1_Init+0x144>)
 800bd5c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bd5e:	4b3d      	ldr	r3, [pc, #244]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bd64:	4b3b      	ldr	r3, [pc, #236]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bd6a:	4b3a      	ldr	r3, [pc, #232]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bd70:	4b38      	ldr	r3, [pc, #224]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800bd76:	4b37      	ldr	r3, [pc, #220]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd78:	2208      	movs	r2, #8
 800bd7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800bd7c:	4b35      	ldr	r3, [pc, #212]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd7e:	2201      	movs	r2, #1
 800bd80:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bd82:	4b34      	ldr	r3, [pc, #208]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bd88:	4b32      	ldr	r3, [pc, #200]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bd8e:	4b31      	ldr	r3, [pc, #196]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800bd94:	4b2f      	ldr	r3, [pc, #188]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800bda0:	4b2c      	ldr	r3, [pc, #176]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800bda6:	4b2b      	ldr	r3, [pc, #172]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800bdac:	4829      	ldr	r0, [pc, #164]	; (800be54 <MX_SAI1_Init+0x13c>)
 800bdae:	f7f8 febd 	bl	8004b2c <HAL_SAI_Init>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800bdb8:	f7ff fe3c 	bl	800ba34 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800bdbc:	4b28      	ldr	r3, [pc, #160]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdbe:	4a29      	ldr	r2, [pc, #164]	; (800be64 <MX_SAI1_Init+0x14c>)
 800bdc0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bdc2:	4b27      	ldr	r3, [pc, #156]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800bdc8:	4b25      	ldr	r3, [pc, #148]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdca:	2203      	movs	r2, #3
 800bdcc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800bdce:	4b24      	ldr	r3, [pc, #144]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdd0:	2240      	movs	r2, #64	; 0x40
 800bdd2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bdd4:	4b22      	ldr	r3, [pc, #136]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bdda:	4b21      	ldr	r3, [pc, #132]	; (800be60 <MX_SAI1_Init+0x148>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800bde0:	4b1f      	ldr	r3, [pc, #124]	; (800be60 <MX_SAI1_Init+0x148>)
 800bde2:	2201      	movs	r2, #1
 800bde4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bde6:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <MX_SAI1_Init+0x148>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bdec:	4b1c      	ldr	r3, [pc, #112]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bdf2:	4b1b      	ldr	r3, [pc, #108]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bdf8:	4b19      	ldr	r3, [pc, #100]	; (800be60 <MX_SAI1_Init+0x148>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bdfe:	4b18      	ldr	r3, [pc, #96]	; (800be60 <MX_SAI1_Init+0x148>)
 800be00:	2200      	movs	r2, #0
 800be02:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800be04:	4b16      	ldr	r3, [pc, #88]	; (800be60 <MX_SAI1_Init+0x148>)
 800be06:	2200      	movs	r2, #0
 800be08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 800be0a:	4b15      	ldr	r3, [pc, #84]	; (800be60 <MX_SAI1_Init+0x148>)
 800be0c:	2218      	movs	r2, #24
 800be0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800be10:	4b13      	ldr	r3, [pc, #76]	; (800be60 <MX_SAI1_Init+0x148>)
 800be12:	2201      	movs	r2, #1
 800be14:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800be16:	4b12      	ldr	r3, [pc, #72]	; (800be60 <MX_SAI1_Init+0x148>)
 800be18:	2200      	movs	r2, #0
 800be1a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800be1c:	4b10      	ldr	r3, [pc, #64]	; (800be60 <MX_SAI1_Init+0x148>)
 800be1e:	2200      	movs	r2, #0
 800be20:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800be22:	4b0f      	ldr	r3, [pc, #60]	; (800be60 <MX_SAI1_Init+0x148>)
 800be24:	2200      	movs	r2, #0
 800be26:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800be28:	4b0d      	ldr	r3, [pc, #52]	; (800be60 <MX_SAI1_Init+0x148>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800be2e:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <MX_SAI1_Init+0x148>)
 800be30:	2200      	movs	r2, #0
 800be32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <MX_SAI1_Init+0x148>)
 800be36:	2201      	movs	r2, #1
 800be38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800be3a:	4b09      	ldr	r3, [pc, #36]	; (800be60 <MX_SAI1_Init+0x148>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800be40:	4807      	ldr	r0, [pc, #28]	; (800be60 <MX_SAI1_Init+0x148>)
 800be42:	f7f8 fe73 	bl	8004b2c <HAL_SAI_Init>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800be4c:	f7ff fdf2 	bl	800ba34 <Error_Handler>
  }

}
 800be50:	bf00      	nop
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20000f78 	.word	0x20000f78
 800be58:	40015404 	.word	0x40015404
 800be5c:	0002ee00 	.word	0x0002ee00
 800be60:	20000ef4 	.word	0x20000ef4
 800be64:	40015424 	.word	0x40015424

0800be68 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	; 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a33      	ldr	r2, [pc, #204]	; (800bf44 <HAL_SAI_MspInit+0xdc>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d135      	bne.n	800bee6 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800be7a:	4b33      	ldr	r3, [pc, #204]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10b      	bne.n	800be9a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800be82:	4b32      	ldr	r3, [pc, #200]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800be84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be86:	4a31      	ldr	r2, [pc, #196]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800be88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be8c:	6613      	str	r3, [r2, #96]	; 0x60
 800be8e:	4b2f      	ldr	r3, [pc, #188]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800be90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be96:	613b      	str	r3, [r7, #16]
 800be98:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800be9a:	4b2b      	ldr	r3, [pc, #172]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3301      	adds	r3, #1
 800bea0:	4a29      	ldr	r2, [pc, #164]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800bea2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800bea4:	2374      	movs	r3, #116	; 0x74
 800bea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea8:	2302      	movs	r3, #2
 800beaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beac:	2300      	movs	r3, #0
 800beae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beb0:	2303      	movs	r3, #3
 800beb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800beb4:	230d      	movs	r3, #13
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800beb8:	f107 0314 	add.w	r3, r7, #20
 800bebc:	4619      	mov	r1, r3
 800bebe:	4824      	ldr	r0, [pc, #144]	; (800bf50 <HAL_SAI_MspInit+0xe8>)
 800bec0:	f7f4 fd1a 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800bec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beca:	2302      	movs	r3, #2
 800becc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bed2:	2300      	movs	r3, #0
 800bed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800bed6:	230d      	movs	r3, #13
 800bed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800beda:	f107 0314 	add.w	r3, r7, #20
 800bede:	4619      	mov	r1, r3
 800bee0:	481b      	ldr	r0, [pc, #108]	; (800bf50 <HAL_SAI_MspInit+0xe8>)
 800bee2:	f7f4 fd09 	bl	80008f8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a1a      	ldr	r2, [pc, #104]	; (800bf54 <HAL_SAI_MspInit+0xec>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d124      	bne.n	800bf3a <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800bef0:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10b      	bne.n	800bf10 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800bef8:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800befa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800befc:	4a13      	ldr	r2, [pc, #76]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800befe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf02:	6613      	str	r3, [r2, #96]	; 0x60
 800bf04:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <HAL_SAI_MspInit+0xe4>)
 800bf06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800bf10:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3301      	adds	r3, #1
 800bf16:	4a0c      	ldr	r2, [pc, #48]	; (800bf48 <HAL_SAI_MspInit+0xe0>)
 800bf18:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800bf1a:	2380      	movs	r3, #128	; 0x80
 800bf1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf1e:	2302      	movs	r3, #2
 800bf20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf26:	2303      	movs	r3, #3
 800bf28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800bf2a:	230d      	movs	r3, #13
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800bf2e:	f107 0314 	add.w	r3, r7, #20
 800bf32:	4619      	mov	r1, r3
 800bf34:	4806      	ldr	r0, [pc, #24]	; (800bf50 <HAL_SAI_MspInit+0xe8>)
 800bf36:	f7f4 fcdf 	bl	80008f8 <HAL_GPIO_Init>

    }
}
 800bf3a:	bf00      	nop
 800bf3c:	3728      	adds	r7, #40	; 0x28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	40015404 	.word	0x40015404
 800bf48:	20000db8 	.word	0x20000db8
 800bf4c:	40021000 	.word	0x40021000
 800bf50:	48001000 	.word	0x48001000
 800bf54:	40015424 	.word	0x40015424

0800bf58 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800bf5c:	4b1b      	ldr	r3, [pc, #108]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf5e:	4a1c      	ldr	r2, [pc, #112]	; (800bfd0 <MX_SPI2_Init+0x78>)
 800bf60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800bf62:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf64:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bf68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800bf6a:	4b18      	ldr	r3, [pc, #96]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800bf70:	4b16      	ldr	r3, [pc, #88]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf72:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bf76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf78:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800bf84:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bf8c:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bf92:	4b0e      	ldr	r3, [pc, #56]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800bf98:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf9e:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bfa6:	2207      	movs	r2, #7
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bfaa:	4b08      	ldr	r3, [pc, #32]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bfb0:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bfb2:	2208      	movs	r2, #8
 800bfb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800bfb6:	4805      	ldr	r0, [pc, #20]	; (800bfcc <MX_SPI2_Init+0x74>)
 800bfb8:	f7f8 ff52 	bl	8004e60 <HAL_SPI_Init>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800bfc2:	f7ff fd37 	bl	800ba34 <Error_Handler>
  }

}
 800bfc6:	bf00      	nop
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000ffc 	.word	0x20000ffc
 800bfd0:	40003800 	.word	0x40003800

0800bfd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	; 0x28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfdc:	f107 0314 	add.w	r3, r7, #20
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	605a      	str	r2, [r3, #4]
 800bfe6:	609a      	str	r2, [r3, #8]
 800bfe8:	60da      	str	r2, [r3, #12]
 800bfea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a17      	ldr	r2, [pc, #92]	; (800c050 <HAL_SPI_MspInit+0x7c>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d127      	bne.n	800c046 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bff6:	4b17      	ldr	r3, [pc, #92]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800bff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffa:	4a16      	ldr	r2, [pc, #88]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800bffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c000:	6593      	str	r3, [r2, #88]	; 0x58
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800c004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c00e:	4b11      	ldr	r3, [pc, #68]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800c010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c012:	4a10      	ldr	r2, [pc, #64]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800c014:	f043 0308 	orr.w	r3, r3, #8
 800c018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c01a:	4b0e      	ldr	r3, [pc, #56]	; (800c054 <HAL_SPI_MspInit+0x80>)
 800c01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01e:	f003 0308 	and.w	r3, r3, #8
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800c026:	231a      	movs	r3, #26
 800c028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c02a:	2302      	movs	r3, #2
 800c02c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c032:	2303      	movs	r3, #3
 800c034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c036:	2305      	movs	r3, #5
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c03a:	f107 0314 	add.w	r3, r7, #20
 800c03e:	4619      	mov	r1, r3
 800c040:	4805      	ldr	r0, [pc, #20]	; (800c058 <HAL_SPI_MspInit+0x84>)
 800c042:	f7f4 fc59 	bl	80008f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c046:	bf00      	nop
 800c048:	3728      	adds	r7, #40	; 0x28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	40003800 	.word	0x40003800
 800c054:	40021000 	.word	0x40021000
 800c058:	48000c00 	.word	0x48000c00

0800c05c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c062:	4b11      	ldr	r3, [pc, #68]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c066:	4a10      	ldr	r2, [pc, #64]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c068:	f043 0301 	orr.w	r3, r3, #1
 800c06c:	6613      	str	r3, [r2, #96]	; 0x60
 800c06e:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	607b      	str	r3, [r7, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c07e:	4a0a      	ldr	r2, [pc, #40]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c084:	6593      	str	r3, [r2, #88]	; 0x58
 800c086:	4b08      	ldr	r3, [pc, #32]	; (800c0a8 <HAL_MspInit+0x4c>)
 800c088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c092:	2200      	movs	r2, #0
 800c094:	210f      	movs	r1, #15
 800c096:	f06f 0001 	mvn.w	r0, #1
 800c09a:	f7f4 fb31 	bl	8000700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	40021000 	.word	0x40021000

0800c0ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b08c      	sub	sp, #48	; 0x30
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800c0bc:	2200      	movs	r2, #0
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	2019      	movs	r0, #25
 800c0c2:	f7f4 fb1d 	bl	8000700 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800c0c6:	2019      	movs	r0, #25
 800c0c8:	f7f4 fb36 	bl	8000738 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c0cc:	4b1e      	ldr	r3, [pc, #120]	; (800c148 <HAL_InitTick+0x9c>)
 800c0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0d0:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <HAL_InitTick+0x9c>)
 800c0d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c0d6:	6613      	str	r3, [r2, #96]	; 0x60
 800c0d8:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <HAL_InitTick+0x9c>)
 800c0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c0e4:	f107 0210 	add.w	r2, r7, #16
 800c0e8:	f107 0314 	add.w	r3, r7, #20
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f7 fa7a 	bl	80035e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800c0f4:	f7f7 fa62 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 800c0f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fc:	4a13      	ldr	r2, [pc, #76]	; (800c14c <HAL_InitTick+0xa0>)
 800c0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c102:	0c9b      	lsrs	r3, r3, #18
 800c104:	3b01      	subs	r3, #1
 800c106:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c108:	4b11      	ldr	r3, [pc, #68]	; (800c150 <HAL_InitTick+0xa4>)
 800c10a:	4a12      	ldr	r2, [pc, #72]	; (800c154 <HAL_InitTick+0xa8>)
 800c10c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <HAL_InitTick+0xa4>)
 800c110:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c114:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c116:	4a0e      	ldr	r2, [pc, #56]	; (800c150 <HAL_InitTick+0xa4>)
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800c11c:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <HAL_InitTick+0xa4>)
 800c11e:	2200      	movs	r2, #0
 800c120:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <HAL_InitTick+0xa4>)
 800c124:	2200      	movs	r2, #0
 800c126:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800c128:	4809      	ldr	r0, [pc, #36]	; (800c150 <HAL_InitTick+0xa4>)
 800c12a:	f7f8 ff23 	bl	8004f74 <HAL_TIM_Base_Init>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d104      	bne.n	800c13e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800c134:	4806      	ldr	r0, [pc, #24]	; (800c150 <HAL_InitTick+0xa4>)
 800c136:	f7f8 ff53 	bl	8004fe0 <HAL_TIM_Base_Start_IT>
 800c13a:	4603      	mov	r3, r0
 800c13c:	e000      	b.n	800c140 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
}
 800c140:	4618      	mov	r0, r3
 800c142:	3730      	adds	r7, #48	; 0x30
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	40021000 	.word	0x40021000
 800c14c:	431bde83 	.word	0x431bde83
 800c150:	20001060 	.word	0x20001060
 800c154:	40012c00 	.word	0x40012c00

0800c158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c158:	b480      	push	{r7}
 800c15a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c15c:	bf00      	nop
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c166:	b480      	push	{r7}
 800c168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c16a:	e7fe      	b.n	800c16a <HardFault_Handler+0x4>

0800c16c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c170:	e7fe      	b.n	800c170 <MemManage_Handler+0x4>

0800c172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c172:	b480      	push	{r7}
 800c174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c176:	e7fe      	b.n	800c176 <BusFault_Handler+0x4>

0800c178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c17c:	e7fe      	b.n	800c17c <UsageFault_Handler+0x4>

0800c17e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c17e:	b480      	push	{r7}
 800c180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c182:	bf00      	nop
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c190:	4802      	ldr	r0, [pc, #8]	; (800c19c <TIM1_UP_TIM16_IRQHandler+0x10>)
 800c192:	f7f8 ff4f 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800c196:	bf00      	nop
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20001060 	.word	0x20001060

0800c1a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c1a4:	4802      	ldr	r0, [pc, #8]	; (800c1b0 <USART2_IRQHandler+0x10>)
 800c1a6:	f7f9 fa0f 	bl	80055c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800c1aa:	bf00      	nop
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200010a0 	.word	0x200010a0

0800c1b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800c1b8:	4802      	ldr	r0, [pc, #8]	; (800c1c4 <OTG_FS_IRQHandler+0x10>)
 800c1ba:	f7f4 ffdf 	bl	800117c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c1be:	bf00      	nop
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200014f8 	.word	0x200014f8

0800c1c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c1d0:	4b11      	ldr	r3, [pc, #68]	; (800c218 <_sbrk+0x50>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <_sbrk+0x16>
		heap_end = &end;
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <_sbrk+0x50>)
 800c1da:	4a10      	ldr	r2, [pc, #64]	; (800c21c <_sbrk+0x54>)
 800c1dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c1de:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <_sbrk+0x50>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <_sbrk+0x50>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	466a      	mov	r2, sp
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d907      	bls.n	800c202 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c1f2:	f000 fbf5 	bl	800c9e0 <__errno>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c200:	e006      	b.n	800c210 <_sbrk+0x48>
	}

	heap_end += incr;
 800c202:	4b05      	ldr	r3, [pc, #20]	; (800c218 <_sbrk+0x50>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4413      	add	r3, r2
 800c20a:	4a03      	ldr	r2, [pc, #12]	; (800c218 <_sbrk+0x50>)
 800c20c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c20e:	68fb      	ldr	r3, [r7, #12]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	20000dbc 	.word	0x20000dbc
 800c21c:	200017c0 	.word	0x200017c0

0800c220 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c224:	4b17      	ldr	r3, [pc, #92]	; (800c284 <SystemInit+0x64>)
 800c226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c22a:	4a16      	ldr	r2, [pc, #88]	; (800c284 <SystemInit+0x64>)
 800c22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800c234:	4b14      	ldr	r3, [pc, #80]	; (800c288 <SystemInit+0x68>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a13      	ldr	r2, [pc, #76]	; (800c288 <SystemInit+0x68>)
 800c23a:	f043 0301 	orr.w	r3, r3, #1
 800c23e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800c240:	4b11      	ldr	r3, [pc, #68]	; (800c288 <SystemInit+0x68>)
 800c242:	2200      	movs	r2, #0
 800c244:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800c246:	4b10      	ldr	r3, [pc, #64]	; (800c288 <SystemInit+0x68>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a0f      	ldr	r2, [pc, #60]	; (800c288 <SystemInit+0x68>)
 800c24c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800c250:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800c254:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <SystemInit+0x68>)
 800c258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c25c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <SystemInit+0x68>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a09      	ldr	r2, [pc, #36]	; (800c288 <SystemInit+0x68>)
 800c264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c268:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <SystemInit+0x68>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c270:	4b04      	ldr	r3, [pc, #16]	; (800c284 <SystemInit+0x64>)
 800c272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c276:	609a      	str	r2, [r3, #8]
#endif
}
 800c278:	bf00      	nop
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	e000ed00 	.word	0xe000ed00
 800c288:	40021000 	.word	0x40021000

0800c28c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800c290:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c292:	4a15      	ldr	r2, [pc, #84]	; (800c2e8 <MX_USART2_UART_Init+0x5c>)
 800c294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c296:	4b13      	ldr	r3, [pc, #76]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c29c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c29e:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c2aa:	4b0e      	ldr	r3, [pc, #56]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c2b0:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2b2:	220c      	movs	r2, #12
 800c2b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2bc:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c2c2:	4b08      	ldr	r3, [pc, #32]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2c8:	4b06      	ldr	r3, [pc, #24]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c2ce:	4805      	ldr	r0, [pc, #20]	; (800c2e4 <MX_USART2_UART_Init+0x58>)
 800c2d0:	f7f9 f8b0 	bl	8005434 <HAL_UART_Init>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c2da:	f7ff fbab 	bl	800ba34 <Error_Handler>
  }

}
 800c2de:	bf00      	nop
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	200010a0 	.word	0x200010a0
 800c2e8:	40004400 	.word	0x40004400

0800c2ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08a      	sub	sp, #40	; 0x28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	609a      	str	r2, [r3, #8]
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a1b      	ldr	r2, [pc, #108]	; (800c378 <HAL_UART_MspInit+0x8c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d130      	bne.n	800c370 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c30e:	4b1b      	ldr	r3, [pc, #108]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c312:	4a1a      	ldr	r2, [pc, #104]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c318:	6593      	str	r3, [r2, #88]	; 0x58
 800c31a:	4b18      	ldr	r3, [pc, #96]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c322:	613b      	str	r3, [r7, #16]
 800c324:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c326:	4b15      	ldr	r3, [pc, #84]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32a:	4a14      	ldr	r2, [pc, #80]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c32c:	f043 0301 	orr.w	r3, r3, #1
 800c330:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c332:	4b12      	ldr	r3, [pc, #72]	; (800c37c <HAL_UART_MspInit+0x90>)
 800c334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800c33e:	230c      	movs	r3, #12
 800c340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c342:	2302      	movs	r3, #2
 800c344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c346:	2301      	movs	r3, #1
 800c348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c34a:	2303      	movs	r3, #3
 800c34c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c34e:	2307      	movs	r3, #7
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c352:	f107 0314 	add.w	r3, r7, #20
 800c356:	4619      	mov	r1, r3
 800c358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c35c:	f7f4 facc 	bl	80008f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800c360:	2200      	movs	r2, #0
 800c362:	2105      	movs	r1, #5
 800c364:	2026      	movs	r0, #38	; 0x26
 800c366:	f7f4 f9cb 	bl	8000700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c36a:	2026      	movs	r0, #38	; 0x26
 800c36c:	f7f4 f9e4 	bl	8000738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c370:	bf00      	nop
 800c372:	3728      	adds	r7, #40	; 0x28
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	40004400 	.word	0x40004400
 800c37c:	40021000 	.word	0x40021000

0800c380 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c384:	2201      	movs	r2, #1
 800c386:	490e      	ldr	r1, [pc, #56]	; (800c3c0 <MX_USB_HOST_Init+0x40>)
 800c388:	480e      	ldr	r0, [pc, #56]	; (800c3c4 <MX_USB_HOST_Init+0x44>)
 800c38a:	f7fb f9dd 	bl	8007748 <USBH_Init>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c394:	f7ff fb4e 	bl	800ba34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c398:	490b      	ldr	r1, [pc, #44]	; (800c3c8 <MX_USB_HOST_Init+0x48>)
 800c39a:	480a      	ldr	r0, [pc, #40]	; (800c3c4 <MX_USB_HOST_Init+0x44>)
 800c39c:	f7fb fa6f 	bl	800787e <USBH_RegisterClass>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c3a6:	f7ff fb45 	bl	800ba34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c3aa:	4806      	ldr	r0, [pc, #24]	; (800c3c4 <MX_USB_HOST_Init+0x44>)
 800c3ac:	f7fb faf4 	bl	8007998 <USBH_Start>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c3b6:	f7ff fb3d 	bl	800ba34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c3ba:	bf00      	nop
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	0800c3cd 	.word	0x0800c3cd
 800c3c4:	20001120 	.word	0x20001120
 800c3c8:	20000008 	.word	0x20000008

0800c3cc <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d819      	bhi.n	800c414 <USBH_UserProcess+0x48>
 800c3e0:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <USBH_UserProcess+0x1c>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c415 	.word	0x0800c415
 800c3ec:	0800c405 	.word	0x0800c405
 800c3f0:	0800c415 	.word	0x0800c415
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c3fd 	.word	0x0800c3fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c3fc:	4b09      	ldr	r3, [pc, #36]	; (800c424 <USBH_UserProcess+0x58>)
 800c3fe:	2203      	movs	r2, #3
 800c400:	701a      	strb	r2, [r3, #0]
  break;
 800c402:	e008      	b.n	800c416 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c404:	4b07      	ldr	r3, [pc, #28]	; (800c424 <USBH_UserProcess+0x58>)
 800c406:	2202      	movs	r2, #2
 800c408:	701a      	strb	r2, [r3, #0]
  break;
 800c40a:	e004      	b.n	800c416 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c40c:	4b05      	ldr	r3, [pc, #20]	; (800c424 <USBH_UserProcess+0x58>)
 800c40e:	2201      	movs	r2, #1
 800c410:	701a      	strb	r2, [r3, #0]
  break;
 800c412:	e000      	b.n	800c416 <USBH_UserProcess+0x4a>

  default:
  break;
 800c414:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20000dc0 	.word	0x20000dc0

0800c428 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08a      	sub	sp, #40	; 0x28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c430:	f107 0314 	add.w	r3, r7, #20
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	609a      	str	r2, [r3, #8]
 800c43c:	60da      	str	r2, [r3, #12]
 800c43e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c448:	d14e      	bne.n	800c4e8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c44a:	4b29      	ldr	r3, [pc, #164]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	4a28      	ldr	r2, [pc, #160]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c450:	f043 0301 	orr.w	r3, r3, #1
 800c454:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c456:	4b26      	ldr	r3, [pc, #152]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	613b      	str	r3, [r7, #16]
 800c460:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c462:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c468:	2302      	movs	r3, #2
 800c46a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c470:	2303      	movs	r3, #3
 800c472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c474:	230a      	movs	r3, #10
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c478:	f107 0314 	add.w	r3, r7, #20
 800c47c:	4619      	mov	r1, r3
 800c47e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c482:	f7f4 fa39 	bl	80008f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c486:	4b1a      	ldr	r3, [pc, #104]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48a:	4a19      	ldr	r2, [pc, #100]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c48c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c490:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c492:	4b17      	ldr	r3, [pc, #92]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d114      	bne.n	800c4d4 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4aa:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ae:	4a10      	ldr	r2, [pc, #64]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4b4:	6593      	str	r3, [r2, #88]	; 0x58
 800c4b6:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4be:	60bb      	str	r3, [r7, #8]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c4c2:	f7f6 fa65 	bl	8002990 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ca:	4a09      	ldr	r2, [pc, #36]	; (800c4f0 <HAL_HCD_MspInit+0xc8>)
 800c4cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4d0:	6593      	str	r3, [r2, #88]	; 0x58
 800c4d2:	e001      	b.n	800c4d8 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c4d4:	f7f6 fa5c 	bl	8002990 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c4d8:	2200      	movs	r2, #0
 800c4da:	2105      	movs	r1, #5
 800c4dc:	2043      	movs	r0, #67	; 0x43
 800c4de:	f7f4 f90f 	bl	8000700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4e2:	2043      	movs	r0, #67	; 0x43
 800c4e4:	f7f4 f928 	bl	8000738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4e8:	bf00      	nop
 800c4ea:	3728      	adds	r7, #40	; 0x28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	40021000 	.word	0x40021000

0800c4f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c502:	4618      	mov	r0, r3
 800c504:	f7fb fd9b 	bl	800803e <USBH_LL_IncTimer>
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fb fde0 	bl	80080e4 <USBH_LL_Connect>
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fb fe06 	bl	800814c <USBH_LL_Disconnect>
}
 800c540:	bf00      	nop
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
 800c554:	4613      	mov	r3, r2
 800c556:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fb fe44 	bl	80081ec <USBH_LL_NotifyURBChange>
#endif
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fb fd89 	bl	8008092 <USBH_LL_PortEnabled>
} 
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c596:	4618      	mov	r0, r3
 800c598:	f7fb fd89 	bl	80080ae <USBH_LL_PortDisabled>
} 
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d12a      	bne.n	800c60c <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c5b6:	4a18      	ldr	r2, [pc, #96]	; (800c618 <USBH_LL_Init+0x74>)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a15      	ldr	r2, [pc, #84]	; (800c618 <USBH_LL_Init+0x74>)
 800c5c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <USBH_LL_Init+0x74>)
 800c5c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c5cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c5ce:	4b12      	ldr	r3, [pc, #72]	; (800c618 <USBH_LL_Init+0x74>)
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c5d4:	4b10      	ldr	r3, [pc, #64]	; (800c618 <USBH_LL_Init+0x74>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c5da:	4b0f      	ldr	r3, [pc, #60]	; (800c618 <USBH_LL_Init+0x74>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c5e0:	4b0d      	ldr	r3, [pc, #52]	; (800c618 <USBH_LL_Init+0x74>)
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c5e6:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <USBH_LL_Init+0x74>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c5ec:	480a      	ldr	r0, [pc, #40]	; (800c618 <USBH_LL_Init+0x74>)
 800c5ee:	f7f4 fb43 	bl	8000c78 <HAL_HCD_Init>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c5f8:	f7ff fa1c 	bl	800ba34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c5fc:	4806      	ldr	r0, [pc, #24]	; (800c618 <USBH_LL_Init+0x74>)
 800c5fe:	f7f4 ff3b 	bl	8001478 <HAL_HCD_GetCurrentFrame>
 800c602:	4603      	mov	r3, r0
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7fb fd0a 	bl	8008020 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200014f8 	.word	0x200014f8

0800c61c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c632:	4618      	mov	r0, r3
 800c634:	f7f4 fea8 	bl	8001388 <HAL_HCD_Start>
 800c638:	4603      	mov	r3, r0
 800c63a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f95c 	bl	800c8fc <USBH_Get_USB_Status>
 800c644:	4603      	mov	r3, r0
 800c646:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c648:	7bbb      	ldrb	r3, [r7, #14]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f4 feb0 	bl	80013ce <HAL_HCD_Stop>
 800c66e:	4603      	mov	r3, r0
 800c670:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f941 	bl	800c8fc <USBH_Get_USB_Status>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c690:	2301      	movs	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f4 fefa 	bl	8001494 <HAL_HCD_GetCurrentSpeed>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d007      	beq.n	800c6b6 <USBH_LL_GetSpeed+0x2e>
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d302      	bcc.n	800c6b0 <USBH_LL_GetSpeed+0x28>
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d006      	beq.n	800c6bc <USBH_LL_GetSpeed+0x34>
 800c6ae:	e008      	b.n	800c6c2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b4:	e008      	b.n	800c6c8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ba:	e005      	b.n	800c6c8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c0:	e002      	b.n	800c6c8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c6:	bf00      	nop
  }
  return  speed;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f4 fe8d 	bl	8001408 <HAL_HCD_ResetPort>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f901 	bl	800c8fc <USBH_Get_USB_Status>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c71a:	78fa      	ldrb	r2, [r7, #3]
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f4 fe95 	bl	800144e <HAL_HCD_HC_GetXferCount>
 800c724:	4603      	mov	r3, r0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c72e:	b590      	push	{r4, r7, lr}
 800c730:	b089      	sub	sp, #36	; 0x24
 800c732:	af04      	add	r7, sp, #16
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	461a      	mov	r2, r3
 800c73c:	4603      	mov	r3, r0
 800c73e:	70fb      	strb	r3, [r7, #3]
 800c740:	460b      	mov	r3, r1
 800c742:	70bb      	strb	r3, [r7, #2]
 800c744:	4613      	mov	r3, r2
 800c746:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c756:	787c      	ldrb	r4, [r7, #1]
 800c758:	78ba      	ldrb	r2, [r7, #2]
 800c75a:	78f9      	ldrb	r1, [r7, #3]
 800c75c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c75e:	9302      	str	r3, [sp, #8]
 800c760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	4623      	mov	r3, r4
 800c76e:	f7f4 fae5 	bl	8000d3c <HAL_HCD_HC_Init>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 f8bf 	bl	800c8fc <USBH_Get_USB_Status>
 800c77e:	4603      	mov	r3, r0
 800c780:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c782:	7bbb      	ldrb	r3, [r7, #14]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd90      	pop	{r4, r7, pc}

0800c78c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c7a6:	78fa      	ldrb	r2, [r7, #3]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f4 fb5e 	bl	8000e6c <HAL_HCD_HC_Halt>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 f8a0 	bl	800c8fc <USBH_Get_USB_Status>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c7ca:	b590      	push	{r4, r7, lr}
 800c7cc:	b089      	sub	sp, #36	; 0x24
 800c7ce:	af04      	add	r7, sp, #16
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	4603      	mov	r3, r0
 800c7da:	70fb      	strb	r3, [r7, #3]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70bb      	strb	r3, [r7, #2]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c7f2:	787c      	ldrb	r4, [r7, #1]
 800c7f4:	78ba      	ldrb	r2, [r7, #2]
 800c7f6:	78f9      	ldrb	r1, [r7, #3]
 800c7f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7fc:	9303      	str	r3, [sp, #12]
 800c7fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c800:	9302      	str	r3, [sp, #8]
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	4623      	mov	r3, r4
 800c80e:	f7f4 fb51 	bl	8000eb4 <HAL_HCD_HC_SubmitRequest>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 f86f 	bl	800c8fc <USBH_Get_USB_Status>
 800c81e:	4603      	mov	r3, r0
 800c820:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c822:	7bbb      	ldrb	r3, [r7, #14]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd90      	pop	{r4, r7, pc}

0800c82c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f7f4 fdee 	bl	8001424 <HAL_HCD_HC_GetURBState>
 800c848:	4603      	mov	r3, r0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	460b      	mov	r3, r1
 800c85c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c864:	2b01      	cmp	r3, #1
 800c866:	d103      	bne.n	800c870 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 f872 	bl	800c954 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c870:	20c8      	movs	r0, #200	; 0xc8
 800c872:	f7f3 fe6b 	bl	800054c <HAL_Delay>
  return USBH_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
 800c88c:	4613      	mov	r3, r2
 800c88e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c896:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	00db      	lsls	r3, r3, #3
 800c8a4:	440b      	add	r3, r1
 800c8a6:	333b      	adds	r3, #59	; 0x3b
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c8ae:	78fa      	ldrb	r2, [r7, #3]
 800c8b0:	68f9      	ldr	r1, [r7, #12]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	440b      	add	r3, r1
 800c8bc:	3350      	adds	r3, #80	; 0x50
 800c8be:	78ba      	ldrb	r2, [r7, #2]
 800c8c0:	701a      	strb	r2, [r3, #0]
 800c8c2:	e009      	b.n	800c8d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c8c4:	78fa      	ldrb	r2, [r7, #3]
 800c8c6:	68f9      	ldr	r1, [r7, #12]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	440b      	add	r3, r1
 800c8d2:	3351      	adds	r3, #81	; 0x51
 800c8d4:	78ba      	ldrb	r2, [r7, #2]
 800c8d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7f3 fe2c 	bl	800054c <HAL_Delay>
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d817      	bhi.n	800c940 <USBH_Get_USB_Status+0x44>
 800c910:	a201      	add	r2, pc, #4	; (adr r2, 800c918 <USBH_Get_USB_Status+0x1c>)
 800c912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c916:	bf00      	nop
 800c918:	0800c929 	.word	0x0800c929
 800c91c:	0800c92f 	.word	0x0800c92f
 800c920:	0800c935 	.word	0x0800c935
 800c924:	0800c93b 	.word	0x0800c93b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	73fb      	strb	r3, [r7, #15]
    break;
 800c92c:	e00b      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c92e:	2302      	movs	r3, #2
 800c930:	73fb      	strb	r3, [r7, #15]
    break;
 800c932:	e008      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c934:	2301      	movs	r3, #1
 800c936:	73fb      	strb	r3, [r7, #15]
    break;
 800c938:	e005      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c93a:	2302      	movs	r3, #2
 800c93c:	73fb      	strb	r3, [r7, #15]
    break;
 800c93e:	e002      	b.n	800c946 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c940:	2302      	movs	r3, #2
 800c942:	73fb      	strb	r3, [r7, #15]
    break;
 800c944:	bf00      	nop
  }
  return usb_status;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	4603      	mov	r3, r0
 800c95c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c962:	79fb      	ldrb	r3, [r7, #7]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d102      	bne.n	800c96e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800c968:	2301      	movs	r3, #1
 800c96a:	73fb      	strb	r3, [r7, #15]
 800c96c:	e001      	b.n	800c972 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	461a      	mov	r2, r3
 800c976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c97a:	4803      	ldr	r0, [pc, #12]	; (800c988 <MX_DriverVbusFS+0x34>)
 800c97c:	f7f4 f964 	bl	8000c48 <HAL_GPIO_WritePin>
}
 800c980:	bf00      	nop
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	48000800 	.word	0x48000800

0800c98c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c98c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c9c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c990:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c992:	e003      	b.n	800c99c <LoopCopyDataInit>

0800c994 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c994:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c996:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c998:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c99a:	3104      	adds	r1, #4

0800c99c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c99c:	480b      	ldr	r0, [pc, #44]	; (800c9cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800c99e:	4b0c      	ldr	r3, [pc, #48]	; (800c9d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c9a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c9a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c9a4:	d3f6      	bcc.n	800c994 <CopyDataInit>
	ldr	r2, =_sbss
 800c9a6:	4a0b      	ldr	r2, [pc, #44]	; (800c9d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c9a8:	e002      	b.n	800c9b0 <LoopFillZerobss>

0800c9aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c9aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c9ac:	f842 3b04 	str.w	r3, [r2], #4

0800c9b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c9b0:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <LoopForever+0x16>)
	cmp	r2, r3
 800c9b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c9b4:	d3f9      	bcc.n	800c9aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c9b6:	f7ff fc33 	bl	800c220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c9ba:	f000 f817 	bl	800c9ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c9be:	f7fe ff75 	bl	800b8ac <main>

0800c9c2 <LoopForever>:

LoopForever:
    b LoopForever
 800c9c2:	e7fe      	b.n	800c9c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c9c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c9c8:	0800cccc 	.word	0x0800cccc
	ldr	r0, =_sdata
 800c9cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c9d0:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 800c9d4:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 800c9d8:	200017c0 	.word	0x200017c0

0800c9dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c9dc:	e7fe      	b.n	800c9dc <ADC1_2_IRQHandler>
	...

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	; (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20000030 	.word	0x20000030

0800c9ec <__libc_init_array>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	4e0d      	ldr	r6, [pc, #52]	; (800ca24 <__libc_init_array+0x38>)
 800c9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ca28 <__libc_init_array+0x3c>)
 800c9f2:	1ba4      	subs	r4, r4, r6
 800c9f4:	10a4      	asrs	r4, r4, #2
 800c9f6:	2500      	movs	r5, #0
 800c9f8:	42a5      	cmp	r5, r4
 800c9fa:	d109      	bne.n	800ca10 <__libc_init_array+0x24>
 800c9fc:	4e0b      	ldr	r6, [pc, #44]	; (800ca2c <__libc_init_array+0x40>)
 800c9fe:	4c0c      	ldr	r4, [pc, #48]	; (800ca30 <__libc_init_array+0x44>)
 800ca00:	f000 f8f6 	bl	800cbf0 <_init>
 800ca04:	1ba4      	subs	r4, r4, r6
 800ca06:	10a4      	asrs	r4, r4, #2
 800ca08:	2500      	movs	r5, #0
 800ca0a:	42a5      	cmp	r5, r4
 800ca0c:	d105      	bne.n	800ca1a <__libc_init_array+0x2e>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca14:	4798      	blx	r3
 800ca16:	3501      	adds	r5, #1
 800ca18:	e7ee      	b.n	800c9f8 <__libc_init_array+0xc>
 800ca1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca1e:	4798      	blx	r3
 800ca20:	3501      	adds	r5, #1
 800ca22:	e7f2      	b.n	800ca0a <__libc_init_array+0x1e>
 800ca24:	0800ccc4 	.word	0x0800ccc4
 800ca28:	0800ccc4 	.word	0x0800ccc4
 800ca2c:	0800ccc4 	.word	0x0800ccc4
 800ca30:	0800ccc8 	.word	0x0800ccc8

0800ca34 <malloc>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <malloc+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f000 b86d 	b.w	800cb18 <_malloc_r>
 800ca3e:	bf00      	nop
 800ca40:	20000030 	.word	0x20000030

0800ca44 <free>:
 800ca44:	4b02      	ldr	r3, [pc, #8]	; (800ca50 <free+0xc>)
 800ca46:	4601      	mov	r1, r0
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	f000 b817 	b.w	800ca7c <_free_r>
 800ca4e:	bf00      	nop
 800ca50:	20000030 	.word	0x20000030

0800ca54 <memcpy>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	1e43      	subs	r3, r0, #1
 800ca58:	440a      	add	r2, r1
 800ca5a:	4291      	cmp	r1, r2
 800ca5c:	d100      	bne.n	800ca60 <memcpy+0xc>
 800ca5e:	bd10      	pop	{r4, pc}
 800ca60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca68:	e7f7      	b.n	800ca5a <memcpy+0x6>

0800ca6a <memset>:
 800ca6a:	4402      	add	r2, r0
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d100      	bne.n	800ca74 <memset+0xa>
 800ca72:	4770      	bx	lr
 800ca74:	f803 1b01 	strb.w	r1, [r3], #1
 800ca78:	e7f9      	b.n	800ca6e <memset+0x4>
	...

0800ca7c <_free_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4605      	mov	r5, r0
 800ca80:	2900      	cmp	r1, #0
 800ca82:	d045      	beq.n	800cb10 <_free_r+0x94>
 800ca84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca88:	1f0c      	subs	r4, r1, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bfb8      	it	lt
 800ca8e:	18e4      	addlt	r4, r4, r3
 800ca90:	f000 f8ac 	bl	800cbec <__malloc_lock>
 800ca94:	4a1f      	ldr	r2, [pc, #124]	; (800cb14 <_free_r+0x98>)
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	b933      	cbnz	r3, 800caaa <_free_r+0x2e>
 800ca9c:	6063      	str	r3, [r4, #4]
 800ca9e:	6014      	str	r4, [r2, #0]
 800caa0:	4628      	mov	r0, r5
 800caa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa6:	f000 b8a2 	b.w	800cbee <__malloc_unlock>
 800caaa:	42a3      	cmp	r3, r4
 800caac:	d90c      	bls.n	800cac8 <_free_r+0x4c>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	1862      	adds	r2, r4, r1
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf04      	itt	eq
 800cab6:	681a      	ldreq	r2, [r3, #0]
 800cab8:	685b      	ldreq	r3, [r3, #4]
 800caba:	6063      	str	r3, [r4, #4]
 800cabc:	bf04      	itt	eq
 800cabe:	1852      	addeq	r2, r2, r1
 800cac0:	6022      	streq	r2, [r4, #0]
 800cac2:	6004      	str	r4, [r0, #0]
 800cac4:	e7ec      	b.n	800caa0 <_free_r+0x24>
 800cac6:	4613      	mov	r3, r2
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	b10a      	cbz	r2, 800cad0 <_free_r+0x54>
 800cacc:	42a2      	cmp	r2, r4
 800cace:	d9fa      	bls.n	800cac6 <_free_r+0x4a>
 800cad0:	6819      	ldr	r1, [r3, #0]
 800cad2:	1858      	adds	r0, r3, r1
 800cad4:	42a0      	cmp	r0, r4
 800cad6:	d10b      	bne.n	800caf0 <_free_r+0x74>
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4401      	add	r1, r0
 800cadc:	1858      	adds	r0, r3, r1
 800cade:	4282      	cmp	r2, r0
 800cae0:	6019      	str	r1, [r3, #0]
 800cae2:	d1dd      	bne.n	800caa0 <_free_r+0x24>
 800cae4:	6810      	ldr	r0, [r2, #0]
 800cae6:	6852      	ldr	r2, [r2, #4]
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	4401      	add	r1, r0
 800caec:	6019      	str	r1, [r3, #0]
 800caee:	e7d7      	b.n	800caa0 <_free_r+0x24>
 800caf0:	d902      	bls.n	800caf8 <_free_r+0x7c>
 800caf2:	230c      	movs	r3, #12
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	e7d3      	b.n	800caa0 <_free_r+0x24>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	1821      	adds	r1, r4, r0
 800cafc:	428a      	cmp	r2, r1
 800cafe:	bf04      	itt	eq
 800cb00:	6811      	ldreq	r1, [r2, #0]
 800cb02:	6852      	ldreq	r2, [r2, #4]
 800cb04:	6062      	str	r2, [r4, #4]
 800cb06:	bf04      	itt	eq
 800cb08:	1809      	addeq	r1, r1, r0
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	605c      	str	r4, [r3, #4]
 800cb0e:	e7c7      	b.n	800caa0 <_free_r+0x24>
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	20000dc4 	.word	0x20000dc4

0800cb18 <_malloc_r>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	1ccd      	adds	r5, r1, #3
 800cb1c:	f025 0503 	bic.w	r5, r5, #3
 800cb20:	3508      	adds	r5, #8
 800cb22:	2d0c      	cmp	r5, #12
 800cb24:	bf38      	it	cc
 800cb26:	250c      	movcc	r5, #12
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	db01      	blt.n	800cb32 <_malloc_r+0x1a>
 800cb2e:	42a9      	cmp	r1, r5
 800cb30:	d903      	bls.n	800cb3a <_malloc_r+0x22>
 800cb32:	230c      	movs	r3, #12
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	2000      	movs	r0, #0
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	f000 f857 	bl	800cbec <__malloc_lock>
 800cb3e:	4a21      	ldr	r2, [pc, #132]	; (800cbc4 <_malloc_r+0xac>)
 800cb40:	6814      	ldr	r4, [r2, #0]
 800cb42:	4621      	mov	r1, r4
 800cb44:	b991      	cbnz	r1, 800cb6c <_malloc_r+0x54>
 800cb46:	4c20      	ldr	r4, [pc, #128]	; (800cbc8 <_malloc_r+0xb0>)
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	b91b      	cbnz	r3, 800cb54 <_malloc_r+0x3c>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f000 f83d 	bl	800cbcc <_sbrk_r>
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	4629      	mov	r1, r5
 800cb56:	4630      	mov	r0, r6
 800cb58:	f000 f838 	bl	800cbcc <_sbrk_r>
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d124      	bne.n	800cbaa <_malloc_r+0x92>
 800cb60:	230c      	movs	r3, #12
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 f842 	bl	800cbee <__malloc_unlock>
 800cb6a:	e7e4      	b.n	800cb36 <_malloc_r+0x1e>
 800cb6c:	680b      	ldr	r3, [r1, #0]
 800cb6e:	1b5b      	subs	r3, r3, r5
 800cb70:	d418      	bmi.n	800cba4 <_malloc_r+0x8c>
 800cb72:	2b0b      	cmp	r3, #11
 800cb74:	d90f      	bls.n	800cb96 <_malloc_r+0x7e>
 800cb76:	600b      	str	r3, [r1, #0]
 800cb78:	50cd      	str	r5, [r1, r3]
 800cb7a:	18cc      	adds	r4, r1, r3
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f000 f836 	bl	800cbee <__malloc_unlock>
 800cb82:	f104 000b 	add.w	r0, r4, #11
 800cb86:	1d23      	adds	r3, r4, #4
 800cb88:	f020 0007 	bic.w	r0, r0, #7
 800cb8c:	1ac3      	subs	r3, r0, r3
 800cb8e:	d0d3      	beq.n	800cb38 <_malloc_r+0x20>
 800cb90:	425a      	negs	r2, r3
 800cb92:	50e2      	str	r2, [r4, r3]
 800cb94:	e7d0      	b.n	800cb38 <_malloc_r+0x20>
 800cb96:	428c      	cmp	r4, r1
 800cb98:	684b      	ldr	r3, [r1, #4]
 800cb9a:	bf16      	itet	ne
 800cb9c:	6063      	strne	r3, [r4, #4]
 800cb9e:	6013      	streq	r3, [r2, #0]
 800cba0:	460c      	movne	r4, r1
 800cba2:	e7eb      	b.n	800cb7c <_malloc_r+0x64>
 800cba4:	460c      	mov	r4, r1
 800cba6:	6849      	ldr	r1, [r1, #4]
 800cba8:	e7cc      	b.n	800cb44 <_malloc_r+0x2c>
 800cbaa:	1cc4      	adds	r4, r0, #3
 800cbac:	f024 0403 	bic.w	r4, r4, #3
 800cbb0:	42a0      	cmp	r0, r4
 800cbb2:	d005      	beq.n	800cbc0 <_malloc_r+0xa8>
 800cbb4:	1a21      	subs	r1, r4, r0
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f000 f808 	bl	800cbcc <_sbrk_r>
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d0cf      	beq.n	800cb60 <_malloc_r+0x48>
 800cbc0:	6025      	str	r5, [r4, #0]
 800cbc2:	e7db      	b.n	800cb7c <_malloc_r+0x64>
 800cbc4:	20000dc4 	.word	0x20000dc4
 800cbc8:	20000dc8 	.word	0x20000dc8

0800cbcc <_sbrk_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4c06      	ldr	r4, [pc, #24]	; (800cbe8 <_sbrk_r+0x1c>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	f7ff faf6 	bl	800c1c8 <_sbrk>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_sbrk_r+0x1a>
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_sbrk_r+0x1a>
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	200017bc 	.word	0x200017bc

0800cbec <__malloc_lock>:
 800cbec:	4770      	bx	lr

0800cbee <__malloc_unlock>:
 800cbee:	4770      	bx	lr

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
