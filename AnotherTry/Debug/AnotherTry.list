
AnotherTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c914  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800caa4  0800caa4  0001caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb3c  0800cb3c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb44  0800cb44  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb48  0800cb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800cb4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001738  200000a0  0800cbec  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d8  0800cbec  000217d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032080  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006552  00000000  00000000  00052150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002418  00000000  00000000  000586a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  0005aac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000303f7  00000000  00000000  0005cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ce5  00000000  00000000  0008cfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a491  00000000  00000000  000afcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000972c  00000000  00000000  001ba1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca8c 	.word	0x0800ca8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800ca8c 	.word	0x0800ca8c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_Init+0x3c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_Init+0x3c>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f8ff 	bl	80006ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f00b fcf3 	bl	800bed8 <HAL_InitTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fe:	f00b fcc3 	bl	800be88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_IncTick+0x1c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_IncTick+0x20>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4413      	add	r3, r2
 800051e:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x1c>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000de8 	.word	0x20000de8
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return uwTick;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_GetTick+0x14>)
 800053a:	681b      	ldr	r3, [r3, #0]
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000de8 	.word	0x20000de8

0800054c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff ffee 	bl	8000534 <HAL_GetTick>
 8000558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000564:	d004      	beq.n	8000570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_Delay+0x40>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000570:	bf00      	nop
 8000572:	f7ff ffdf 	bl	8000534 <HAL_GetTick>
 8000576:	4602      	mov	r2, r0
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d8f7      	bhi.n	8000572 <HAL_Delay+0x26>
  {
  }
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0b      	blt.n	800061e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <__NVIC_EnableIRQ+0x38>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000e100 	.word	0xe000e100

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff4c 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000712:	f7ff ff61 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000716:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	6978      	ldr	r0, [r7, #20]
 800071e:	f7ff ffb1 	bl	8000684 <NVIC_EncodePriority>
 8000722:	4602      	mov	r2, r0
 8000724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff80 	bl	8000630 <__NVIC_SetPriority>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff54 	bl	80005f4 <__NVIC_EnableIRQ>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b02      	cmp	r3, #2
 800076a:	d005      	beq.n	8000778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2204      	movs	r2, #4
 8000770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e029      	b.n	80007cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f022 020e 	bic.w	r2, r2, #14
 8000786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f022 0201 	bic.w	r2, r2, #1
 8000796:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079c:	f003 021c 	and.w	r2, r3, #28
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	4798      	blx	r3
    }
  }
  return status;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e6:	e17f      	b.n	8000ae8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	2101      	movs	r1, #1
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8171 	beq.w	8000ae2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d003      	beq.n	8000810 <HAL_GPIO_Init+0x38>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b12      	cmp	r3, #18
 800080e:	d123      	bne.n	8000858 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	08da      	lsrs	r2, r3, #3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	220f      	movs	r2, #15
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	08da      	lsrs	r2, r3, #3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3208      	adds	r2, #8
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f003 0203 	and.w	r2, r3, #3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d00b      	beq.n	80008ac <HAL_GPIO_Init+0xd4>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d007      	beq.n	80008ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a0:	2b11      	cmp	r3, #17
 80008a2:	d003      	beq.n	80008ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b12      	cmp	r3, #18
 80008aa:	d130      	bne.n	800090e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e2:	2201      	movs	r2, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 0201 	and.w	r2, r3, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b03      	cmp	r3, #3
 8000918:	d118      	bne.n	800094c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000920:	2201      	movs	r2, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	f003 0201 	and.w	r2, r3, #1
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 80ac 	beq.w	8000ae2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <HAL_GPIO_Init+0x32c>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	4a5d      	ldr	r2, [pc, #372]	; (8000b04 <HAL_GPIO_Init+0x32c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	; 0x60
 8000996:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <HAL_GPIO_Init+0x32c>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a2:	4a59      	ldr	r2, [pc, #356]	; (8000b08 <HAL_GPIO_Init+0x330>)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009cc:	d025      	beq.n	8000a1a <HAL_GPIO_Init+0x242>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <HAL_GPIO_Init+0x334>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d01f      	beq.n	8000a16 <HAL_GPIO_Init+0x23e>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <HAL_GPIO_Init+0x338>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d019      	beq.n	8000a12 <HAL_GPIO_Init+0x23a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_GPIO_Init+0x33c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0x236>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4b      	ldr	r2, [pc, #300]	; (8000b18 <HAL_GPIO_Init+0x340>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00d      	beq.n	8000a0a <HAL_GPIO_Init+0x232>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <HAL_GPIO_Init+0x344>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d007      	beq.n	8000a06 <HAL_GPIO_Init+0x22e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_GPIO_Init+0x348>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_GPIO_Init+0x22a>
 80009fe:	2306      	movs	r3, #6
 8000a00:	e00c      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a02:	2307      	movs	r3, #7
 8000a04:	e00a      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a06:	2305      	movs	r3, #5
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x244>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a2c:	4936      	ldr	r1, [pc, #216]	; (8000b08 <HAL_GPIO_Init+0x330>)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a5e:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a88:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000adc:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <HAL_GPIO_Init+0x34c>)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa22 f303 	lsr.w	r3, r2, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f47f ae78 	bne.w	80007e8 <HAL_GPIO_Init+0x10>
  }
}
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000c00 	.word	0x48000c00
 8000b18:	48001000 	.word	0x48001000
 8000b1c:	48001400 	.word	0x48001400
 8000b20:	48001800 	.word	0x48001800
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00b fa4a 	bl	800c010 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	b08f      	sub	sp, #60	; 0x3c
 8000b8c:	af0a      	add	r7, sp, #40	; 0x28
 8000b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e054      	b.n	8000c44 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f00b fb85 	bl	800c2c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f005 fb0c 	bl	80061f6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	687e      	ldr	r6, [r7, #4]
 8000be6:	466d      	mov	r5, sp
 8000be8:	f106 0410 	add.w	r4, r6, #16
 8000bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfc:	1d33      	adds	r3, r6, #4
 8000bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f005 fa95 	bl	8006130 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 fb03 	bl	8006218 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	687e      	ldr	r6, [r7, #4]
 8000c1a:	466d      	mov	r5, sp
 8000c1c:	f106 0410 	add.w	r4, r6, #16
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c30:	1d33      	adds	r3, r6, #4
 8000c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c34:	6838      	ldr	r0, [r7, #0]
 8000c36:	f005 fc11 	bl	800645c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c4c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	70fb      	strb	r3, [r7, #3]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	70bb      	strb	r3, [r7, #2]
 8000c62:	4613      	mov	r3, r2
 8000c64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_HCD_HC_Init+0x28>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e07f      	b.n	8000d74 <HAL_HCD_HC_Init+0x128>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	333d      	adds	r3, #61	; 0x3d
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c90:	78fa      	ldrb	r2, [r7, #3]
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3338      	adds	r3, #56	; 0x38
 8000ca0:	787a      	ldrb	r2, [r7, #1]
 8000ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000ca4:	78fa      	ldrb	r2, [r7, #3]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3340      	adds	r3, #64	; 0x40
 8000cb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cb6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3339      	adds	r3, #57	; 0x39
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000ccc:	78fa      	ldrb	r2, [r7, #3]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	333f      	adds	r3, #63	; 0x3f
 8000cdc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ce0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	78bb      	ldrb	r3, [r7, #2]
 8000ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cea:	b2d8      	uxtb	r0, r3
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	333a      	adds	r3, #58	; 0x3a
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da0a      	bge.n	8000d1c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	333b      	adds	r3, #59	; 0x3b
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e009      	b.n	8000d30 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d1c:	78fa      	ldrb	r2, [r7, #3]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	333b      	adds	r3, #59	; 0x3b
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	333c      	adds	r3, #60	; 0x3c
 8000d40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d44:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	787c      	ldrb	r4, [r7, #1]
 8000d4c:	78ba      	ldrb	r2, [r7, #2]
 8000d4e:	78f9      	ldrb	r1, [r7, #3]
 8000d50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4623      	mov	r3, r4
 8000d62:	f005 fcbf 	bl	80066e4 <USB_HC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}

08000d7c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_HCD_HC_Halt+0x1e>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e00f      	b.n	8000dba <HAL_HCD_HC_Halt+0x3e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fe9d 	bl	8006aea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	4608      	mov	r0, r1
 8000dce:	4611      	mov	r1, r2
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70bb      	strb	r3, [r7, #2]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	333b      	adds	r3, #59	; 0x3b
 8000dee:	78ba      	ldrb	r2, [r7, #2]
 8000df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	333f      	adds	r3, #63	; 0x3f
 8000e02:	787a      	ldrb	r2, [r7, #1]
 8000e04:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e06:	7c3b      	ldrb	r3, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10a      	bne.n	8000e22 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3342      	adds	r3, #66	; 0x42
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e009      	b.n	8000e36 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3342      	adds	r3, #66	; 0x42
 8000e32:	2202      	movs	r2, #2
 8000e34:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e36:	787b      	ldrb	r3, [r7, #1]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	f200 80d6 	bhi.w	8000fea <HAL_HCD_HC_SubmitRequest+0x226>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000fd5 	.word	0x08000fd5
 8000e4c:	08000ec1 	.word	0x08000ec1
 8000e50:	08000f4b 	.word	0x08000f4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e54:	7c3b      	ldrb	r3, [r7, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 80c9 	bne.w	8000fee <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 80c5 	bne.w	8000fee <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e64:	8b3b      	ldrh	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e6a:	78fa      	ldrb	r2, [r7, #3]
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	440b      	add	r3, r1
 8000e78:	3351      	adds	r3, #81	; 0x51
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3351      	adds	r3, #81	; 0x51
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10a      	bne.n	8000eaa <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e94:	78fa      	ldrb	r2, [r7, #3]
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3342      	adds	r3, #66	; 0x42
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ea8:	e0a1      	b.n	8000fee <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3342      	adds	r3, #66	; 0x42
 8000eba:	2202      	movs	r2, #2
 8000ebc:	701a      	strb	r2, [r3, #0]
      break;
 8000ebe:	e096      	b.n	8000fee <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d120      	bne.n	8000f08 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3351      	adds	r3, #81	; 0x51
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10a      	bne.n	8000ef2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3342      	adds	r3, #66	; 0x42
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000ef0:	e07e      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3342      	adds	r3, #66	; 0x42
 8000f02:	2202      	movs	r2, #2
 8000f04:	701a      	strb	r2, [r3, #0]
      break;
 8000f06:	e073      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3350      	adds	r3, #80	; 0x50
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10a      	bne.n	8000f34 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3342      	adds	r3, #66	; 0x42
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
      break;
 8000f32:	e05d      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3342      	adds	r3, #66	; 0x42
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
      break;
 8000f48:	e052      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f4a:	78bb      	ldrb	r3, [r7, #2]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d120      	bne.n	8000f92 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3351      	adds	r3, #81	; 0x51
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	3342      	adds	r3, #66	; 0x42
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f7a:	e039      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f7c:	78fa      	ldrb	r2, [r7, #3]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	3342      	adds	r3, #66	; 0x42
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	701a      	strb	r2, [r3, #0]
      break;
 8000f90:	e02e      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f92:	78fa      	ldrb	r2, [r7, #3]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3350      	adds	r3, #80	; 0x50
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fa8:	78fa      	ldrb	r2, [r7, #3]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3342      	adds	r3, #66	; 0x42
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
      break;
 8000fbc:	e018      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	3342      	adds	r3, #66	; 0x42
 8000fce:	2202      	movs	r2, #2
 8000fd0:	701a      	strb	r2, [r3, #0]
      break;
 8000fd2:	e00d      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3342      	adds	r3, #66	; 0x42
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
      break;
 8000fe8:	e002      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8000fea:	bf00      	nop
 8000fec:	e000      	b.n	8000ff0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8000fee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3344      	adds	r3, #68	; 0x44
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	8b39      	ldrh	r1, [r7, #24]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4403      	add	r3, r0
 8001014:	3348      	adds	r3, #72	; 0x48
 8001016:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	335c      	adds	r3, #92	; 0x5c
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	334c      	adds	r3, #76	; 0x4c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3339      	adds	r3, #57	; 0x39
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	335d      	adds	r3, #93	; 0x5d
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	3338      	adds	r3, #56	; 0x38
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f005 fc23 	bl	80068c8 <USB_HC_StartXfer>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 f997 	bl	80063d6 <USB_GetMode>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	f040 80f1 	bne.w	8001292 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 f97b 	bl	80063b0 <USB_ReadInterrupts>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80e7 	beq.w	8001290 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 f972 	bl	80063b0 <USB_ReadInterrupts>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010d6:	d104      	bne.n	80010e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 f962 	bl	80063b0 <USB_ReadInterrupts>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010f6:	d104      	bne.n	8001102 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001100:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f005 f952 	bl	80063b0 <USB_ReadInterrupts>
 800110c:	4603      	mov	r3, r0
 800110e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001116:	d104      	bne.n	8001122 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001120:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f942 	bl	80063b0 <USB_ReadInterrupts>
 800112c:	4603      	mov	r3, r0
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b02      	cmp	r3, #2
 8001134:	d103      	bne.n	800113e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f005 f934 	bl	80063b0 <USB_ReadInterrupts>
 8001148:	4603      	mov	r3, r0
 800114a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800114e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001152:	d117      	bne.n	8001184 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001162:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001166:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f00b f92d 	bl	800c3c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f005 f9ef 	bl	8006558 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f911 	bl	80063b0 <USB_ReadInterrupts>
 800118e:	4603      	mov	r3, r0
 8001190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d102      	bne.n	80011a0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f001 f884 	bl	80022a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 f903 	bl	80063b0 <USB_ReadInterrupts>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d106      	bne.n	80011c2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f00b f8eb 	bl	800c390 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2208      	movs	r2, #8
 80011c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 f8f2 	bl	80063b0 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011d6:	d138      	bne.n	800124a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 fc73 	bl	8006ac8 <USB_HC_ReadInterrupt>
 80011e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e025      	b.n	8001236 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d018      	beq.n	8001230 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001214:	d106      	bne.n	8001224 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f8cf 	bl	80013c0 <HCD_HC_IN_IRQHandler>
 8001222:	e005      	b.n	8001230 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fc3b 	bl	8001aa6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3d4      	bcc.n	80011ea <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f005 f8ae 	bl	80063b0 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d101      	bne.n	8001262 <HAL_HCD_IRQHandler+0x1d6>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_HCD_IRQHandler+0x1d8>
 8001262:	2300      	movs	r3, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d014      	beq.n	8001292 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0210 	bic.w	r2, r2, #16
 8001276:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 ff69 	bl	8002150 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0210 	orr.w	r2, r2, #16
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	e000      	b.n	8001292 <HAL_HCD_IRQHandler+0x206>
      return;
 8001290:	bf00      	nop
    }
  }
}
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_HCD_Start+0x16>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e013      	b.n	80012d6 <HAL_HCD_Start+0x3e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 ff8a 	bl	80061d4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 f9aa 	bl	8006620 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_HCD_Stop+0x16>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e00d      	b.n	8001310 <HAL_HCD_Stop+0x32>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f005 fcf1 	bl	8006ce8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f951 	bl	80065cc <USB_ResetPort>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	335c      	adds	r3, #92	; 0x5c
 8001350:	781b      	ldrb	r3, [r3, #0]
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	334c      	adds	r3, #76	; 0x4c
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f005 f993 	bl	80066c0 <USB_GetCurrentFrame>
 800139a:	4603      	mov	r3, r0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 f96e 	bl	8006692 <USB_GetHostSpeed>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	015a      	lsls	r2, r3, #5
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d119      	bne.n	8001424 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013fc:	461a      	mov	r2, r3
 80013fe:	2304      	movs	r3, #4
 8001400:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4413      	add	r3, r2
 800140a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	0151      	lsls	r1, r2, #5
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	440a      	add	r2, r1
 8001418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	60d3      	str	r3, [r2, #12]
 8001422:	e095      	b.n	8001550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	015a      	lsls	r2, r3, #5
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4413      	add	r3, r2
 800142c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	2b20      	cmp	r3, #32
 8001438:	d109      	bne.n	800144e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4413      	add	r3, r2
 8001442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001446:	461a      	mov	r2, r3
 8001448:	2320      	movs	r3, #32
 800144a:	6093      	str	r3, [r2, #8]
 800144c:	e080      	b.n	8001550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4413      	add	r3, r2
 8001456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b08      	cmp	r3, #8
 8001462:	d134      	bne.n	80014ce <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4413      	add	r3, r2
 800146c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	0151      	lsls	r1, r2, #5
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	440a      	add	r2, r1
 800147a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	335d      	adds	r3, #93	; 0x5d
 8001494:	2205      	movs	r2, #5
 8001496:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4413      	add	r3, r2
 80014a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a4:	461a      	mov	r2, r3
 80014a6:	2310      	movs	r3, #16
 80014a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b6:	461a      	mov	r2, r3
 80014b8:	2308      	movs	r3, #8
 80014ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fb0f 	bl	8006aea <USB_HC_Halt>
 80014cc:	e040      	b.n	8001550 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e4:	d134      	bne.n	8001550 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	0151      	lsls	r1, r2, #5
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	440a      	add	r2, r1
 80014fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f005 faea 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001522:	461a      	mov	r2, r3
 8001524:	2310      	movs	r3, #16
 8001526:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	335d      	adds	r3, #93	; 0x5d
 8001538:	2208      	movs	r2, #8
 800153a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001548:	461a      	mov	r2, r3
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4413      	add	r3, r2
 8001558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001566:	d122      	bne.n	80015ae <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4413      	add	r3, r2
 8001570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	0151      	lsls	r1, r2, #5
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	440a      	add	r2, r1
 800157e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f005 faa9 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a4:	461a      	mov	r2, r3
 80015a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015ac:	e277      	b.n	8001a9e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 80a1 	bne.w	8001708 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	335d      	adds	r3, #93	; 0x5d
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3358      	adds	r3, #88	; 0x58
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	333f      	adds	r3, #63	; 0x3f
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	333f      	adds	r3, #63	; 0x3f
 8001626:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001628:	2b02      	cmp	r3, #2
 800162a:	d121      	bne.n	8001670 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	0151      	lsls	r1, r2, #5
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	440a      	add	r2, r1
 8001642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fa47 	bl	8006aea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4413      	add	r3, r2
 8001664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001668:	461a      	mov	r2, r3
 800166a:	2310      	movs	r3, #16
 800166c:	6093      	str	r3, [r2, #8]
 800166e:	e034      	b.n	80016da <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	333f      	adds	r3, #63	; 0x3f
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d129      	bne.n	80016da <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	0151      	lsls	r1, r2, #5
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	440a      	add	r2, r1
 800169c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	335c      	adds	r3, #92	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	b2d8      	uxtb	r0, r3
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	335c      	adds	r3, #92	; 0x5c
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4601      	mov	r1, r0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f00a fe85 	bl	800c3e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3350      	adds	r3, #80	; 0x50
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2d8      	uxtb	r0, r3
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3350      	adds	r3, #80	; 0x50
 8001702:	4602      	mov	r2, r0
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	e1ca      	b.n	8001a9e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4413      	add	r3, r2
 8001710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	f040 80f1 	bne.w	8001902 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	0151      	lsls	r1, r2, #5
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	440a      	add	r2, r1
 8001736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	335d      	adds	r3, #93	; 0x5d
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10a      	bne.n	800176c <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	335c      	adds	r3, #92	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e0b0      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	335d      	adds	r3, #93	; 0x5d
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10a      	bne.n	8001798 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	335c      	adds	r3, #92	; 0x5c
 8001792:	2205      	movs	r2, #5
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e09a      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	335d      	adds	r3, #93	; 0x5d
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d00a      	beq.n	80017c4 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	335d      	adds	r3, #93	; 0x5d
 80017be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d156      	bne.n	8001872 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3358      	adds	r3, #88	; 0x58
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1c59      	adds	r1, r3, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4403      	add	r3, r0
 80017e6:	3358      	adds	r3, #88	; 0x58
 80017e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3358      	adds	r3, #88	; 0x58
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d914      	bls.n	800182a <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3358      	adds	r3, #88	; 0x58
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	335c      	adds	r3, #92	; 0x5c
 8001824:	2204      	movs	r2, #4
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e009      	b.n	800183e <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4413      	add	r3, r2
 8001846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001854:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800185c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4413      	add	r3, r2
 8001866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02d      	b.n	80018ce <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	335d      	adds	r3, #93	; 0x5d
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d122      	bne.n	80018ce <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	335c      	adds	r3, #92	; 0x5c
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	015a      	lsls	r2, r3, #5
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	461a      	mov	r2, r3
 80018dc:	2302      	movs	r3, #2
 80018de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b2d8      	uxtb	r0, r3
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	335c      	adds	r3, #92	; 0x5c
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4601      	mov	r1, r0
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f00a fd72 	bl	800c3e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001900:	e0cd      	b.n	8001a9e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4413      	add	r3, r2
 800190a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d13e      	bne.n	8001996 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4413      	add	r3, r2
 8001920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	0151      	lsls	r1, r2, #5
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	440a      	add	r2, r1
 800192e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3358      	adds	r3, #88	; 0x58
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4403      	add	r3, r0
 800195a:	3358      	adds	r3, #88	; 0x58
 800195c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	335d      	adds	r3, #93	; 0x5d
 800196e:	2206      	movs	r2, #6
 8001970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f005 f8b4 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4413      	add	r3, r2
 800198a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198e:	461a      	mov	r2, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	6093      	str	r3, [r2, #8]
}
 8001994:	e083      	b.n	8001a9e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d178      	bne.n	8001a9e <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	333f      	adds	r3, #63	; 0x3f
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d122      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3358      	adds	r3, #88	; 0x58
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	0151      	lsls	r1, r2, #5
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	440a      	add	r2, r1
 80019ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 f872 	bl	8006aea <USB_HC_Halt>
 8001a06:	e041      	b.n	8001a8c <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	333f      	adds	r3, #63	; 0x3f
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	333f      	adds	r3, #63	; 0x3f
 8001a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d12b      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	3358      	adds	r3, #88	; 0x58
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	335d      	adds	r3, #93	; 0x5d
 8001a58:	2203      	movs	r2, #3
 8001a5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	0151      	lsls	r1, r2, #5
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	440a      	add	r2, r1
 8001a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 f82f 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	6093      	str	r3, [r2, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d119      	bne.n	8001b0a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	0151      	lsls	r1, r2, #5
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	440a      	add	r2, r1
 8001afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b08:	e31e      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d141      	bne.n	8001ba4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2320      	movs	r3, #32
 8001b30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	333d      	adds	r3, #61	; 0x3d
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 82ff 	bne.w	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	333d      	adds	r3, #61	; 0x3d
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	335c      	adds	r3, #92	; 0x5c
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	0151      	lsls	r1, r2, #5
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	440a      	add	r2, r1
 8001b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 ffa4 	bl	8006aea <USB_HC_Halt>
}
 8001ba2:	e2d1      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d13f      	bne.n	8001c3a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	335d      	adds	r3, #93	; 0x5d
 8001bca:	2204      	movs	r2, #4
 8001bcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	333d      	adds	r3, #61	; 0x3d
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3358      	adds	r3, #88	; 0x58
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	0151      	lsls	r1, r2, #5
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 ff62 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2340      	movs	r3, #64	; 0x40
 8001c36:	6093      	str	r3, [r2, #8]
}
 8001c38:	e286      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d122      	bne.n	8001c98 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	0151      	lsls	r1, r2, #5
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	440a      	add	r2, r1
 8001c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 ff34 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	6093      	str	r3, [r2, #8]
}
 8001c96:	e257      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d135      	bne.n	8001d1a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3358      	adds	r3, #88	; 0x58
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fefc 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2301      	movs	r3, #1
 8001d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	335d      	adds	r3, #93	; 0x5d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	e216      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d12b      	bne.n	8001d88 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	0151      	lsls	r1, r2, #5
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	440a      	add	r2, r1
 8001d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 febc 	bl	8006aea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	335d      	adds	r3, #93	; 0x5d
 8001d82:	2205      	movs	r2, #5
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	e1df      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d135      	bne.n	8001e0a <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3358      	adds	r3, #88	; 0x58
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	335d      	adds	r3, #93	; 0x5d
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	0151      	lsls	r1, r2, #5
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	440a      	add	r2, r1
 8001ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 fe7a 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	2310      	movs	r3, #16
 8001e06:	6093      	str	r3, [r2, #8]
}
 8001e08:	e19e      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d12b      	bne.n	8001e78 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	0151      	lsls	r1, r2, #5
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	440a      	add	r2, r1
 8001e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fe4d 	bl	8006aea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	335d      	adds	r3, #93	; 0x5d
 8001e60:	2206      	movs	r2, #6
 8001e62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	6093      	str	r3, [r2, #8]
}
 8001e76:	e167      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d135      	bne.n	8001efc <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	0151      	lsls	r1, r2, #5
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	440a      	add	r2, r1
 8001ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 fe15 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2310      	movs	r3, #16
 8001ed0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	335d      	adds	r3, #93	; 0x5d
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	701a      	strb	r2, [r3, #0]
}
 8001efa:	e125      	b.n	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	f040 811a 	bne.w	8002148 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	0151      	lsls	r1, r2, #5
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	440a      	add	r2, r1
 8001f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	335d      	adds	r3, #93	; 0x5d
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d137      	bne.n	8001fba <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	335c      	adds	r3, #92	; 0x5c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d00b      	beq.n	8001f8c <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	333f      	adds	r3, #63	; 0x3f
 8001f84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	f040 80c5 	bne.w	8002116 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	3351      	adds	r3, #81	; 0x51
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2d8      	uxtb	r0, r3
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3351      	adds	r3, #81	; 0x51
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e0ad      	b.n	8002116 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	335d      	adds	r3, #93	; 0x5d
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d10a      	bne.n	8001fe6 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335c      	adds	r3, #92	; 0x5c
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e097      	b.n	8002116 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	335d      	adds	r3, #93	; 0x5d
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d10a      	bne.n	8002012 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335c      	adds	r3, #92	; 0x5c
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e081      	b.n	8002116 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	335d      	adds	r3, #93	; 0x5d
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10a      	bne.n	800203e <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	335c      	adds	r3, #92	; 0x5c
 8002038:	2205      	movs	r2, #5
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e06b      	b.n	8002116 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	335d      	adds	r3, #93	; 0x5d
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d00a      	beq.n	800206a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	335d      	adds	r3, #93	; 0x5d
 8002064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002066:	2b08      	cmp	r3, #8
 8002068:	d155      	bne.n	8002116 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3358      	adds	r3, #88	; 0x58
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1c59      	adds	r1, r3, #1
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4403      	add	r3, r0
 800208c:	3358      	adds	r3, #88	; 0x58
 800208e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3358      	adds	r3, #88	; 0x58
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d914      	bls.n	80020d0 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3358      	adds	r3, #88	; 0x58
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335c      	adds	r3, #92	; 0x5c
 80020ca:	2204      	movs	r2, #4
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e009      	b.n	80020e4 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	335c      	adds	r3, #92	; 0x5c
 80020e0:	2202      	movs	r2, #2
 80020e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002102:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	461a      	mov	r2, r3
 8002124:	2302      	movs	r3, #2
 8002126:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	335c      	adds	r3, #92	; 0x5c
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4601      	mov	r1, r0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f00a f94e 	bl	800c3e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	0c5b      	lsrs	r3, r3, #17
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002184:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d003      	beq.n	8002194 <HCD_RXQLVL_IRQHandler+0x44>
 800218c:	2b05      	cmp	r3, #5
 800218e:	f000 8082 	beq.w	8002296 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002192:	e083      	b.n	800229c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d07f      	beq.n	800229a <HCD_RXQLVL_IRQHandler+0x14a>
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3344      	adds	r3, #68	; 0x44
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d074      	beq.n	800229a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3344      	adds	r3, #68	; 0x44
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	b292      	uxth	r2, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f004 f8c7 	bl	800635e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3344      	adds	r3, #68	; 0x44
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	18d1      	adds	r1, r2, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4403      	add	r3, r0
 80021f4:	3344      	adds	r3, #68	; 0x44
 80021f6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	334c      	adds	r3, #76	; 0x4c
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	18d1      	adds	r1, r2, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4403      	add	r3, r0
 800221c:	334c      	adds	r3, #76	; 0x4c
 800221e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d031      	beq.n	800229a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800224c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002254:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3350      	adds	r3, #80	; 0x50
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2d8      	uxtb	r0, r3
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3350      	adds	r3, #80	; 0x50
 8002290:	4602      	mov	r2, r0
 8002292:	701a      	strb	r2, [r3, #0]
      break;
 8002294:	e001      	b.n	800229a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800229a:	bf00      	nop
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	1ff80000 	.word	0x1ff80000

080022a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80022d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d113      	bne.n	8002308 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10a      	bne.n	8002300 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80022f8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f00a f856 	bl	800c3ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b08      	cmp	r3, #8
 8002310:	d147      	bne.n	80023a2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b04      	cmp	r3, #4
 8002322:	d129      	bne.n	8002378 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d113      	bne.n	8002354 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002336:	d106      	bne.n	8002346 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f90a 	bl	8006558 <USB_InitFSLSPClkSel>
 8002344:	e011      	b.n	800236a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f903 	bl	8006558 <USB_InitFSLSPClkSel>
 8002352:	e00a      	b.n	800236a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002362:	461a      	mov	r2, r3
 8002364:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002368:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f00a f84c 	bl	800c408 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f00a f81b 	bl	800c3ac <HAL_HCD_Connect_Callback>
 8002376:	e014      	b.n	80023a2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f00a f853 	bl	800c424 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800238c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002390:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d103      	bne.n	80023b4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f043 0320 	orr.w	r3, r3, #32
 80023b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e081      	b.n	80024de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f008 fff4 	bl	800b3dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e006      	b.n	8002450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800244e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d104      	bne.n	8002462 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	ea42 0103 	orr.w	r1, r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	021a      	lsls	r2, r3, #8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d138      	bne.n	800256e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002506:	2302      	movs	r3, #2
 8002508:	e032      	b.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2224      	movs	r2, #36	; 0x24
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002538:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	d139      	bne.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800259c:	2302      	movs	r3, #2
 800259e:	e033      	b.n	8002608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0af      	b.n	8002786 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f008 ff7a 	bl	800b534 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e00a      	b.n	8002674 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3304      	adds	r3, #4
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	d9f1      	bls.n	800265e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0204 	orr.w	r2, r2, #4
 8002688:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_LCD_Init+0x17c>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6851      	ldr	r1, [r2, #4]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6892      	ldr	r2, [r2, #8]
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	69d2      	ldr	r2, [r2, #28]
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6a12      	ldr	r2, [r2, #32]
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6992      	ldr	r2, [r2, #24]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f862 	bl	8002794 <LCD_WaitForSynchro>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_LCD_Init+0xca>
  {
    return status;
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	e053      	b.n	8002786 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002716:	f7fd ff0d 	bl	8000534 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800271c:	e00c      	b.n	8002738 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800271e:	f7fd ff09 	bl	8000534 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272c:	d904      	bls.n	8002738 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2208      	movs	r2, #8
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e026      	b.n	8002786 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d1eb      	bne.n	800271e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002746:	f7fd fef5 	bl	8000534 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800274c:	e00c      	b.n	8002768 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800274e:	f7fd fef1 	bl	8000534 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275c:	d904      	bls.n	8002768 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2210      	movs	r2, #16
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e00e      	b.n	8002786 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b10      	cmp	r3, #16
 8002774:	d1eb      	bne.n	800274e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	fc00000e 	.word	0xfc00000e

08002794 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800279c:	f7fd feca 	bl	8000534 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80027a2:	e00c      	b.n	80027be <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80027a4:	f7fd fec6 	bl	8000534 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b2:	d904      	bls.n	80027be <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e007      	b.n	80027ce <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1eb      	bne.n	80027a4 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d130      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d038      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2232      	movs	r2, #50	; 0x32
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9b      	lsrs	r3, r3, #18
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	e002      	b.n	8002840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d102      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d110      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d007      	beq.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	20000038 	.word	0x20000038
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6053      	str	r3, [r2, #4]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7fd fe34 	bl	8000534 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e06f      	b.n	80029b8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_QSPI_Init+0x28>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e067      	b.n	80029b8 <HAL_QSPI_Init+0xf8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f008 ffa9 	bl	800b85c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800290a:	f241 3188 	movw	r1, #5000	; 0x1388
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f858 	bl	80029c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	3b01      	subs	r3, #1
 8002924:	021a      	lsls	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	2120      	movs	r1, #32
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f850 	bl	80029e0 <QSPI_WaitFlagStateUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d131      	bne.n	80029ae <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002954:	f023 0310 	bic.w	r3, r3, #16
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6852      	ldr	r2, [r2, #4]
 800295c:	0611      	lsls	r1, r2, #24
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_QSPI_Init+0x100>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6912      	ldr	r2, [r2, #16]
 800297a:	0411      	lsls	r1, r2, #16
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6952      	ldr	r2, [r2, #20]
 8002980:	4311      	orrs	r1, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6992      	ldr	r2, [r2, #24]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80029b6:	7afb      	ldrb	r3, [r7, #11]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffe0f8fe 	.word	0xffe0f8fe

080029c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029f0:	e01a      	b.n	8002a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d016      	beq.n	8002a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fd fd9b 	bl	8000534 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2204      	movs	r2, #4
 8002a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00e      	b.n	8002a46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1d6      	bne.n	80029f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e39d      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a62:	4ba4      	ldr	r3, [pc, #656]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6c:	4ba1      	ldr	r3, [pc, #644]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80e1 	beq.w	8002c46 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4a>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	f040 8088 	bne.w	8002ba2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 8084 	bne.w	8002ba2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9a:	4b96      	ldr	r3, [pc, #600]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e375      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	4b8f      	ldr	r3, [pc, #572]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_RCC_OscConfig+0x7c>
 8002ac2:	4b8c      	ldr	r3, [pc, #560]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aca:	e005      	b.n	8002ad8 <HAL_RCC_OscConfig+0x88>
 8002acc:	4b89      	ldr	r3, [pc, #548]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d223      	bcs.n	8002b24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd4b 	bl	800357c <RCC_SetFlashLatencyFromMSIRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e356      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4b80      	ldr	r3, [pc, #512]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7f      	ldr	r2, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b7d      	ldr	r3, [pc, #500]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	497a      	ldr	r1, [pc, #488]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	4975      	ldr	r1, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 8002b22:	e022      	b.n	8002b6a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b24:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b70      	ldr	r3, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	496d      	ldr	r1, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b42:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4968      	ldr	r1, [pc, #416]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fd0e 	bl	800357c <RCC_SetFlashLatencyFromMSIRange>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e319      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6a:	f000 fc03 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4b60      	ldr	r3, [pc, #384]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x2a8>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	fa21 f303 	lsr.w	r3, r1, r3
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x2b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f009 f9a2 	bl	800bed8 <HAL_InitTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d052      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	e2fd      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d032      	beq.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002baa:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a51      	ldr	r2, [pc, #324]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb6:	f7fd fcbd 	bl	8000534 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bbe:	f7fd fcb9 	bl	8000534 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2e6      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bdc:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a44      	ldr	r2, [pc, #272]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	493f      	ldr	r1, [pc, #252]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	493a      	ldr	r1, [pc, #232]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
 8002c0e:	e01a      	b.n	8002c46 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c1c:	f7fd fc8a 	bl	8000534 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c24:	f7fd fc86 	bl	8000534 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e2b3      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1d4>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d074      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x214>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d10e      	bne.n	8002c7c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d064      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d160      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e290      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x244>
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x280>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x268>
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x280>
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fd fc2c 	bl	8000534 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	e011      	b.n	8002d04 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fd fc28 	bl	8000534 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d90a      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e255      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	0800caf4 	.word	0x0800caf4
 8002cfc:	20000038 	.word	0x20000038
 8002d00:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d04:	4bae      	ldr	r3, [pc, #696]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0e7      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x290>
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fd fc0f 	bl	8000534 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1a:	f7fd fc0b 	bl	8000534 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	; 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e238      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2c:	4ba4      	ldr	r3, [pc, #656]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2ca>
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d060      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x30a>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d119      	bne.n	8002d88 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5a:	4b99      	ldr	r3, [pc, #612]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x322>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e215      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b93      	ldr	r3, [pc, #588]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	498f      	ldr	r1, [pc, #572]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d86:	e040      	b.n	8002e0a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d023      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8a      	ldr	r2, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fbca 	bl	8000534 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7fd fbc6 	bl	8000534 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db6:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	497b      	ldr	r1, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
 8002dd6:	e018      	b.n	8002e0a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd8:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fd fba6 	bl	8000534 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fd fba2 	bl	8000534 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1cf      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e24:	4a66      	ldr	r2, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fd fb81 	bl	8000534 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fd fb7d 	bl	8000534 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1aa      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e48:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ef      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3e6>
 8002e56:	e01b      	b.n	8002e90 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5e:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fd fb64 	bl	8000534 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fd fb60 	bl	8000534 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e18d      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e82:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ef      	bne.n	8002e70 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80a5 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a43      	ldr	r2, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eca:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_RCC_OscConfig+0x574>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x574>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_RCC_OscConfig+0x574>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fd fb27 	bl	8000534 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fd fb23 	bl	8000534 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_OscConfig+0x574>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4d2>
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f20:	e024      	b.n	8002f6c <HAL_RCC_OscConfig+0x51c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d110      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4fc>
 8002f2a:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4a:	e00f      	b.n	8002f6c <HAL_RCC_OscConfig+0x51c>
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fd fade 	bl	8000534 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fada 	bl	8000534 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e105      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x570>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ed      	beq.n	8002f7c <HAL_RCC_OscConfig+0x52c>
 8002fa0:	e019      	b.n	8002fd6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fac7 	bl	8000534 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa8:	e00e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fd fac3 	bl	8000534 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d905      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0ee      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	4b77      	ldr	r3, [pc, #476]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e9      	bne.n	8002faa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b72      	ldr	r3, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a71      	ldr	r2, [pc, #452]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80d5 	beq.w	800319c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	f000 808e 	beq.w	8003116 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d15b      	bne.n	80030ba <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fd fa91 	bl	8000534 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fd fa8d 	bl	8000534 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0ba      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003028:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003034:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x75c>)
 800303a:	4013      	ands	r3, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003044:	3a01      	subs	r2, #1
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304e:	0212      	lsls	r2, r2, #8
 8003050:	4311      	orrs	r1, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0552      	lsls	r2, r2, #21
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0652      	lsls	r2, r2, #25
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800306e:	0912      	lsrs	r2, r2, #4
 8003070:	0452      	lsls	r2, r2, #17
 8003072:	430a      	orrs	r2, r1
 8003074:	494c      	ldr	r1, [pc, #304]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003076:	4313      	orrs	r3, r2
 8003078:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003084:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 800308c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003090:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fd fa4f 	bl	8000534 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fd fa4b 	bl	8000534 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e078      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x64a>
 80030b8:	e070      	b.n	800319c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030c6:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030d2:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030d8:	f023 0303 	bic.w	r3, r3, #3
 80030dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 80030e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fd fa21 	bl	8000534 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fd fa1d 	bl	8000534 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e04a      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x6a6>
 8003114:	e042      	b.n	800319c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e03d      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x758>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	429a      	cmp	r2, r3
 8003134:	d130      	bne.n	8003198 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	3b01      	subs	r3, #1
 8003142:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d127      	bne.n	8003198 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d11f      	bne.n	8003198 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003162:	2a07      	cmp	r2, #7
 8003164:	bf14      	ite	ne
 8003166:	2201      	movne	r2, #1
 8003168:	2200      	moveq	r2, #0
 800316a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316c:	4293      	cmp	r3, r2
 800316e:	d113      	bne.n	8003198 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d109      	bne.n	8003198 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	f99d808c 	.word	0xf99d808c

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0c8      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d910      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4961      	ldr	r1, [pc, #388]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b0      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d04c      	beq.n	800329a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003208:	4b56      	ldr	r3, [pc, #344]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d121      	bne.n	8003258 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e09e      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003220:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d115      	bne.n	8003258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e092      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003238:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e086      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07e      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 0203 	bic.w	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	493f      	ldr	r1, [pc, #252]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326a:	f7fd f963 	bl	8000534 <HAL_GetTick>
 800326e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	e00a      	b.n	8003288 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	f7fd f95f 	bl	8000534 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e066      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 020c 	and.w	r2, r3, #12
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	429a      	cmp	r2, r3
 8003298:	d1eb      	bne.n	8003272 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a6:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	492c      	ldr	r1, [pc, #176]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d210      	bcs.n	80032e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 0207 	bic.w	r2, r3, #7
 80032ce:	4924      	ldr	r1, [pc, #144]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e036      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4918      	ldr	r1, [pc, #96]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4910      	ldr	r1, [pc, #64]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003326:	f000 f825 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800332a:	4601      	mov	r1, r0
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	fa21 f303 	lsr.w	r3, r1, r3
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f008 fdc4 	bl	800bed8 <HAL_InitTick>
 8003350:	4603      	mov	r3, r0
 8003352:	72fb      	strb	r3, [r7, #11]

  return status;
 8003354:	7afb      	ldrb	r3, [r7, #11]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40022000 	.word	0x40022000
 8003364:	40021000 	.word	0x40021000
 8003368:	0800caf4 	.word	0x0800caf4
 800336c:	20000038 	.word	0x20000038
 8003370:	20000000 	.word	0x20000000

08003374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800338c:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x34>
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d121      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d11e      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e005      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033c4:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <HAL_RCC_GetSysClockFreq+0x108>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	e004      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_RCC_GetSysClockFreq+0x110>)
 80033fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d133      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d002      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0xa4>
 8003412:	2b03      	cmp	r3, #3
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xaa>
 8003416:	e005      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_GetSysClockFreq+0x10c>)
 800341a:	617b      	str	r3, [r7, #20]
      break;
 800341c:	e005      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_GetSysClockFreq+0x110>)
 8003420:	617b      	str	r3, [r7, #20]
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	3301      	adds	r3, #1
 8003436:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	fb02 f203 	mul.w	r2, r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_GetSysClockFreq+0x104>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0e5b      	lsrs	r3, r3, #25
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800346a:	69bb      	ldr	r3, [r7, #24]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3724      	adds	r7, #36	; 0x24
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40021000 	.word	0x40021000
 800347c:	0800cb0c 	.word	0x0800cb0c
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000038 	.word	0x20000038

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4601      	mov	r1, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0800cb04 	.word	0x0800cb04

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d0:	f7ff ffda 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d4:	4601      	mov	r1, r0
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0adb      	lsrs	r3, r3, #11
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	0800cb04 	.word	0x0800cb04

080034f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	220f      	movs	r2, #15
 8003506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_RCC_GetClockConfig+0x60>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0207 	and.w	r2, r3, #7
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	40022000 	.word	0x40022000

0800355c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_EnableCSS+0x1c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_RCC_EnableCSS+0x1c>)
 8003566:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003594:	f7ff f920 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003598:	6178      	str	r0, [r7, #20]
 800359a:	e014      	b.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6593      	str	r3, [r2, #88]	; 0x58
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035b4:	f7ff f910 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 80035b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035cc:	d10b      	bne.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d919      	bls.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2ba0      	cmp	r3, #160	; 0xa0
 80035d8:	d902      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035da:	2302      	movs	r3, #2
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e013      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e0:	2301      	movs	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e010      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d902      	bls.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035ec:	2303      	movs	r3, #3
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e00a      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d102      	bne.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f8:	2302      	movs	r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e004      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d101      	bne.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003604:	2301      	movs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	4909      	ldr	r1, [pc, #36]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	40022000 	.word	0x40022000

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003644:	2300      	movs	r3, #0
 8003646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003648:	2300      	movs	r3, #0
 800364a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03f      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003660:	d01c      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003666:	d802      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800366c:	e01f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x72>
 800366e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003678:	d01c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800367c:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a84      	ldr	r2, [pc, #528]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e015      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 ff31 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800369a:	e00c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3320      	adds	r3, #32
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f818 	bl	80046d8 <RCCEx_PLLSAI2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	74fb      	strb	r3, [r7, #19]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ca:	4972      	ldr	r1, [pc, #456]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d03f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d01c      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f2:	d802      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036f8:	e01f      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003700:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003704:	d01c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003706:	e018      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a61      	ldr	r2, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003712:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f000 feeb 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003726:	e00c      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3320      	adds	r3, #32
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ffd2 	bl	80046d8 <RCCEx_PLLSAI2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	74fb      	strb	r3, [r7, #19]
      break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003748:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003756:	494f      	ldr	r1, [pc, #316]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a0 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a40      	ldr	r2, [pc, #256]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a4:	2301      	movs	r3, #1
 80037a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a3a      	ldr	r2, [pc, #232]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b4:	f7fc febe 	bl	8000534 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7fc feba 	bl	8000534 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	74fb      	strb	r3, [r7, #19]
        break;
 80037ce:	e005      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d15c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01f      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d019      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fc fe79 	bl	8000534 <HAL_GetTick>
 8003842:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003844:	e00b      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fc fe75 	bl	8000534 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d902      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	74fb      	strb	r3, [r7, #19]
            break;
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ec      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003882:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800388a:	e009      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a0:	7c7b      	ldrb	r3, [r7, #17]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b9e      	ldr	r3, [pc, #632]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	4a9d      	ldr	r2, [pc, #628]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038be:	4b98      	ldr	r3, [pc, #608]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	4994      	ldr	r1, [pc, #592]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e0:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f023 020c 	bic.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	498c      	ldr	r1, [pc, #560]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003902:	4b87      	ldr	r3, [pc, #540]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4983      	ldr	r1, [pc, #524]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003924:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	497b      	ldr	r1, [pc, #492]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	4972      	ldr	r1, [pc, #456]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003968:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	496a      	ldr	r1, [pc, #424]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	4961      	ldr	r1, [pc, #388]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ac:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	4959      	ldr	r1, [pc, #356]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b54      	ldr	r3, [pc, #336]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039dc:	4950      	ldr	r1, [pc, #320]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	4948      	ldr	r1, [pc, #288]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	493f      	ldr	r1, [pc, #252]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d028      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a34:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	4937      	ldr	r1, [pc, #220]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a31      	ldr	r2, [pc, #196]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]
 8003a60:	e011      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fd40 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003abc:	60d3      	str	r3, [r2, #12]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fd11 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1a:	60d3      	str	r3, [r2, #12]
 8003b1c:	e014      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fcdf 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	4928      	ldr	r1, [pc, #160]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fcbc 	bl	80044f8 <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	74bb      	strb	r3, [r7, #18]
 8003b8e:	e011      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fd99 	bl	80046d8 <RCCEx_PLLSAI2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bce:	490d      	ldr	r1, [pc, #52]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1a:	d137      	bne.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c1c:	4bb8      	ldr	r3, [pc, #736]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2e:	d014      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c34:	d01e      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003c3c:	f000 bc53 	b.w	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c40:	4baf      	ldr	r3, [pc, #700]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	f040 8446 	bne.w	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8003c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c54:	61fb      	str	r3, [r7, #28]
      break;
 8003c56:	f000 bc41 	b.w	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c5a:	4ba9      	ldr	r3, [pc, #676]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	f040 843b 	bne.w	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8003c6a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003c6e:	61fb      	str	r3, [r7, #28]
      break;
 8003c70:	f000 bc36 	b.w	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c74:	4ba2      	ldr	r3, [pc, #648]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c80:	f040 8430 	bne.w	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8003c84:	4b9f      	ldr	r3, [pc, #636]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c86:	61fb      	str	r3, [r7, #28]
      break;
 8003c88:	f000 bc2c 	b.w	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c8c:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d023      	beq.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d02e      	beq.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d139      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003ca4:	4b96      	ldr	r3, [pc, #600]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d116      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003cb0:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8003cbc:	4b90      	ldr	r3, [pc, #576]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	4a8c      	ldr	r2, [pc, #560]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cdc:	e01f      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
      break;
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ce4:	4b86      	ldr	r3, [pc, #536]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8003cf2:	4b86      	ldr	r3, [pc, #536]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cf6:	e012      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
      break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cfe:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003d0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d10:	e005      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
      break;
 8003d1c:	bf00      	nop
    }

    switch(PeriphClk)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	f000 8337 	beq.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2c:	d825      	bhi.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	f000 81df 	beq.w	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d80f      	bhi.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	f000 8128 	beq.w	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d803      	bhi.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f000 80ec 	beq.w	8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d48:	e3cd      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	f000 8169 	beq.w	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	f000 819a 	beq.w	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8003d56:	e3c6      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	f000 82b3 	beq.w	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d803      	bhi.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	f000 81fd 	beq.w	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8003d68:	e3bd      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	f000 82cd 	beq.w	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	f000 82ec 	beq.w	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8003d78:	e3b5      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7e:	f000 822d 	beq.w	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d86:	d811      	bhi.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d021      	beq.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8003d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d92:	d804      	bhi.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	f000 833e 	beq.w	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8003d9c:	e3a3      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da2:	d01d      	beq.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da8:	d021      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003daa:	e39c      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	f000 8277 	beq.w	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d804      	bhi.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	f000 8371 	beq.w	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8003dc2:	e390      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc8:	d011      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003dca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dce:	d00e      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003dd0:	e389      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003dd2:	69b9      	ldr	r1, [r7, #24]
 8003dd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dd8:	f000 fd58 	bl	800488c <RCCEx_GetSAIxPeriphCLKFreq>
 8003ddc:	61f8      	str	r0, [r7, #28]
      break;
 8003dde:	e382      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003de6:	f000 fd51 	bl	800488c <RCCEx_GetSAIxPeriphCLKFreq>
 8003dea:	61f8      	str	r0, [r7, #28]
      break;
 8003dec:	e37b      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003dee:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003df8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e00:	d023      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8003e02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8003e0e:	e086      	b.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d17b      	bne.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e1c:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003e28:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61fb      	str	r3, [r7, #28]
          break;
 8003e48:	e064      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e56:	d15f      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e64:	d158      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e70:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	fb02 f203 	mul.w	r2, r2, r3
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	3301      	adds	r3, #1
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0d5b      	lsrs	r3, r3, #21
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	61fb      	str	r3, [r7, #28]
          break;
 8003ea2:	e039      	b.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ea4:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb0:	d134      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d12d      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eca:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	fb02 f203 	mul.w	r2, r2, r3
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	3301      	adds	r3, #1
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	0d5b      	lsrs	r3, r3, #21
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]
          break;
 8003efc:	e00e      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0003d090 	.word	0x0003d090
 8003f08:	0800cb0c 	.word	0x0800cb0c
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	007a1200 	.word	0x007a1200
          break;
 8003f14:	bf00      	nop
 8003f16:	e2e6      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f18:	bf00      	nop
 8003f1a:	e2e4      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f1c:	bf00      	nop
        break;
 8003f1e:	e2e2      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f20:	4bac      	ldr	r3, [pc, #688]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d827      	bhi.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f51 	.word	0x08003f51
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f6d 	.word	0x08003f6d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7ff fac0 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
          break;
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f50:	f7ff fa10 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003f54:	61f8      	str	r0, [r7, #28]
          break;
 8003f56:	e019      	b.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f58:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f64:	d10f      	bne.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8003f66:	4b9c      	ldr	r3, [pc, #624]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003f68:	61fb      	str	r3, [r7, #28]
          break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f6c:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	61fb      	str	r3, [r7, #28]
          break;
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8003f82:	bf00      	nop
 8003f84:	e2af      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f86:	bf00      	nop
 8003f88:	e2ad      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f8a:	bf00      	nop
        break;
 8003f8c:	e2ab      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f8e:	4b91      	ldr	r3, [pc, #580]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d83a      	bhi.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08004017 	.word	0x08004017
 8003fb0:	08004017 	.word	0x08004017
 8003fb4:	08004017 	.word	0x08004017
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08004017 	.word	0x08004017
 8003fc0:	08004017 	.word	0x08004017
 8003fc4:	08004017 	.word	0x08004017
 8003fc8:	08003fed 	.word	0x08003fed
 8003fcc:	08004017 	.word	0x08004017
 8003fd0:	08004017 	.word	0x08004017
 8003fd4:	08004017 	.word	0x08004017
 8003fd8:	08004001 	.word	0x08004001
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7ff fa60 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
          break;
 8003fe2:	e01d      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fe4:	f7ff f9c6 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003fe8:	61f8      	str	r0, [r7, #28]
          break;
 8003fea:	e019      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fec:	4b79      	ldr	r3, [pc, #484]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d10f      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8003ffa:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003ffc:	61fb      	str	r3, [r7, #28]
          break;
 8003ffe:	e00c      	b.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004000:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d107      	bne.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	61fb      	str	r3, [r7, #28]
          break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8004016:	bf00      	nop
 8004018:	e265      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800401a:	bf00      	nop
 800401c:	e263      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800401e:	bf00      	nop
        break;
 8004020:	e261      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004022:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800402c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b10      	cmp	r3, #16
 8004032:	d00d      	beq.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004034:	2b10      	cmp	r3, #16
 8004036:	d802      	bhi.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 800403c:	e024      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800403e:	2b20      	cmp	r3, #32
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004042:	2b30      	cmp	r3, #48	; 0x30
 8004044:	d012      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8004046:	e01f      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004048:	f7ff fa2a 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 800404c:	61f8      	str	r0, [r7, #28]
          break;
 800404e:	e01b      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004050:	f7ff f990 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004054:	61f8      	str	r0, [r7, #28]
          break;
 8004056:	e017      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004058:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d10d      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8004066:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004068:	61fb      	str	r3, [r7, #28]
          break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800406c:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d105      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	61fb      	str	r3, [r7, #28]
          break;
 8004080:	e001      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004082:	bf00      	nop
 8004084:	e22f      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004086:	bf00      	nop
        break;
 8004088:	e22d      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004094:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d00d      	beq.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d802      	bhi.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80040a4:	e024      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80040aa:	2bc0      	cmp	r3, #192	; 0xc0
 80040ac:	d012      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80040ae:	e01f      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040b0:	f7ff f9f6 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80040b4:	61f8      	str	r0, [r7, #28]
          break;
 80040b6:	e01b      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80040b8:	f7ff f95c 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80040bc:	61f8      	str	r0, [r7, #28]
          break;
 80040be:	e017      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040c0:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040cc:	d10d      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80040d0:	61fb      	str	r3, [r7, #28]
          break;
 80040d2:	e00a      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d105      	bne.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	61fb      	str	r3, [r7, #28]
          break;
 80040e8:	e001      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80040ea:	bf00      	nop
 80040ec:	e1fb      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80040ee:	bf00      	nop
        break;
 80040f0:	e1f9      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040f2:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d010      	beq.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410a:	d802      	bhi.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004110:	e026      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8004112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411c:	d012      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800411e:	e01f      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004120:	f7ff f9be 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004124:	61f8      	str	r0, [r7, #28]
          break;
 8004126:	e01b      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8004128:	f7ff f924 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800412c:	61f8      	str	r0, [r7, #28]
          break;
 800412e:	e017      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d10d      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004140:	61fb      	str	r3, [r7, #28]
          break;
 8004142:	e00a      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d105      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	61fb      	str	r3, [r7, #28]
          break;
 8004158:	e001      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800415a:	bf00      	nop
 800415c:	e1c3      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800415e:	bf00      	nop
        break;
 8004160:	e1c1      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800416c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004174:	d010      	beq.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d802      	bhi.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004180:	e026      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	d00b      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418c:	d012      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800418e:	e01f      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004190:	f7ff f986 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004194:	61f8      	str	r0, [r7, #28]
          break;
 8004196:	e01b      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004198:	f7ff f8ec 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800419c:	61f8      	str	r0, [r7, #28]
          break;
 800419e:	e017      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d10d      	bne.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80041b0:	61fb      	str	r3, [r7, #28]
          break;
 80041b2:	e00a      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d105      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	61fb      	str	r3, [r7, #28]
          break;
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80041ca:	bf00      	nop
 80041cc:	e18b      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80041ce:	bf00      	nop
        break;
 80041d0:	e189      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041dc:	4bae      	ldr	r3, [pc, #696]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041e6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ee:	d02f      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80041f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041f4:	d003      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80041f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80041fc:	e050      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80041fe:	f7ff f8b9 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004202:	61f8      	str	r0, [r7, #28]
          break;
 8004204:	e04c      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8004206:	4ba4      	ldr	r3, [pc, #656]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d043      	beq.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004212:	4ba1      	ldr	r3, [pc, #644]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	fb02 f203 	mul.w	r2, r2, r3
 8004226:	4b9c      	ldr	r3, [pc, #624]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	3301      	adds	r3, #1
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004238:	4b97      	ldr	r3, [pc, #604]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	0e5b      	lsrs	r3, r3, #25
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	61fb      	str	r3, [r7, #28]
          break;
 800424e:	e024      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800425c:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004266:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	fb02 f203 	mul.w	r2, r2, r3
 8004270:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	3301      	adds	r3, #1
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004282:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	0e5b      	lsrs	r3, r3, #25
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	3301      	adds	r3, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	61fb      	str	r3, [r7, #28]
          break;
 8004298:	e001      	b.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800429a:	bf00      	nop
 800429c:	e123      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800429e:	bf00      	nop
        break;
 80042a0:	e121      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042a2:	4b7d      	ldr	r3, [pc, #500]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7ff f90a 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 80042b8:	61f8      	str	r0, [r7, #28]
        break;
 80042ba:	e114      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80042bc:	f7ff f85a 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80042c0:	61f8      	str	r0, [r7, #28]
        break;
 80042c2:	e110      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80042c4:	4b74      	ldr	r3, [pc, #464]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042ce:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d009      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7ff f8dc 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61f8      	str	r0, [r7, #28]
          break;
 80042ea:	e00d      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ec:	f7ff f842 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80042f0:	61f8      	str	r0, [r7, #28]
          break;
 80042f2:	e009      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004302:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004304:	61fb      	str	r3, [r7, #28]
          break;
 8004306:	bf00      	nop
        break;
 8004308:	e0ed      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800430a:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004314:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431c:	d009      	beq.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d000      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004328:	e011      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800432a:	f7ff f8b9 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 800432e:	61f8      	str	r0, [r7, #28]
          break;
 8004330:	e00d      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004332:	f7ff f81f 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004336:	61f8      	str	r0, [r7, #28]
          break;
 8004338:	e009      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d101      	bne.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004348:	4b54      	ldr	r3, [pc, #336]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800434a:	61fb      	str	r3, [r7, #28]
          break;
 800434c:	bf00      	nop
        break;
 800434e:	e0ca      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004350:	4b51      	ldr	r3, [pc, #324]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800435a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800436e:	e011      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004370:	f7ff f896 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004374:	61f8      	str	r0, [r7, #28]
          break;
 8004376:	e00d      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004378:	f7fe fffc 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800437c:	61f8      	str	r0, [r7, #28]
          break;
 800437e:	e009      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 800438e:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004390:	61fb      	str	r3, [r7, #28]
          break;
 8004392:	bf00      	nop
        break;
 8004394:	e0a7      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004396:	4b40      	ldr	r3, [pc, #256]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a8:	d010      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80043aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ae:	d802      	bhi.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 80043b4:	e02f      	b.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 80043b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ba:	d012      	beq.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80043bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043c0:	d019      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80043c2:	e028      	b.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7ff f86c 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
          break;
 80043ca:	e024      	b.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043cc:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d118      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 80043da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80043de:	61fb      	str	r3, [r7, #28]
          break;
 80043e0:	e014      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ee:	d10f      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80043f2:	61fb      	str	r3, [r7, #28]
          break;
 80043f4:	e00c      	b.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d107      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004408:	61fb      	str	r3, [r7, #28]
          break;
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 800440c:	bf00      	nop
 800440e:	e06a      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004410:	bf00      	nop
 8004412:	e068      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004414:	bf00      	nop
        break;
 8004416:	e066      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004422:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d010      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d802      	bhi.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004436:	e034      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800443c:	d012      	beq.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800443e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004442:	d019      	beq.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004444:	e02d      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004446:	f7ff f82b 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 800444a:	61f8      	str	r0, [r7, #28]
          break;
 800444c:	e029      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d118      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 800445c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004460:	61fb      	str	r3, [r7, #28]
          break;
 8004462:	e014      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d10f      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004474:	61fb      	str	r3, [r7, #28]
          break;
 8004476:	e00c      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	61fb      	str	r3, [r7, #28]
          break;
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 800448e:	bf00      	nop
 8004490:	e029      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004492:	bf00      	nop
 8004494:	e027      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	00f42400 	.word	0x00f42400
          break;
 80044a0:	bf00      	nop
        break;
 80044a2:	e020      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ae:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 80044bc:	e00d      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe ffef 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80044c2:	61f8      	str	r0, [r7, #28]
          break;
 80044c4:	e009      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d101      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80044d6:	61fb      	str	r3, [r7, #28]
          break;
 80044d8:	bf00      	nop
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044e4:	bf00      	nop
    }
  }

  return(frequency);
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	00f42400 	.word	0x00f42400

080044f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004506:	4b73      	ldr	r3, [pc, #460]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004512:	4b70      	ldr	r3, [pc, #448]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0203 	and.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d10d      	bne.n	800453e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
       ||
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800452a:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
       ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d044      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	e041      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d00c      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x6e>
 800454c:	2b03      	cmp	r3, #3
 800454e:	d013      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x80>
 8004550:	2b01      	cmp	r3, #1
 8004552:	d120      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004554:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11d      	bne.n	800459c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e01a      	b.n	800459c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004566:	4b5b      	ldr	r3, [pc, #364]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e013      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004578:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004584:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004594:	e006      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
      break;
 800459a:	e004      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800459c:	bf00      	nop
 800459e:	e002      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80045a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ac:	4b49      	ldr	r3, [pc, #292]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	3b01      	subs	r3, #1
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	430b      	orrs	r3, r1
 80045c2:	4944      	ldr	r1, [pc, #272]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d17d      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ce:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045da:	f7fb ffab 	bl	8000534 <HAL_GetTick>
 80045de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e0:	e009      	b.n	80045f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e2:	f7fb ffa7 	bl	8000534 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d902      	bls.n	80045f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	73fb      	strb	r3, [r7, #15]
        break;
 80045f4:	e005      	b.n	8004602 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f6:	4b37      	ldr	r3, [pc, #220]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ef      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d160      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d111      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6892      	ldr	r2, [r2, #8]
 800461e:	0211      	lsls	r1, r2, #8
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68d2      	ldr	r2, [r2, #12]
 8004624:	0912      	lsrs	r2, r2, #4
 8004626:	0452      	lsls	r2, r2, #17
 8004628:	430a      	orrs	r2, r1
 800462a:	492a      	ldr	r1, [pc, #168]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
 8004630:	e027      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d112      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6892      	ldr	r2, [r2, #8]
 8004648:	0211      	lsls	r1, r2, #8
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6912      	ldr	r2, [r2, #16]
 800464e:	0852      	lsrs	r2, r2, #1
 8004650:	3a01      	subs	r2, #1
 8004652:	0552      	lsls	r2, r2, #21
 8004654:	430a      	orrs	r2, r1
 8004656:	491f      	ldr	r1, [pc, #124]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]
 800465c:	e011      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	0211      	lsls	r1, r2, #8
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6952      	ldr	r2, [r2, #20]
 8004674:	0852      	lsrs	r2, r2, #1
 8004676:	3a01      	subs	r2, #1
 8004678:	0652      	lsls	r2, r2, #25
 800467a:	430a      	orrs	r2, r1
 800467c:	4915      	ldr	r1, [pc, #84]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800468c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fb ff51 	bl	8000534 <HAL_GetTick>
 8004692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004694:	e009      	b.n	80046aa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004696:	f7fb ff4d 	bl	8000534 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d902      	bls.n	80046aa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	73fb      	strb	r3, [r7, #15]
          break;
 80046a8:	e005      	b.n	80046b6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ef      	beq.n	8004696 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000

080046d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e6:	4b68      	ldr	r3, [pc, #416]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0203 	and.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d10d      	bne.n	800471e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
       ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800470a:	4b5f      	ldr	r3, [pc, #380]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
       ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d044      	beq.n	80047a8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	e041      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d00c      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0x6e>
 800472c:	2b03      	cmp	r3, #3
 800472e:	d013      	beq.n	8004758 <RCCEx_PLLSAI2_Config+0x80>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d120      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004734:	4b54      	ldr	r3, [pc, #336]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e01a      	b.n	800477c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004746:	4b50      	ldr	r3, [pc, #320]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	2b00      	cmp	r3, #0
 8004750:	d116      	bne.n	8004780 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004756:	e013      	b.n	8004780 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004764:	4b48      	ldr	r3, [pc, #288]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004774:	e006      	b.n	8004784 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
      break;
 800477a:	e004      	b.n	8004786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800477c:	bf00      	nop
 800477e:	e002      	b.n	8004786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004784:	bf00      	nop
    }

    if(status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478c:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6819      	ldr	r1, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	3b01      	subs	r3, #1
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	430b      	orrs	r3, r1
 80047a2:	4939      	ldr	r1, [pc, #228]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d167      	bne.n	800487e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a35      	ldr	r2, [pc, #212]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ba:	f7fb febb 	bl	8000534 <HAL_GetTick>
 80047be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c0:	e009      	b.n	80047d6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c2:	f7fb feb7 	bl	8000534 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d902      	bls.n	80047d6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	73fb      	strb	r3, [r7, #15]
        break;
 80047d4:	e005      	b.n	80047e2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047d6:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ef      	bne.n	80047c2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d14a      	bne.n	800487e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d111      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047ee:	4b26      	ldr	r3, [pc, #152]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	0211      	lsls	r1, r2, #8
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68d2      	ldr	r2, [r2, #12]
 8004804:	0912      	lsrs	r2, r2, #4
 8004806:	0452      	lsls	r2, r2, #17
 8004808:	430a      	orrs	r2, r1
 800480a:	491f      	ldr	r1, [pc, #124]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	614b      	str	r3, [r1, #20]
 8004810:	e011      	b.n	8004836 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800481a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6892      	ldr	r2, [r2, #8]
 8004822:	0211      	lsls	r1, r2, #8
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6912      	ldr	r2, [r2, #16]
 8004828:	0852      	lsrs	r2, r2, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	0652      	lsls	r2, r2, #25
 800482e:	430a      	orrs	r2, r1
 8004830:	4915      	ldr	r1, [pc, #84]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a13      	ldr	r2, [pc, #76]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7fb fe77 	bl	8000534 <HAL_GetTick>
 8004846:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004848:	e009      	b.n	800485e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800484a:	f7fb fe73 	bl	8000534 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d902      	bls.n	800485e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	73fb      	strb	r3, [r7, #15]
          break;
 800485c:	e005      	b.n	800486a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ef      	beq.n	800484a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000

0800488c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	d10c      	bne.n	80048c4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048b4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048bc:	d112      	bne.n	80048e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048be:	4b5e      	ldr	r3, [pc, #376]	; (8004a38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e00f      	b.n	80048e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d10b      	bne.n	80048e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80048cc:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80048d6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048de:	d101      	bne.n	80048e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80048e0:	4b55      	ldr	r3, [pc, #340]	; (8004a38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80048e2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 809c 	bne.w	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f6:	d003      	beq.n	8004900 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048fe:	d12d      	bne.n	800495c <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8004900:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 808b 	beq.w	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800490e:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	3301      	adds	r3, #1
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004934:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8004940:	2311      	movs	r3, #17
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e001      	b.n	800494a <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8004946:	2307      	movs	r3, #7
 8004948:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	fb02 f203 	mul.w	r2, r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800495a:	e063      	b.n	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d12c      	bne.n	80049bc <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004962:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d05a      	beq.n	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800496e:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	3301      	adds	r3, #1
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80049a0:	2311      	movs	r3, #17
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e001      	b.n	80049aa <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80049a6:	2307      	movs	r3, #7
 80049a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	fb02 f203 	mul.w	r2, r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e033      	b.n	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c2:	d003      	beq.n	80049cc <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ca:	d12b      	bne.n	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d025      	beq.n	8004a24 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049d8:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	3301      	adds	r3, #1
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8004a0a:	2311      	movs	r3, #17
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e001      	b.n	8004a14 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8004a10:	2307      	movs	r3, #7
 8004a12:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	fb02 f203 	mul.w	r2, r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004a24:	69fb      	ldr	r3, [r7, #28]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
 8004a38:	001fff68 	.word	0x001fff68

08004a3c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e14a      	b.n	8004ce4 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f007 f916 	bl	800bc94 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f94d 	bl	8004d08 <SAI_Disable>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e135      	b.n	8004ce4 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d007      	beq.n	8004a98 <HAL_SAI_Init+0x5c>
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d302      	bcc.n	8004a92 <HAL_SAI_Init+0x56>
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d006      	beq.n	8004a9e <HAL_SAI_Init+0x62>
 8004a90:	e008      	b.n	8004aa4 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
      break;
 8004a96:	e008      	b.n	8004aaa <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a98:	2310      	movs	r3, #16
 8004a9a:	61fb      	str	r3, [r7, #28]
      break;
 8004a9c:	e005      	b.n	8004aaa <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	61fb      	str	r3, [r7, #28]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      break;
 8004aa8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d81d      	bhi.n	8004aee <HAL_SAI_Init+0xb2>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_SAI_Init+0x7c>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004acf 	.word	0x08004acf
 8004ac0:	08004ad7 	.word	0x08004ad7
 8004ac4:	08004adf 	.word	0x08004adf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
      break;
 8004acc:	e012      	b.n	8004af4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	e00e      	b.n	8004af4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ada:	617b      	str	r3, [r7, #20]
      break;
 8004adc:	e00a      	b.n	8004af4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
      break;
 8004aec:	e002      	b.n	8004af4 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
      break;
 8004af2:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7c      	ldr	r2, [pc, #496]	; (8004cec <HAL_SAI_Init+0x2b0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_SAI_Init+0xcc>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7b      	ldr	r2, [pc, #492]	; (8004cf0 <HAL_SAI_Init+0x2b4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d103      	bne.n	8004b10 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004b08:	4a7a      	ldr	r2, [pc, #488]	; (8004cf4 <HAL_SAI_Init+0x2b8>)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e002      	b.n	8004b16 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004b10:	4a79      	ldr	r2, [pc, #484]	; (8004cf8 <HAL_SAI_Init+0x2bc>)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d038      	beq.n	8004b90 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a72      	ldr	r2, [pc, #456]	; (8004cec <HAL_SAI_Init+0x2b0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_SAI_Init+0xf6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a70      	ldr	r2, [pc, #448]	; (8004cf0 <HAL_SAI_Init+0x2b4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d105      	bne.n	8004b3e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b36:	f7ff f867 	bl	8003c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b3a:	6138      	str	r0, [r7, #16]
 8004b3c:	e004      	b.n	8004b48 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b42:	f7ff f861 	bl	8003c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b46:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a66      	ldr	r2, [pc, #408]	; (8004cfc <HAL_SAI_Init+0x2c0>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	08da      	lsrs	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_SAI_Init+0x2c0>)
 8004b72:	fba3 2301 	umull	r2, r3, r3, r1
 8004b76:	08da      	lsrs	r2, r3, #3
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	1aca      	subs	r2, r1, r3
 8004b82:	2a08      	cmp	r2, #8
 8004b84:	d904      	bls.n	8004b90 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_SAI_Init+0x164>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d109      	bne.n	8004bb4 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_SAI_Init+0x170>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e001      	b.n	8004bb0 <HAL_SAI_Init+0x174>
 8004bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e008      	b.n	8004bc6 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d102      	bne.n	8004bc2 <HAL_SAI_Init+0x186>
 8004bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bc0:	e000      	b.n	8004bc4 <HAL_SAI_Init+0x188>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b4b      	ldr	r3, [pc, #300]	; (8004d00 <HAL_SAI_Init+0x2c4>)
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004bfe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c0a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	051b      	lsls	r3, r3, #20
 8004c12:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004c2a:	f023 030f 	bic.w	r3, r3, #15
 8004c2e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_SAI_Init+0x2c8>)
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c6e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004c74:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c7a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	3b01      	subs	r3, #1
 8004c82:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004c84:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68d9      	ldr	r1, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68d9      	ldr	r1, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cb6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40015404 	.word	0x40015404
 8004cf0:	40015424 	.word	0x40015424
 8004cf4:	40015400 	.word	0x40015400
 8004cf8:	40015800 	.word	0x40015800
 8004cfc:	cccccccd 	.word	0xcccccccd
 8004d00:	ff05c010 	.word	0xff05c010
 8004d04:	fff88000 	.word	0xfff88000

08004d08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004d08:	b490      	push	{r4, r7}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d10:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <SAI_Disable+0x60>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <SAI_Disable+0x64>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0b1b      	lsrs	r3, r3, #12
 8004d1c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d30:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004d32:	2c00      	cmp	r4, #0
 8004d34:	d10a      	bne.n	8004d4c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4a:	e007      	b.n	8004d5c <SAI_Disable+0x54>
    }
    count--;
 8004d4c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ea      	bne.n	8004d32 <SAI_Disable+0x2a>

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc90      	pop	{r4, r7}
 8004d66:	4770      	bx	lr
 8004d68:	20000038 	.word	0x20000038
 8004d6c:	95cbec1b 	.word	0x95cbec1b

08004d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07c      	b.n	8004e7c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f007 f82f 	bl	800be00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc2:	d902      	bls.n	8004dca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e002      	b.n	8004dd0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dd8:	d007      	beq.n	8004dea <HAL_SPI_Init+0x7a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dfa:	d903      	bls.n	8004e04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
 8004e02:	e002      	b.n	8004e0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	f003 0204 	and.w	r2, r3, #4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e01d      	b.n	8004ed2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f815 	bl	8004eda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 f986 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_TIM_Base_Start_IT+0x50>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d00b      	beq.n	8004f32 <HAL_TIM_Base_Start_IT+0x42>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	00010007 	.word	0x00010007

08004f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0202 	mvn.w	r2, #2
 8004f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f905 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8f7 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f908 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0204 	mvn.w	r2, #4
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8db 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8cd 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8de 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8b1 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8a3 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8b4 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f887 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f879 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f88a 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0201 	mvn.w	r2, #1
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f006 fb8a 	bl	800b7dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f914 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f907 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d10e      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d107      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f838 	bl	80051be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b20      	cmp	r3, #32
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8c7 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <TIM_Base_SetConfig+0x118>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2c      	ldr	r2, [pc, #176]	; (80052ec <TIM_Base_SetConfig+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a29      	ldr	r2, [pc, #164]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a28      	ldr	r2, [pc, #160]	; (80052fc <TIM_Base_SetConfig+0x128>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <TIM_Base_SetConfig+0x130>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a11      	ldr	r2, [pc, #68]	; (80052fc <TIM_Base_SetConfig+0x128>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <TIM_Base_SetConfig+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e040      	b.n	80053d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f006 ff0e 	bl	800c188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa04 	bl	8005790 <UART_SetConfig>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e022      	b.n	80053d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fd40 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fdc7 	bl	8005f64 <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	f040 8081 	bne.w	80054fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Transmit+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e079      	b.n	80054fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UART_Transmit+0x38>
 8005414:	2302      	movs	r3, #2
 8005416:	e072      	b.n	80054fe <HAL_UART_Transmit+0x11e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800542c:	f7fb f882 	bl	8000534 <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	88fa      	ldrh	r2, [r7, #6]
 8005436:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d108      	bne.n	800545e <HAL_UART_Transmit+0x7e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d104      	bne.n	800545e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e003      	b.n	8005466 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005466:	e02d      	b.n	80054c4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fdbb 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e03d      	b.n	80054fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005494:	b292      	uxth	r2, r2
 8005496:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	3302      	adds	r3, #2
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e008      	b.n	80054b2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b292      	uxth	r2, r2
 80054aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	3301      	adds	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1cb      	bne.n	8005468 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fd87 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e009      	b.n	80054fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d113      	bne.n	800555e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80ff 	beq.w	8005752 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
      }
      return;
 800555c:	e0f9      	b.n	8005752 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80c1 	beq.w	80056e8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80b6 	beq.w	80056e8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00e      	beq.n	80055a4 <HAL_UART_IRQHandler+0x9c>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <HAL_UART_IRQHandler+0xc4>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2202      	movs	r2, #2
 80055be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c4:	f043 0204 	orr.w	r2, r3, #4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00e      	beq.n	80055f4 <HAL_UART_IRQHandler+0xec>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2204      	movs	r2, #4
 80055e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ec:	f043 0202 	orr.w	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2208      	movs	r2, #8
 8005618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561e:	f043 0208 	orr.w	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8093 	beq.w	8005756 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005658:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d004      	beq.n	8005672 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d031      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fd03 	bl	800607e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d123      	bne.n	80056ce <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005694:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d013      	beq.n	80056c6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a2:	4a30      	ldr	r2, [pc, #192]	; (8005764 <HAL_UART_IRQHandler+0x25c>)
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fb f852 	bl	8000754 <HAL_DMA_Abort_IT>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80056c0:	4610      	mov	r0, r2
 80056c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	e00e      	b.n	80056e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f858 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e00a      	b.n	80056e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f854 	bl	800577c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e006      	b.n	80056e4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f850 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80056e2:	e038      	b.n	8005756 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	bf00      	nop
    return;
 80056e6:	e036      	b.n	8005756 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <HAL_UART_IRQHandler+0x206>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fd08 	bl	800611c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800570c:	e026      	b.n	800575c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005726:	2b00      	cmp	r3, #0
 8005728:	d017      	beq.n	800575a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
    }
    return;
 8005732:	e012      	b.n	800575a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <HAL_UART_IRQHandler+0x254>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fcce 	bl	80060ea <UART_EndTransmit_IT>
    return;
 800574e:	bf00      	nop
 8005750:	e004      	b.n	800575c <HAL_UART_IRQHandler+0x254>
      return;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <HAL_UART_IRQHandler+0x254>
    return;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_UART_IRQHandler+0x254>
    return;
 800575a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	080060bf 	.word	0x080060bf

08005768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4bac      	ldr	r3, [pc, #688]	; (8005a78 <UART_SetConfig+0x2e8>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4aa2      	ldr	r2, [pc, #648]	; (8005a7c <UART_SetConfig+0x2ec>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a99      	ldr	r2, [pc, #612]	; (8005a80 <UART_SetConfig+0x2f0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d121      	bne.n	8005864 <UART_SetConfig+0xd4>
 8005820:	4b98      	ldr	r3, [pc, #608]	; (8005a84 <UART_SetConfig+0x2f4>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b03      	cmp	r3, #3
 800582c:	d816      	bhi.n	800585c <UART_SetConfig+0xcc>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0xa4>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005845 	.word	0x08005845
 8005838:	08005851 	.word	0x08005851
 800583c:	0800584b 	.word	0x0800584b
 8005840:	08005857 	.word	0x08005857
 8005844:	2301      	movs	r3, #1
 8005846:	76fb      	strb	r3, [r7, #27]
 8005848:	e0e8      	b.n	8005a1c <UART_SetConfig+0x28c>
 800584a:	2302      	movs	r3, #2
 800584c:	76fb      	strb	r3, [r7, #27]
 800584e:	e0e5      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005850:	2304      	movs	r3, #4
 8005852:	76fb      	strb	r3, [r7, #27]
 8005854:	e0e2      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005856:	2308      	movs	r3, #8
 8005858:	76fb      	strb	r3, [r7, #27]
 800585a:	e0df      	b.n	8005a1c <UART_SetConfig+0x28c>
 800585c:	2310      	movs	r3, #16
 800585e:	76fb      	strb	r3, [r7, #27]
 8005860:	bf00      	nop
 8005862:	e0db      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a87      	ldr	r2, [pc, #540]	; (8005a88 <UART_SetConfig+0x2f8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d134      	bne.n	80058d8 <UART_SetConfig+0x148>
 800586e:	4b85      	ldr	r3, [pc, #532]	; (8005a84 <UART_SetConfig+0x2f4>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d829      	bhi.n	80058d0 <UART_SetConfig+0x140>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0xf4>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058c5 	.word	0x080058c5
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058bf 	.word	0x080058bf
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058cb 	.word	0x080058cb
 80058b8:	2300      	movs	r3, #0
 80058ba:	76fb      	strb	r3, [r7, #27]
 80058bc:	e0ae      	b.n	8005a1c <UART_SetConfig+0x28c>
 80058be:	2302      	movs	r3, #2
 80058c0:	76fb      	strb	r3, [r7, #27]
 80058c2:	e0ab      	b.n	8005a1c <UART_SetConfig+0x28c>
 80058c4:	2304      	movs	r3, #4
 80058c6:	76fb      	strb	r3, [r7, #27]
 80058c8:	e0a8      	b.n	8005a1c <UART_SetConfig+0x28c>
 80058ca:	2308      	movs	r3, #8
 80058cc:	76fb      	strb	r3, [r7, #27]
 80058ce:	e0a5      	b.n	8005a1c <UART_SetConfig+0x28c>
 80058d0:	2310      	movs	r3, #16
 80058d2:	76fb      	strb	r3, [r7, #27]
 80058d4:	bf00      	nop
 80058d6:	e0a1      	b.n	8005a1c <UART_SetConfig+0x28c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6b      	ldr	r2, [pc, #428]	; (8005a8c <UART_SetConfig+0x2fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d120      	bne.n	8005924 <UART_SetConfig+0x194>
 80058e2:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <UART_SetConfig+0x2f4>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d00f      	beq.n	8005910 <UART_SetConfig+0x180>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d802      	bhi.n	80058fa <UART_SetConfig+0x16a>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <UART_SetConfig+0x174>
 80058f8:	e010      	b.n	800591c <UART_SetConfig+0x18c>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d005      	beq.n	800590a <UART_SetConfig+0x17a>
 80058fe:	2b30      	cmp	r3, #48	; 0x30
 8005900:	d009      	beq.n	8005916 <UART_SetConfig+0x186>
 8005902:	e00b      	b.n	800591c <UART_SetConfig+0x18c>
 8005904:	2300      	movs	r3, #0
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e088      	b.n	8005a1c <UART_SetConfig+0x28c>
 800590a:	2302      	movs	r3, #2
 800590c:	76fb      	strb	r3, [r7, #27]
 800590e:	e085      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005910:	2304      	movs	r3, #4
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	e082      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005916:	2308      	movs	r3, #8
 8005918:	76fb      	strb	r3, [r7, #27]
 800591a:	e07f      	b.n	8005a1c <UART_SetConfig+0x28c>
 800591c:	2310      	movs	r3, #16
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	bf00      	nop
 8005922:	e07b      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a59      	ldr	r2, [pc, #356]	; (8005a90 <UART_SetConfig+0x300>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d120      	bne.n	8005970 <UART_SetConfig+0x1e0>
 800592e:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <UART_SetConfig+0x2f4>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d00f      	beq.n	800595c <UART_SetConfig+0x1cc>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d802      	bhi.n	8005946 <UART_SetConfig+0x1b6>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <UART_SetConfig+0x1c0>
 8005944:	e010      	b.n	8005968 <UART_SetConfig+0x1d8>
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d005      	beq.n	8005956 <UART_SetConfig+0x1c6>
 800594a:	2bc0      	cmp	r3, #192	; 0xc0
 800594c:	d009      	beq.n	8005962 <UART_SetConfig+0x1d2>
 800594e:	e00b      	b.n	8005968 <UART_SetConfig+0x1d8>
 8005950:	2300      	movs	r3, #0
 8005952:	76fb      	strb	r3, [r7, #27]
 8005954:	e062      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005956:	2302      	movs	r3, #2
 8005958:	76fb      	strb	r3, [r7, #27]
 800595a:	e05f      	b.n	8005a1c <UART_SetConfig+0x28c>
 800595c:	2304      	movs	r3, #4
 800595e:	76fb      	strb	r3, [r7, #27]
 8005960:	e05c      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005962:	2308      	movs	r3, #8
 8005964:	76fb      	strb	r3, [r7, #27]
 8005966:	e059      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005968:	2310      	movs	r3, #16
 800596a:	76fb      	strb	r3, [r7, #27]
 800596c:	bf00      	nop
 800596e:	e055      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a47      	ldr	r2, [pc, #284]	; (8005a94 <UART_SetConfig+0x304>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d124      	bne.n	80059c4 <UART_SetConfig+0x234>
 800597a:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <UART_SetConfig+0x2f4>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005988:	d012      	beq.n	80059b0 <UART_SetConfig+0x220>
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d802      	bhi.n	8005996 <UART_SetConfig+0x206>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <UART_SetConfig+0x214>
 8005994:	e012      	b.n	80059bc <UART_SetConfig+0x22c>
 8005996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599a:	d006      	beq.n	80059aa <UART_SetConfig+0x21a>
 800599c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a0:	d009      	beq.n	80059b6 <UART_SetConfig+0x226>
 80059a2:	e00b      	b.n	80059bc <UART_SetConfig+0x22c>
 80059a4:	2300      	movs	r3, #0
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	e038      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059aa:	2302      	movs	r3, #2
 80059ac:	76fb      	strb	r3, [r7, #27]
 80059ae:	e035      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059b0:	2304      	movs	r3, #4
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	e032      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059b6:	2308      	movs	r3, #8
 80059b8:	76fb      	strb	r3, [r7, #27]
 80059ba:	e02f      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059bc:	2310      	movs	r3, #16
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	bf00      	nop
 80059c2:	e02b      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <UART_SetConfig+0x2ec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d124      	bne.n	8005a18 <UART_SetConfig+0x288>
 80059ce:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <UART_SetConfig+0x2f4>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059dc:	d012      	beq.n	8005a04 <UART_SetConfig+0x274>
 80059de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e2:	d802      	bhi.n	80059ea <UART_SetConfig+0x25a>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <UART_SetConfig+0x268>
 80059e8:	e012      	b.n	8005a10 <UART_SetConfig+0x280>
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ee:	d006      	beq.n	80059fe <UART_SetConfig+0x26e>
 80059f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f4:	d009      	beq.n	8005a0a <UART_SetConfig+0x27a>
 80059f6:	e00b      	b.n	8005a10 <UART_SetConfig+0x280>
 80059f8:	2300      	movs	r3, #0
 80059fa:	76fb      	strb	r3, [r7, #27]
 80059fc:	e00e      	b.n	8005a1c <UART_SetConfig+0x28c>
 80059fe:	2302      	movs	r3, #2
 8005a00:	76fb      	strb	r3, [r7, #27]
 8005a02:	e00b      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005a04:	2304      	movs	r3, #4
 8005a06:	76fb      	strb	r3, [r7, #27]
 8005a08:	e008      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	76fb      	strb	r3, [r7, #27]
 8005a0e:	e005      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005a10:	2310      	movs	r3, #16
 8005a12:	76fb      	strb	r3, [r7, #27]
 8005a14:	bf00      	nop
 8005a16:	e001      	b.n	8005a1c <UART_SetConfig+0x28c>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <UART_SetConfig+0x2ec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	f040 80fa 	bne.w	8005c1c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a28:	7efb      	ldrb	r3, [r7, #27]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d836      	bhi.n	8005a9c <UART_SetConfig+0x30c>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x2a4>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a9d 	.word	0x08005a9d
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a9d 	.word	0x08005a9d
 8005a44:	08005a67 	.word	0x08005a67
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005a9d 	.word	0x08005a9d
 8005a54:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fd fd22 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a5e:	e020      	b.n	8005aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <UART_SetConfig+0x308>)
 8005a62:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a64:	e01d      	b.n	8005aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fd fc85 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8005a6a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a6c:	e019      	b.n	8005aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a72:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a74:	e015      	b.n	8005aa2 <UART_SetConfig+0x312>
 8005a76:	bf00      	nop
 8005a78:	efff69f3 	.word	0xefff69f3
 8005a7c:	40008000 	.word	0x40008000
 8005a80:	40013800 	.word	0x40013800
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	40004c00 	.word	0x40004c00
 8005a94:	40005000 	.word	0x40005000
 8005a98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	74fb      	strb	r3, [r7, #19]
        break;
 8005aa0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 81ac 	beq.w	8005e02 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d305      	bcc.n	8005ac6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d902      	bls.n	8005acc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	74fb      	strb	r3, [r7, #19]
 8005aca:	e19a      	b.n	8005e02 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8005acc:	7efb      	ldrb	r3, [r7, #27]
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	f200 8091 	bhi.w	8005bf6 <UART_SetConfig+0x466>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x34c>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005bf7 	.word	0x08005bf7
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005bf7 	.word	0x08005bf7
 8005aec:	08005b81 	.word	0x08005b81
 8005af0:	08005bf7 	.word	0x08005bf7
 8005af4:	08005bf7 	.word	0x08005bf7
 8005af8:	08005bf7 	.word	0x08005bf7
 8005afc:	08005bcd 	.word	0x08005bcd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b00:	f7fd fcce 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4619      	mov	r1, r3
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	0214      	lsls	r4, r2, #8
 8005b16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b1a:	020b      	lsls	r3, r1, #8
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	0852      	lsrs	r2, r2, #1
 8005b22:	4611      	mov	r1, r2
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	eb13 0b01 	adds.w	fp, r3, r1
 8005b2c:	eb44 0c02 	adc.w	ip, r4, r2
 8005b30:	4658      	mov	r0, fp
 8005b32:	4661      	mov	r1, ip
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	f7fa fb46 	bl	80001d0 <__aeabi_uldivmod>
 8005b44:	4603      	mov	r3, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b4a:	e057      	b.n	8005bfc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	49b1      	ldr	r1, [pc, #708]	; (8005e1c <UART_SetConfig+0x68c>)
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	eb13 0b01 	adds.w	fp, r3, r1
 8005b60:	eb44 0c02 	adc.w	ip, r4, r2
 8005b64:	4658      	mov	r0, fp
 8005b66:	4661      	mov	r1, ip
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	461a      	mov	r2, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	f7fa fb2c 	bl	80001d0 <__aeabi_uldivmod>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b7e:	e03d      	b.n	8005bfc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b80:	f7fd fbf8 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8005b84:	4603      	mov	r3, r0
 8005b86:	4619      	mov	r1, r3
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	f04f 0400 	mov.w	r4, #0
 8005b94:	0214      	lsls	r4, r2, #8
 8005b96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b9a:	020b      	lsls	r3, r1, #8
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6852      	ldr	r2, [r2, #4]
 8005ba0:	0852      	lsrs	r2, r2, #1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	eb13 0b01 	adds.w	fp, r3, r1
 8005bac:	eb44 0c02 	adc.w	ip, r4, r2
 8005bb0:	4658      	mov	r0, fp
 8005bb2:	4661      	mov	r1, ip
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f04f 0400 	mov.w	r4, #0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	f7fa fb06 	bl	80001d0 <__aeabi_uldivmod>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005bca:	e017      	b.n	8005bfc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005bda:	f144 0100 	adc.w	r1, r4, #0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	461a      	mov	r2, r3
 8005be8:	4623      	mov	r3, r4
 8005bea:	f7fa faf1 	bl	80001d0 <__aeabi_uldivmod>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005bf4:	e002      	b.n	8005bfc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	74fb      	strb	r3, [r7, #19]
            break;
 8005bfa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d308      	bcc.n	8005c16 <UART_SetConfig+0x486>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0a:	d204      	bcs.n	8005c16 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e0f5      	b.n	8005e02 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	74fb      	strb	r3, [r7, #19]
 8005c1a:	e0f2      	b.n	8005e02 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c24:	d17f      	bne.n	8005d26 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8005c26:	7efb      	ldrb	r3, [r7, #27]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d85c      	bhi.n	8005ce6 <UART_SetConfig+0x556>
 8005c2c:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <UART_SetConfig+0x4a4>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c77 	.word	0x08005c77
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005ce7 	.word	0x08005ce7
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005ce7 	.word	0x08005ce7
 8005c4c:	08005ce7 	.word	0x08005ce7
 8005c50:	08005ce7 	.word	0x08005ce7
 8005c54:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c58:	f7fd fc22 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	005a      	lsls	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	441a      	add	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c74:	e03a      	b.n	8005cec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c76:	f7fd fc29 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c92:	e02b      	b.n	8005cec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6852      	ldr	r2, [r2, #4]
 8005ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cae:	e01d      	b.n	8005cec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cb0:	f7fd fb60 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	005a      	lsls	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	441a      	add	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ccc:	e00e      	b.n	8005cec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ce4:	e002      	b.n	8005cec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8005cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d916      	bls.n	8005d20 <UART_SetConfig+0x590>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d212      	bcs.n	8005d20 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f023 030f 	bic.w	r3, r3, #15
 8005d02:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	897a      	ldrh	r2, [r7, #10]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e070      	b.n	8005e02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	74fb      	strb	r3, [r7, #19]
 8005d24:	e06d      	b.n	8005e02 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8005d26:	7efb      	ldrb	r3, [r7, #27]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d859      	bhi.n	8005de0 <UART_SetConfig+0x650>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x5a4>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d75 	.word	0x08005d75
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005de1 	.word	0x08005de1
 8005d44:	08005dad 	.word	0x08005dad
 8005d48:	08005de1 	.word	0x08005de1
 8005d4c:	08005de1 	.word	0x08005de1
 8005d50:	08005de1 	.word	0x08005de1
 8005d54:	08005dc9 	.word	0x08005dc9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d58:	f7fd fba2 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d72:	e038      	b.n	8005de6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005d74:	f7fd fbaa 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d8e:	e02a      	b.n	8005de6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005d9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6852      	ldr	r2, [r2, #4]
 8005da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005daa:	e01c      	b.n	8005de6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005dac:	f7fd fae2 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dc6:	e00e      	b.n	8005de6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dde:	e002      	b.n	8005de6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	74fb      	strb	r3, [r7, #19]
        break;
 8005de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d908      	bls.n	8005dfe <UART_SetConfig+0x66e>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d204      	bcs.n	8005dfe <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	e001      	b.n	8005e02 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e1a:	bf00      	nop
 8005e1c:	f4240000 	.word	0xf4240000

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f72:	f7fa fadf 	bl	8000534 <HAL_GetTick>
 8005f76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d10e      	bne.n	8005fa4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f82a 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e020      	b.n	8005fe6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d10e      	bne.n	8005fd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f814 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e00a      	b.n	8005fe6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	e02a      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d026      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006008:	f7fa fa94 	bl	8000534 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <UART_WaitOnFlagUntilTimeout+0x30>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11b      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800602c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d0c5      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006094:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fb4d 	bl	800577c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006100:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fb2a 	bl	8005768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006130:	b084      	sub	sp, #16
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	f107 001c 	add.w	r0, r7, #28
 800613e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	d122      	bne.n	800618e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f936 	bl	80063f4 <USB_CoreReset>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e01a      	b.n	80061c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f92a 	bl	80063f4 <USB_CoreReset>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
 80061b6:	e005      	b.n	80061c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr

080061d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f043 0201 	orr.w	r2, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d106      	bne.n	8006244 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	e00b      	b.n	800625c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e001      	b.n	800625c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e003      	b.n	8006264 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800625c:	2032      	movs	r0, #50	; 0x32
 800625e:	f7fa f975 	bl	800054c <HAL_Delay>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <USB_FlushTxFifo+0x48>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e006      	b.n	80062a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d0f0      	beq.n	8006286 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	00030d40 	.word	0x00030d40

080062b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2210      	movs	r2, #16
 80062c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <USB_FlushRxFifo+0x40>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d0f0      	beq.n	80062ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	00030d40 	.word	0x00030d40

080062fc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	460b      	mov	r3, r1
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	4613      	mov	r3, r2
 8006310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800631a:	88bb      	ldrh	r3, [r7, #4]
 800631c:	3303      	adds	r3, #3
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e00f      	b.n	8006348 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	031a      	lsls	r2, r3, #12
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006334:	461a      	mov	r2, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3304      	adds	r3, #4
 8006340:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	3301      	adds	r3, #1
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d3eb      	bcc.n	8006328 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800635e:	b480      	push	{r7}
 8006360:	b089      	sub	sp, #36	; 0x24
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	3303      	adds	r3, #3
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e00b      	b.n	800639a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	601a      	str	r2, [r3, #0]
    pDest++;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3304      	adds	r3, #4
 8006392:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	3301      	adds	r3, #1
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3ef      	bcc.n	8006382 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80063a2:	69fb      	ldr	r3, [r7, #28]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4013      	ands	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0301 	and.w	r3, r3, #1
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a13      	ldr	r2, [pc, #76]	; (8006458 <USB_CoreReset+0x64>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e01b      	b.n	800644a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	daf2      	bge.n	8006400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f043 0201 	orr.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <USB_CoreReset+0x64>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d901      	bls.n	800643c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e006      	b.n	800644a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d0f0      	beq.n	800642a <USB_CoreReset+0x36>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	00030d40 	.word	0x00030d40

0800645c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800645c:	b084      	sub	sp, #16
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	f107 001c 	add.w	r0, r7, #28
 800646a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80064aa:	2110      	movs	r1, #16
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fedd 	bl	800626c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ff00 	bl	80062b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e015      	b.n	80064ea <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295
 80064d0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	461a      	mov	r2, r3
 80064e0:	2300      	movs	r3, #0
 80064e2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3e5      	bcc.n	80064be <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80064f2:	2101      	movs	r1, #1
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f893 	bl	8006620 <USB_DriveVbus>

  HAL_Delay(200U);
 80064fa:	20c8      	movs	r0, #200	; 0xc8
 80064fc:	f7fa f826 	bl	800054c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f04f 32ff 	mov.w	r2, #4294967295
 800650c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2280      	movs	r2, #128	; 0x80
 8006512:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a0d      	ldr	r2, [pc, #52]	; (800654c <USB_HostInit+0xf0>)
 8006518:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <USB_HostInit+0xf4>)
 800651e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f043 0210 	orr.w	r2, r3, #16
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <USB_HostInit+0xf8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006546:	b004      	add	sp, #16
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	00600080 	.word	0x00600080
 8006550:	004000e0 	.word	0x004000e0
 8006554:	a3200008 	.word	0xa3200008

08006558 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d107      	bne.n	80065aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a0:	461a      	mov	r2, r3
 80065a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065a6:	6053      	str	r3, [r2, #4]
 80065a8:	e009      	b.n	80065be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d106      	bne.n	80065be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b6:	461a      	mov	r2, r3
 80065b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80065bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80065fc:	2064      	movs	r0, #100	; 0x64
 80065fe:	f7f9 ffa5 	bl	800054c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800660a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800660e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006610:	200a      	movs	r0, #10
 8006612:	f7f9 ff9b 	bl	800054c <HAL_Delay>

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006644:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d109      	bne.n	8006664 <USB_DriveVbus+0x44>
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d106      	bne.n	8006664 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800665e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006662:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d109      	bne.n	8006684 <USB_DriveVbus+0x64>
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800667e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006682:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	0c5b      	lsrs	r3, r3, #17
 80066b0:	f003 0303 	and.w	r3, r3, #3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	b29b      	uxth	r3, r3
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	4608      	mov	r0, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	461a      	mov	r2, r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	70fb      	strb	r3, [r7, #3]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70bb      	strb	r3, [r7, #2]
 80066fa:	4613      	mov	r3, r2
 80066fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	461a      	mov	r2, r3
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800671a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800671e:	2b03      	cmp	r3, #3
 8006720:	d867      	bhi.n	80067f2 <USB_HC_Init+0x10e>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <USB_HC_Init+0x44>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006739 	.word	0x08006739
 800672c:	080067b5 	.word	0x080067b5
 8006730:	08006739 	.word	0x08006739
 8006734:	08006777 	.word	0x08006777
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	461a      	mov	r2, r3
 8006746:	f240 439d 	movw	r3, #1181	; 0x49d
 800674a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800674c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006750:	2b00      	cmp	r3, #0
 8006752:	da51      	bge.n	80067f8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4413      	add	r3, r2
 800675c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	440a      	add	r2, r1
 800676a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006772:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006774:	e040      	b.n	80067f8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	461a      	mov	r2, r3
 8006784:	f240 639d 	movw	r3, #1693	; 0x69d
 8006788:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800678a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da34      	bge.n	80067fc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067b2:	e023      	b.n	80067fc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	461a      	mov	r2, r3
 80067c2:	f240 2325 	movw	r3, #549	; 0x225
 80067c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da17      	bge.n	8006800 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ea:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80067ee:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067f0:	e006      	b.n	8006800 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
      break;
 80067f6:	e004      	b.n	8006802 <USB_HC_Init+0x11e>
      break;
 80067f8:	bf00      	nop
 80067fa:	e002      	b.n	8006802 <USB_HC_Init+0x11e>
      break;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <USB_HC_Init+0x11e>
      break;
 8006800:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800682c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da03      	bge.n	800683c <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	e001      	b.n	8006840 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006840:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d103      	bne.n	8006850 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e001      	b.n	8006854 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006854:	787b      	ldrb	r3, [r7, #1]
 8006856:	059b      	lsls	r3, r3, #22
 8006858:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800685c:	78bb      	ldrb	r3, [r7, #2]
 800685e:	02db      	lsls	r3, r3, #11
 8006860:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006864:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800686a:	049b      	lsls	r3, r3, #18
 800686c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006870:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006874:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006878:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	0159      	lsls	r1, r3, #5
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	440b      	add	r3, r1
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006890:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006896:	2b03      	cmp	r3, #3
 8006898:	d10f      	bne.n	80068ba <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	8912      	ldrh	r2, [r2, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	3b01      	subs	r3, #1
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	8912      	ldrh	r2, [r2, #8]
 80068fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fe:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006900:	8bfa      	ldrh	r2, [r7, #30]
 8006902:	8a7b      	ldrh	r3, [r7, #18]
 8006904:	429a      	cmp	r2, r3
 8006906:	d90b      	bls.n	8006920 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006908:	8a7b      	ldrh	r3, [r7, #18]
 800690a:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	8912      	ldrh	r2, [r2, #8]
 8006912:	fb02 f203 	mul.w	r2, r2, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	611a      	str	r2, [r3, #16]
 800691a:	e001      	b.n	8006920 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800691c:	2301      	movs	r3, #1
 800691e:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	78db      	ldrb	r3, [r3, #3]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006928:	8bfb      	ldrh	r3, [r7, #30]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	8912      	ldrh	r2, [r2, #8]
 800692e:	fb02 f203 	mul.w	r2, r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800693e:	8bfb      	ldrh	r3, [r7, #30]
 8006940:	04d9      	lsls	r1, r3, #19
 8006942:	4b5f      	ldr	r3, [pc, #380]	; (8006ac0 <USB_HC_StartXfer+0x1f8>)
 8006944:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006946:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	7a9b      	ldrb	r3, [r3, #10]
 800694c:	075b      	lsls	r3, r3, #29
 800694e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	0148      	lsls	r0, r1, #5
 8006956:	69b9      	ldr	r1, [r7, #24]
 8006958:	4401      	add	r1, r0
 800695a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800695e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006960:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf0c      	ite	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	2300      	movne	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	440a      	add	r2, r1
 8006990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006994:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006998:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	7c7b      	ldrb	r3, [r7, #17]
 80069aa:	075b      	lsls	r3, r3, #29
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	0148      	lsls	r0, r1, #5
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	4401      	add	r1, r0
 80069b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a3e      	ldr	r2, [pc, #248]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069cc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069ce:	4b3d      	ldr	r3, [pc, #244]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069d6:	4a3b      	ldr	r2, [pc, #236]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069d8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	78db      	ldrb	r3, [r3, #3]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	4a36      	ldr	r2, [pc, #216]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e005      	b.n	80069fc <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80069f0:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069f8:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069fa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069fc:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a04:	4a2f      	ldr	r2, [pc, #188]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 8006a06:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	461a      	mov	r2, r3
 8006a16:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <USB_HC_StartXfer+0x1fc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	78db      	ldrb	r3, [r3, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d148      	bne.n	8006ab6 <USB_HC_StartXfer+0x1ee>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d044      	beq.n	8006ab6 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	79db      	ldrb	r3, [r3, #7]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d831      	bhi.n	8006a98 <USB_HC_StartXfer+0x1d0>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <USB_HC_StartXfer+0x174>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006a4d 	.word	0x08006a4d
 8006a48:	08006a71 	.word	0x08006a71
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	3303      	adds	r3, #3
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a56:	89fa      	ldrh	r2, [r7, #14]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d91c      	bls.n	8006a9c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f043 0220 	orr.w	r2, r3, #32
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
          }
          break;
 8006a6e:	e015      	b.n	8006a9c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	3303      	adds	r3, #3
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a7a:	89fa      	ldrh	r2, [r7, #14]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d90a      	bls.n	8006aa0 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	619a      	str	r2, [r3, #24]
          }
          break;
 8006a96:	e003      	b.n	8006aa0 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8006a98:	bf00      	nop
 8006a9a:	e002      	b.n	8006aa2 <USB_HC_StartXfer+0x1da>
          break;
 8006a9c:	bf00      	nop
 8006a9e:	e000      	b.n	8006aa2 <USB_HC_StartXfer+0x1da>
          break;
 8006aa0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	785a      	ldrb	r2, [r3, #1]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fc23 	bl	80062fc <USB_WritePacket>
    }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	1ff80000 	.word	0x1ff80000
 8006ac4:	200000bc 	.word	0x200000bc

08006ac8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	b29b      	uxth	r3, r3
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	0c9b      	lsrs	r3, r3, #18
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <USB_HC_Halt+0x3a>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d16c      	bne.n	8006bfe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d143      	bne.n	8006bd8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbc:	d81d      	bhi.n	8006bfa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bd4:	d0ec      	beq.n	8006bb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bd6:	e080      	b.n	8006cda <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bf6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bf8:	e06f      	b.n	8006cda <USB_HC_Halt+0x1f0>
          break;
 8006bfa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bfc:	e06d      	b.n	8006cda <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c1c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d143      	bne.n	8006cb6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c8c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	3301      	adds	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c9a:	d81d      	bhi.n	8006cd8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb2:	d0ec      	beq.n	8006c8e <USB_HC_Halt+0x1a4>
 8006cb4:	e011      	b.n	8006cda <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e000      	b.n	8006cda <USB_HC_Halt+0x1f0>
          break;
 8006cd8:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fa7c 	bl	80061f6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006cfe:	2110      	movs	r1, #16
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fab3 	bl	800626c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fad6 	bl	80062b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	e01f      	b.n	8006d52 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	461a      	mov	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b0f      	cmp	r3, #15
 8006d56:	d9dc      	bls.n	8006d12 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	e034      	b.n	8006dc8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	461a      	mov	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da4:	d80c      	bhi.n	8006dc0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dbc:	d0ec      	beq.n	8006d98 <USB_StopHost+0xb0>
 8006dbe:	e000      	b.n	8006dc2 <USB_StopHost+0xda>
        break;
 8006dc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d9c7      	bls.n	8006d5e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff f9f5 	bl	80061d4 <USB_EnableGlobalInt>

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006e00:	2301      	movs	r3, #1
 8006e02:	2202      	movs	r2, #2
 8006e04:	2102      	movs	r1, #2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fc8c 	bl	8007724 <USBH_FindInterface>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2bff      	cmp	r3, #255	; 0xff
 8006e14:	f000 812a 	beq.w	800706c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc65 	bl	80076ec <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006e28:	2050      	movs	r0, #80	; 0x50
 8006e2a:	f005 fd51 	bl	800c8d0 <malloc>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	211a      	movs	r1, #26
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	da15      	bge.n	8006e80 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	211a      	movs	r1, #26
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	211a      	movs	r1, #26
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006e7a:	881a      	ldrh	r2, [r3, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 ff2f 	bl	8008cea <USBH_AllocPipe>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	7858      	ldrb	r0, [r3, #1]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	8952      	ldrh	r2, [r2, #10]
 8006eac:	9202      	str	r2, [sp, #8]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	9201      	str	r2, [sp, #4]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fee7 	bl	8008c8c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f005 fc28 	bl	800c71c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	210a      	movs	r1, #10
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fc26 	bl	8007724 <USBH_FindInterface>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2bff      	cmp	r3, #255	; 0xff
 8006ee0:	f000 80c4 	beq.w	800706c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	211a      	movs	r1, #26
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da16      	bge.n	8006f2a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	211a      	movs	r1, #26
 8006f02:	fb01 f303 	mul.w	r3, r1, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	211a      	movs	r1, #26
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	835a      	strh	r2, [r3, #26]
 8006f28:	e015      	b.n	8006f56 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	211a      	movs	r1, #26
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	4413      	add	r3, r2
 8006f36:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	211a      	movs	r1, #26
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006f50:	881a      	ldrh	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	211a      	movs	r1, #26
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b25b      	sxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da16      	bge.n	8006f9c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	211a      	movs	r1, #26
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	211a      	movs	r1, #26
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	835a      	strh	r2, [r3, #26]
 8006f9a:	e015      	b.n	8006fc8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	211a      	movs	r1, #26
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	211a      	movs	r1, #26
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006fc2:	881a      	ldrh	r2, [r3, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	7b9b      	ldrb	r3, [r3, #14]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fe8b 	bl	8008cea <USBH_AllocPipe>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	7bdb      	ldrb	r3, [r3, #15]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fe81 	bl	8008cea <USBH_AllocPipe>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	7b59      	ldrb	r1, [r3, #13]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7b98      	ldrb	r0, [r3, #14]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	8b12      	ldrh	r2, [r2, #24]
 8007008:	9202      	str	r2, [sp, #8]
 800700a:	2202      	movs	r2, #2
 800700c:	9201      	str	r2, [sp, #4]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	4623      	mov	r3, r4
 8007012:	4602      	mov	r2, r0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fe39 	bl	8008c8c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	7b19      	ldrb	r1, [r3, #12]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	7bd8      	ldrb	r0, [r3, #15]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	8b52      	ldrh	r2, [r2, #26]
 8007032:	9202      	str	r2, [sp, #8]
 8007034:	2202      	movs	r2, #2
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4623      	mov	r3, r4
 800703c:	4602      	mov	r2, r0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fe24 	bl	8008c8c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	7b5b      	ldrb	r3, [r3, #13]
 8007050:	2200      	movs	r2, #0
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f005 fb61 	bl	800c71c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	7b1b      	ldrb	r3, [r3, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f005 fb5a 	bl	800c71c <USBH_LL_SetToggle>
      status = USBH_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	bd90      	pop	{r4, r7, pc}

08007076 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00e      	beq.n	80070ae <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fe17 	bl	8008cca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fe3f 	bl	8008d26 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	7b1b      	ldrb	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00e      	beq.n	80070d4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	7b1b      	ldrb	r3, [r3, #12]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fe04 	bl	8008cca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	7b1b      	ldrb	r3, [r3, #12]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fe2c 	bl	8008d26 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	7b5b      	ldrb	r3, [r3, #13]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	7b5b      	ldrb	r3, [r3, #13]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fdf1 	bl	8008cca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	7b5b      	ldrb	r3, [r3, #13]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fe19 	bl	8008d26 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4618      	mov	r0, r3
 8007110:	f005 fbe6 	bl	800c8e0 <free>
    phost->pActiveClass->pData = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800711a:	2200      	movs	r2, #0
 800711c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007130:	2302      	movs	r3, #2
 8007132:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3340      	adds	r3, #64	; 0x40
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8b2 	bl	80072ae <GetLineCoding>
 800714a:	4603      	mov	r3, r0
 800714c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800715a:	2102      	movs	r1, #2
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
  }
  return status;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007174:	2301      	movs	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800718c:	2b04      	cmp	r3, #4
 800718e:	d877      	bhi.n	8007280 <USBH_CDC_Process+0x114>
 8007190:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <USBH_CDC_Process+0x2c>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	080071ad 	.word	0x080071ad
 800719c:	080071b3 	.word	0x080071b3
 80071a0:	080071e3 	.word	0x080071e3
 80071a4:	08007257 	.word	0x08007257
 80071a8:	08007265 	.word	0x08007265
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
    break;
 80071b0:	e06d      	b.n	800728e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f897 	bl	80072ec <SetLineCoding>
 80071be:	4603      	mov	r3, r0
 80071c0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80071d0:	e058      	b.n	8007284 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d055      	beq.n	8007284 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2204      	movs	r2, #4
 80071dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80071e0:	e050      	b.n	8007284 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3340      	adds	r3, #64	; 0x40
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f860 	bl	80072ae <GetLineCoding>
 80071ee:	4603      	mov	r3, r0
 80071f0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d126      	bne.n	8007246 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	791b      	ldrb	r3, [r3, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d13b      	bne.n	8007288 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800721c:	429a      	cmp	r2, r3
 800721e:	d133      	bne.n	8007288 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800722c:	429a      	cmp	r2, r3
 800722e:	d12b      	bne.n	8007288 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007238:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800723a:	429a      	cmp	r2, r3
 800723c:	d124      	bne.n	8007288 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f984 	bl	800754c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8007244:	e020      	b.n	8007288 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d01d      	beq.n	8007288 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2204      	movs	r2, #4
 8007250:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8007254:	e018      	b.n	8007288 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f867 	bl	800732a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f8f8 	bl	8007452 <CDC_ProcessReception>
    break;
 8007262:	e014      	b.n	800728e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8007264:	2100      	movs	r1, #0
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fffa 	bl	8008260 <USBH_ClrFeature>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800727e:	e005      	b.n	800728c <USBH_CDC_Process+0x120>

  default:
    break;
 8007280:	bf00      	nop
 8007282:	e004      	b.n	800728e <USBH_CDC_Process+0x122>
    break;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <USBH_CDC_Process+0x122>
    break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <USBH_CDC_Process+0x122>
    break;
 800728c:	bf00      	nop

  }

  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	22a1      	movs	r2, #161	; 0xa1
 80072bc:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2221      	movs	r2, #33	; 0x21
 80072c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2207      	movs	r2, #7
 80072d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2207      	movs	r2, #7
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f99f 	bl	8008620 <USBH_CtlReq>
 80072e2:	4603      	mov	r3, r0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2221      	movs	r2, #33	; 0x21
 80072fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2207      	movs	r2, #7
 8007312:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2207      	movs	r2, #7
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f980 	bl	8008620 <USBH_CtlReq>
 8007320:	4603      	mov	r3, r0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af02      	add	r7, sp, #8
 8007330:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800733c:	2300      	movs	r3, #0
 800733e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007346:	2b01      	cmp	r3, #1
 8007348:	d002      	beq.n	8007350 <CDC_ProcessTransmission+0x26>
 800734a:	2b02      	cmp	r3, #2
 800734c:	d025      	beq.n	800739a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800734e:	e07c      	b.n	800744a <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	8b12      	ldrh	r2, [r2, #24]
 8007358:	4293      	cmp	r3, r2
 800735a:	d90c      	bls.n	8007376 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	69d9      	ldr	r1, [r3, #28]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8b1a      	ldrh	r2, [r3, #24]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	7b58      	ldrb	r0, [r3, #13]
 8007368:	2301      	movs	r3, #1
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4603      	mov	r3, r0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fc49 	bl	8008c06 <USBH_BulkSendData>
 8007374:	e00c      	b.n	8007390 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	7b58      	ldrb	r0, [r3, #13]
 8007384:	2301      	movs	r3, #1
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fc3b 	bl	8008c06 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007398:	e057      	b.n	800744a <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	7b5b      	ldrb	r3, [r3, #13]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f005 f991 	bl	800c6c8 <USBH_LL_GetURBState>
 80073a6:	4603      	mov	r3, r0
 80073a8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d136      	bne.n	800741e <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	8b12      	ldrh	r2, [r2, #24]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d90e      	bls.n	80073da <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	8b12      	ldrh	r2, [r2, #24]
 80073c4:	1a9a      	subs	r2, r3, r2
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	8b12      	ldrh	r2, [r2, #24]
 80073d2:	441a      	add	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	61da      	str	r2, [r3, #28]
 80073d8:	e002      	b.n	80073e0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80073f0:	e006      	b.n	8007400 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f892 	bl	8007524 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2204      	movs	r2, #4
 8007404:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007414:	2200      	movs	r2, #0
 8007416:	4619      	mov	r1, r3
 8007418:	f001 fd4e 	bl	8008eb8 <osMessagePut>
    break;
 800741c:	e014      	b.n	8007448 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d111      	bne.n	8007448 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2204      	movs	r2, #4
 8007430:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007440:	2200      	movs	r2, #0
 8007442:	4619      	mov	r1, r3
 8007444:	f001 fd38 	bl	8008eb8 <osMessagePut>
    break;
 8007448:	bf00      	nop
  }
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007464:	2300      	movs	r3, #0
 8007466:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800746e:	2b03      	cmp	r3, #3
 8007470:	d002      	beq.n	8007478 <CDC_ProcessReception+0x26>
 8007472:	2b04      	cmp	r3, #4
 8007474:	d00e      	beq.n	8007494 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8007476:	e051      	b.n	800751c <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	6a19      	ldr	r1, [r3, #32]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	8b5a      	ldrh	r2, [r3, #26]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	7b1b      	ldrb	r3, [r3, #12]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 fbe3 	bl	8008c50 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2204      	movs	r2, #4
 800748e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007492:	e043      	b.n	800751c <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f005 f914 	bl	800c6c8 <USBH_LL_GetURBState>
 80074a0:	4603      	mov	r3, r0
 80074a2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d137      	bne.n	800751a <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	7b1b      	ldrb	r3, [r3, #12]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f005 f877 	bl	800c5a4 <USBH_LL_GetLastXferSize>
 80074b6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d016      	beq.n	80074f0 <CDC_ProcessReception+0x9e>
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	8b5b      	ldrh	r3, [r3, #26]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d910      	bls.n	80074f0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1ad2      	subs	r2, r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	441a      	add	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80074ee:	e006      	b.n	80074fe <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f81d 	bl	8007538 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2204      	movs	r2, #4
 8007502:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007512:	2200      	movs	r2, #0
 8007514:	4619      	mov	r1, r3
 8007516:	f001 fccf 	bl	8008eb8 <osMessagePut>
    break;
 800751a:	bf00      	nop
  }
}
 800751c:	bf00      	nop
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]

}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007560:	b5b0      	push	{r4, r5, r7, lr}
 8007562:	b08c      	sub	sp, #48	; 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007574:	2302      	movs	r3, #2
 8007576:	e03c      	b.n	80075f2 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	79fa      	ldrb	r2, [r7, #7]
 800757c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f837 	bl	8007604 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80075a4:	4a15      	ldr	r2, [pc, #84]	; (80075fc <USBH_Init+0x9c>)
 80075a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075ae:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80075b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fc6b 	bl	8008e94 <osMessageCreate>
 80075be:	4602      	mov	r2, r0
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <USBH_Init+0xa0>)
 80075c8:	f107 0414 	add.w	r4, r7, #20
 80075cc:	461d      	mov	r5, r3
 80075ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80075d6:	f107 0314 	add.w	r3, r7, #20
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fc12 	bl	8008e06 <osThreadCreate>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f004 ff28 	bl	800c440 <USBH_LL_Init>

  return USBH_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3730      	adds	r7, #48	; 0x30
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bdb0      	pop	{r4, r5, r7, pc}
 80075fa:	bf00      	nop
 80075fc:	0800caa8 	.word	0x0800caa8
 8007600:	0800cabc 	.word	0x0800cabc

08007604 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007610:	e008      	b.n	8007624 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	32e0      	adds	r2, #224	; 0xe0
 8007618:	2100      	movs	r1, #0
 800761a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b0e      	cmp	r3, #14
 8007628:	d9f3      	bls.n	8007612 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	e009      	b.n	8007644 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764a:	d3f1      	bcc.n	8007630 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d017      	beq.n	80076da <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	33dc      	adds	r3, #220	; 0xdc
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
 80076d2:	e004      	b.n	80076de <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076d4:	2302      	movs	r3, #2
 80076d6:	73fb      	strb	r3, [r7, #15]
 80076d8:	e001      	b.n	80076de <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80076da:	2302      	movs	r3, #2
 80076dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	429a      	cmp	r2, r3
 8007706:	d204      	bcs.n	8007712 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007710:	e001      	b.n	8007716 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007712:	2302      	movs	r3, #2
 8007714:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	461a      	mov	r2, r3
 8007732:	4603      	mov	r3, r0
 8007734:	70fb      	strb	r3, [r7, #3]
 8007736:	460b      	mov	r3, r1
 8007738:	70bb      	strb	r3, [r7, #2]
 800773a:	4613      	mov	r3, r2
 800773c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007742:	2300      	movs	r3, #0
 8007744:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800774c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800774e:	e025      	b.n	800779c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	221a      	movs	r2, #26
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	3308      	adds	r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	3302      	adds	r3, #2
 8007760:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	795b      	ldrb	r3, [r3, #5]
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	429a      	cmp	r2, r3
 800776a:	d002      	beq.n	8007772 <USBH_FindInterface+0x4e>
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	2bff      	cmp	r3, #255	; 0xff
 8007770:	d111      	bne.n	8007796 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007776:	78ba      	ldrb	r2, [r7, #2]
 8007778:	429a      	cmp	r2, r3
 800777a:	d002      	beq.n	8007782 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800777c:	78bb      	ldrb	r3, [r7, #2]
 800777e:	2bff      	cmp	r3, #255	; 0xff
 8007780:	d109      	bne.n	8007796 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007786:	787a      	ldrb	r2, [r7, #1]
 8007788:	429a      	cmp	r2, r3
 800778a:	d002      	beq.n	8007792 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800778c:	787b      	ldrb	r3, [r7, #1]
 800778e:	2bff      	cmp	r3, #255	; 0xff
 8007790:	d101      	bne.n	8007796 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	e006      	b.n	80077a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	3301      	adds	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d9d6      	bls.n	8007750 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077a2:	23ff      	movs	r3, #255	; 0xff
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f004 fe7d 	bl	800c4b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80077be:	2101      	movs	r1, #1
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f004 ff94 	bl	800c6ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af04      	add	r7, sp, #16
 80077d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80077d8:	2302      	movs	r3, #2
 80077da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fb7e 	bl	8007ee2 <USBH_IsPortEnabled>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10c      	bne.n	8007806 <USBH_Process+0x36>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d002      	beq.n	8007806 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2203      	movs	r2, #3
 8007804:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b0b      	cmp	r3, #11
 800780e:	f200 81ab 	bhi.w	8007b68 <USBH_Process+0x398>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USBH_Process+0x48>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007849 	.word	0x08007849
 800781c:	08007887 	.word	0x08007887
 8007820:	0800789b 	.word	0x0800789b
 8007824:	08007b43 	.word	0x08007b43
 8007828:	08007b69 	.word	0x08007b69
 800782c:	08007945 	.word	0x08007945
 8007830:	08007add 	.word	0x08007add
 8007834:	08007975 	.word	0x08007975
 8007838:	080079b1 	.word	0x080079b1
 800783c:	080079eb 	.word	0x080079eb
 8007840:	08007a33 	.word	0x08007a33
 8007844:	08007b2b 	.word	0x08007b2b
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 818b 	beq.w	8007b6c <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800785c:	20c8      	movs	r0, #200	; 0xc8
 800785e:	f004 ff90 	bl	800c782 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f004 fe83 	bl	800c56e <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800787c:	2200      	movs	r2, #0
 800787e:	4619      	mov	r1, r3
 8007880:	f001 fb1a 	bl	8008eb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007884:	e172      	b.n	8007b6c <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800788c:	2b01      	cmp	r3, #1
 800788e:	f040 816f 	bne.w	8007b70 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007898:	e16a      	b.n	8007b70 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800789a:	2064      	movs	r0, #100	; 0x64
 800789c:	f004 ff71 	bl	800c782 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f004 fe3f 	bl	800c524 <USBH_LL_GetSpeed>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2205      	movs	r2, #5
 80078b4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80078b6:	2100      	movs	r1, #0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fa16 	bl	8008cea <USBH_AllocPipe>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80078c6:	2180      	movs	r1, #128	; 0x80
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fa0e 	bl	8008cea <USBH_AllocPipe>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7919      	ldrb	r1, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80078ea:	b292      	uxth	r2, r2
 80078ec:	9202      	str	r2, [sp, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	9201      	str	r2, [sp, #4]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	4603      	mov	r3, r0
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f9c7 	bl	8008c8c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7959      	ldrb	r1, [r3, #5]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007912:	b292      	uxth	r2, r2
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	9201      	str	r2, [sp, #4]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4603      	mov	r3, r0
 800791e:	2200      	movs	r2, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f9b3 	bl	8008c8c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800793a:	2200      	movs	r2, #0
 800793c:	4619      	mov	r1, r3
 800793e:	f001 fabb 	bl	8008eb8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007942:	e120      	b.n	8007b86 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f923 	bl	8007b90 <USBH_HandleEnum>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8111 	bne.w	8007b74 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007960:	2b01      	cmp	r3, #1
 8007962:	d103      	bne.n	800796c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2208      	movs	r2, #8
 8007968:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800796a:	e103      	b.n	8007b74 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2207      	movs	r2, #7
 8007970:	701a      	strb	r2, [r3, #0]
    break;
 8007972:	e0ff      	b.n	8007b74 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80fc 	beq.w	8007b78 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007986:	2101      	movs	r1, #1
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2208      	movs	r2, #8
 8007990:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2205      	movs	r2, #5
 8007996:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079a6:	2200      	movs	r2, #0
 80079a8:	4619      	mov	r1, r3
 80079aa:	f001 fa85 	bl	8008eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80079ae:	e0e3      	b.n	8007b78 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fc09 	bl	80081d2 <USBH_SetCfg>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2209      	movs	r2, #9
 80079ca:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079e0:	2200      	movs	r2, #0
 80079e2:	4619      	mov	r1, r3
 80079e4:	f001 fa68 	bl	8008eb8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80079e8:	e0cd      	b.n	8007b86 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80079f8:	2101      	movs	r1, #1
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc0c 	bl	8008218 <USBH_SetFeature>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	220a      	movs	r2, #10
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e002      	b.n	8007a14 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	220a      	movs	r2, #10
 8007a12:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f001 fa44 	bl	8008eb8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007a30:	e0a9      	b.n	8007b86 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d040      	beq.n	8007abe <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e017      	b.n	8007a7a <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	33dc      	adds	r3, #220	; 0xdc
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	791a      	ldrb	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d108      	bne.n	8007a74 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	33dc      	adds	r3, #220	; 0xdc
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	3301      	adds	r3, #1
 8007a78:	73fb      	strb	r3, [r7, #15]
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0e4      	beq.n	8007a4a <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d016      	beq.n	8007ab8 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2206      	movs	r2, #6
 8007aa0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007aa8:	2103      	movs	r1, #3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
 8007aae:	e006      	b.n	8007abe <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	220d      	movs	r2, #13
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220d      	movs	r2, #13
 8007abc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f001 f9ef 	bl	8008eb8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007ada:	e054      	b.n	8007b86 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d13e      	bne.n	8007b7c <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	220b      	movs	r2, #11
 8007b02:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007b04:	e03a      	b.n	8007b7c <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	220d      	movs	r2, #13
 8007b0a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2205      	movs	r2, #5
 8007b10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b20:	2200      	movs	r2, #0
 8007b22:	4619      	mov	r1, r3
 8007b24:	f001 f9c8 	bl	8008eb8 <osMessagePut>
    break;
 8007b28:	e028      	b.n	8007b7c <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d025      	beq.n	8007b80 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
    }
    break;
 8007b40:	e01e      	b.n	8007b80 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fd5e 	bl	8007604 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d018      	beq.n	8007b84 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007b66:	e00d      	b.n	8007b84 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8007b68:	bf00      	nop
 8007b6a:	e00c      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b6c:	bf00      	nop
 8007b6e:	e00a      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b70:	bf00      	nop
 8007b72:	e008      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b74:	bf00      	nop
 8007b76:	e006      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b78:	bf00      	nop
 8007b7a:	e004      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b7c:	bf00      	nop
 8007b7e:	e002      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <USBH_Process+0x3b6>
    break;
 8007b84:	bf00      	nop
  }
 return USBH_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b07      	cmp	r3, #7
 8007ba2:	f200 8132 	bhi.w	8007e0a <USBH_HandleEnum+0x27a>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBH_HandleEnum+0x1c>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007c3f 	.word	0x08007c3f
 8007bb4:	08007c57 	.word	0x08007c57
 8007bb8:	08007ccd 	.word	0x08007ccd
 8007bbc:	08007ce5 	.word	0x08007ce5
 8007bc0:	08007d03 	.word	0x08007d03
 8007bc4:	08007d6f 	.word	0x08007d6f
 8007bc8:	08007dbf 	.word	0x08007dbf
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007bcc:	2108      	movs	r1, #8
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa2f 	bl	8008032 <USBH_Get_DevDesc>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f040 8119 	bne.w	8007e0e <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7919      	ldrb	r1, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c00:	b292      	uxth	r2, r2
 8007c02:	9202      	str	r2, [sp, #8]
 8007c04:	2200      	movs	r2, #0
 8007c06:	9201      	str	r2, [sp, #4]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2280      	movs	r2, #128	; 0x80
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f83c 	bl	8008c8c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7959      	ldrb	r1, [r3, #5]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	9202      	str	r2, [sp, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4603      	mov	r3, r0
 8007c34:	2200      	movs	r2, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 f828 	bl	8008c8c <USBH_OpenPipe>

    }
    break;
 8007c3c:	e0e7      	b.n	8007e0e <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007c3e:	2112      	movs	r1, #18
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9f6 	bl	8008032 <USBH_Get_DevDesc>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 80e2 	bne.w	8007e12 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007c54:	e0dd      	b.n	8007e12 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007c56:	2101      	movs	r1, #1
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fa96 	bl	800818a <USBH_SetAddress>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 80d8 	bne.w	8007e16 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8007c66:	2002      	movs	r0, #2
 8007c68:	f004 fd8b 	bl	800c782 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2203      	movs	r2, #3
 8007c78:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7919      	ldrb	r1, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	9201      	str	r2, [sp, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fff5 	bl	8008c8c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7959      	ldrb	r1, [r3, #5]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 ffe1 	bl	8008c8c <USBH_OpenPipe>
    }
    break;
 8007cca:	e0a4      	b.n	8007e16 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007ccc:	2109      	movs	r1, #9
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9d7 	bl	8008082 <USBH_Get_CfgDesc>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 809f 	bne.w	8007e1a <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007ce2:	e09a      	b.n	8007e1a <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f9c8 	bl	8008082 <USBH_Get_CfgDesc>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8092 	bne.w	8007e1e <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2205      	movs	r2, #5
 8007cfe:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d00:	e08d      	b.n	8007e1e <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01e      	beq.n	8007d4a <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007d18:	23ff      	movs	r3, #255	; 0xff
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9d5 	bl	80080ca <USBH_Get_StringDesc>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d17d      	bne.n	8007e22 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2206      	movs	r2, #6
 8007d2a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2205      	movs	r2, #5
 8007d30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d40:	2200      	movs	r2, #0
 8007d42:	4619      	mov	r1, r3
 8007d44:	f001 f8b8 	bl	8008eb8 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007d48:	e06b      	b.n	8007e22 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2205      	movs	r2, #5
 8007d54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f001 f8a6 	bl	8008eb8 <osMessagePut>
    break;
 8007d6c:	e059      	b.n	8007e22 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d010      	beq.n	8007d9a <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007d84:	23ff      	movs	r3, #255	; 0xff
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f99f 	bl	80080ca <USBH_Get_StringDesc>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d149      	bne.n	8007e26 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2207      	movs	r2, #7
 8007d96:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007d98:	e045      	b.n	8007e26 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2207      	movs	r2, #7
 8007d9e:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2205      	movs	r2, #5
 8007da4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007db4:	2200      	movs	r2, #0
 8007db6:	4619      	mov	r1, r3
 8007db8:	f001 f87e 	bl	8008eb8 <osMessagePut>
    break;
 8007dbc:	e033      	b.n	8007e26 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00f      	beq.n	8007de8 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007dd4:	23ff      	movs	r3, #255	; 0xff
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f977 	bl	80080ca <USBH_Get_StringDesc>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d123      	bne.n	8007e2a <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007de6:	e020      	b.n	8007e2a <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2205      	movs	r2, #5
 8007df0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e00:	2200      	movs	r2, #0
 8007e02:	4619      	mov	r1, r3
 8007e04:	f001 f858 	bl	8008eb8 <osMessagePut>
    break;
 8007e08:	e00f      	b.n	8007e2a <USBH_HandleEnum+0x29a>

  default:
    break;
 8007e0a:	bf00      	nop
 8007e0c:	e00e      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e0e:	bf00      	nop
 8007e10:	e00c      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e12:	bf00      	nop
 8007e14:	e00a      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e16:	bf00      	nop
 8007e18:	e008      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e1a:	bf00      	nop
 8007e1c:	e006      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e1e:	bf00      	nop
 8007e20:	e004      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e22:	bf00      	nop
 8007e24:	e002      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <USBH_HandleEnum+0x29c>
    break;
 8007e2a:	bf00      	nop
  }
  return Status;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop

08007e38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f804 	bl	8007e7a <USBH_HandleSof>
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b0b      	cmp	r3, #11
 8007e8a:	d10a      	bne.n	8007ea2 <USBH_HandleSof+0x28>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007eba:	bf00      	nop
}
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007ed6:	bf00      	nop
}
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10f      	bne.n	8007f2e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00e      	beq.n	8007f3e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f26:	2104      	movs	r1, #4
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
 8007f2c:	e007      	b.n	8007f3e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d102      	bne.n	8007f3e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f52:	2200      	movs	r2, #0
 8007f54:	4619      	mov	r1, r3
 8007f56:	f000 ffaf 	bl	8008eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f004 fabe 	bl	800c4ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	791b      	ldrb	r3, [r3, #4]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fed4 	bl	8008d26 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	795b      	ldrb	r3, [r3, #5]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fece 	bl	8008d26 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fa2:	2105      	movs	r1, #5
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f004 fa85 	bl	800c4b8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f000 ff74 	bl	8008eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8007fe8:	f107 030c 	add.w	r3, r7, #12
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 ffa1 	bl	8008f38 <osMessageGet>
    if(event.status == osEventMessage)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d1f2      	bne.n	8007fe2 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fbe7 	bl	80077d0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008002:	e7ee      	b.n	8007fe2 <USBH_Process_OS+0x8>

08008004 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008020:	2200      	movs	r2, #0
 8008022:	4619      	mov	r1, r3
 8008024:	f000 ff48 	bl	8008eb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b086      	sub	sp, #24
 8008036:	af02      	add	r7, sp, #8
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	b29b      	uxth	r3, r3
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008050:	2100      	movs	r1, #0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f864 	bl	8008120 <USBH_GetDescriptor>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f203 3022 	addw	r0, r3, #802	; 0x322
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	b292      	uxth	r2, r2
 8008072:	4619      	mov	r1, r3
 8008074:	f000 f918 	bl	80082a8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af02      	add	r7, sp, #8
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	331c      	adds	r3, #28
 8008092:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f83d 	bl	8008120 <USBH_GetDescriptor>
 80080a6:	4603      	mov	r3, r0
 80080a8:	72fb      	strb	r3, [r7, #11]
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d107      	bne.n	80080c0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80080b6:	887a      	ldrh	r2, [r7, #2]
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f964 	bl	8008388 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af02      	add	r7, sp, #8
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	461a      	mov	r2, r3
 80080d6:	460b      	mov	r3, r1
 80080d8:	72fb      	strb	r3, [r7, #11]
 80080da:	4613      	mov	r3, r2
 80080dc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080e6:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80080ee:	893b      	ldrh	r3, [r7, #8]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	460b      	mov	r3, r1
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f812 	bl	8008120 <USBH_GetDescriptor>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800810c:	893a      	ldrh	r2, [r7, #8]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fa37 	bl	8008584 <USBH_ParseStringDesc>
  }
  return status;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607b      	str	r3, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	72fb      	strb	r3, [r7, #11]
 800812e:	4613      	mov	r3, r2
 8008130:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	789b      	ldrb	r3, [r3, #2]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d11c      	bne.n	8008174 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008140:	b2da      	uxtb	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2206      	movs	r2, #6
 800814a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	893a      	ldrh	r2, [r7, #8]
 8008150:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008152:	893b      	ldrh	r3, [r7, #8]
 8008154:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800815c:	d104      	bne.n	8008168 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f240 4209 	movw	r2, #1033	; 0x409
 8008164:	829a      	strh	r2, [r3, #20]
 8008166:	e002      	b.n	800816e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8b3a      	ldrh	r2, [r7, #24]
 8008172:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8008174:	8b3b      	ldrh	r3, [r7, #24]
 8008176:	461a      	mov	r2, r3
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fa50 	bl	8008620 <USBH_CtlReq>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	789b      	ldrb	r3, [r3, #2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10f      	bne.n	80081be <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2205      	movs	r2, #5
 80081a8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80081be:	2200      	movs	r2, #0
 80081c0:	2100      	movs	r1, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa2c 	bl	8008620 <USBH_CtlReq>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	789b      	ldrb	r3, [r3, #2]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10e      	bne.n	8008204 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2209      	movs	r2, #9
 80081f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	887a      	ldrh	r2, [r7, #2]
 80081f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8008204:	2200      	movs	r2, #0
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa09 	bl	8008620 <USBH_CtlReq>
 800820e:	4603      	mov	r3, r0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	789b      	ldrb	r3, [r3, #2]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d10f      	bne.n	800824c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2203      	movs	r2, #3
 8008236:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800824c:	2200      	movs	r2, #0
 800824e:	2100      	movs	r1, #0
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9e5 	bl	8008620 <USBH_CtlReq>
 8008256:	4603      	mov	r3, r0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	789b      	ldrb	r3, [r3, #2]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d10f      	bne.n	8008294 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	b29a      	uxth	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8008294:	2200      	movs	r2, #0
 8008296:	2100      	movs	r1, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9c1 	bl	8008620 <USBH_CtlReq>
 800829e:	4603      	mov	r3, r0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	785a      	ldrb	r2, [r3, #1]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	3302      	adds	r3, #2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3303      	adds	r3, #3
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	791a      	ldrb	r2, [r3, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	795a      	ldrb	r2, [r3, #5]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	799a      	ldrb	r2, [r3, #6]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	79da      	ldrb	r2, [r3, #7]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d939      	bls.n	800837c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3308      	adds	r3, #8
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3309      	adds	r3, #9
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	b29b      	uxth	r3, r3
 800831c:	4313      	orrs	r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	330a      	adds	r3, #10
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b29a      	uxth	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	330b      	adds	r3, #11
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	b29b      	uxth	r3, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	330c      	adds	r3, #12
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29a      	uxth	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	330d      	adds	r3, #13
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b29b      	uxth	r3, r3
 8008354:	4313      	orrs	r3, r2
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	7b9a      	ldrb	r2, [r3, #14]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	7bda      	ldrb	r2, [r3, #15]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	7c1a      	ldrb	r2, [r3, #16]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	7c5a      	ldrb	r2, [r3, #17]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	745a      	strb	r2, [r3, #17]
  }
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	785a      	ldrb	r2, [r3, #1]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	3302      	adds	r3, #2
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3303      	adds	r3, #3
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	021b      	lsls	r3, r3, #8
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4313      	orrs	r3, r2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	791a      	ldrb	r2, [r3, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	795a      	ldrb	r2, [r3, #5]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	799a      	ldrb	r2, [r3, #6]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	79da      	ldrb	r2, [r3, #7]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	7a1a      	ldrb	r2, [r3, #8]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	2b09      	cmp	r3, #9
 8008402:	d95f      	bls.n	80084c4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008404:	2309      	movs	r3, #9
 8008406:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800840c:	e051      	b.n	80084b2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800840e:	f107 0316 	add.w	r3, r7, #22
 8008412:	4619      	mov	r1, r3
 8008414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008416:	f000 f8e8 	bl	80085ea <USBH_GetNextDesc>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b04      	cmp	r3, #4
 8008422:	d146      	bne.n	80084b2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008428:	221a      	movs	r2, #26
 800842a:	fb02 f303 	mul.w	r3, r2, r3
 800842e:	3308      	adds	r3, #8
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	3302      	adds	r3, #2
 8008436:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800843a:	69f8      	ldr	r0, [r7, #28]
 800843c:	f000 f846 	bl	80084cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008446:	2300      	movs	r3, #0
 8008448:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800844a:	e022      	b.n	8008492 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800844c:	f107 0316 	add.w	r3, r7, #22
 8008450:	4619      	mov	r1, r3
 8008452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008454:	f000 f8c9 	bl	80085ea <USBH_GetNextDesc>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b05      	cmp	r3, #5
 8008460:	d117      	bne.n	8008492 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008466:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800846a:	3201      	adds	r2, #1
 800846c:	00d2      	lsls	r2, r2, #3
 800846e:	211a      	movs	r1, #26
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	4413      	add	r3, r2
 8008476:	3308      	adds	r3, #8
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	3304      	adds	r3, #4
 800847e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008482:	69b8      	ldr	r0, [r7, #24]
 8008484:	f000 f851 	bl	800852a <USBH_ParseEPDesc>
            ep_ix++;
 8008488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800848c:	3301      	adds	r3, #1
 800848e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800849a:	429a      	cmp	r2, r3
 800849c:	d204      	bcs.n	80084a8 <USBH_ParseCfgDesc+0x120>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	885a      	ldrh	r2, [r3, #2]
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d8d1      	bhi.n	800844c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80084a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084ac:	3301      	adds	r3, #1
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d804      	bhi.n	80084c4 <USBH_ParseCfgDesc+0x13c>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	885a      	ldrh	r2, [r3, #2]
 80084be:	8afb      	ldrh	r3, [r7, #22]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d8a4      	bhi.n	800840e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80084c4:	bf00      	nop
 80084c6:	3728      	adds	r7, #40	; 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	785a      	ldrb	r2, [r3, #1]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	789a      	ldrb	r2, [r3, #2]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	78da      	ldrb	r2, [r3, #3]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	791a      	ldrb	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	795a      	ldrb	r2, [r3, #5]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	799a      	ldrb	r2, [r3, #6]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	79da      	ldrb	r2, [r3, #7]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	7a1a      	ldrb	r2, [r3, #8]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	721a      	strb	r2, [r3, #8]
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	785a      	ldrb	r2, [r3, #1]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	789a      	ldrb	r2, [r3, #2]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	78da      	ldrb	r2, [r3, #3]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	3304      	adds	r3, #4
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	b29a      	uxth	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	3305      	adds	r3, #5
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b29b      	uxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	799a      	ldrb	r2, [r3, #6]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	719a      	strb	r2, [r3, #6]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d120      	bne.n	80085de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	1e9a      	subs	r2, r3, #2
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bf28      	it	cs
 80085a8:	4613      	movcs	r3, r2
 80085aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3302      	adds	r3, #2
 80085b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085b2:	2300      	movs	r3, #0
 80085b4:	82fb      	strh	r3, [r7, #22]
 80085b6:	e00b      	b.n	80085d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085b8:	8afb      	ldrh	r3, [r7, #22]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085ca:	8afb      	ldrh	r3, [r7, #22]
 80085cc:	3302      	adds	r3, #2
 80085ce:	82fb      	strh	r3, [r7, #22]
 80085d0:	8afa      	ldrh	r2, [r7, #22]
 80085d2:	8abb      	ldrh	r3, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d3ef      	bcc.n	80085b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  }
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	881a      	ldrh	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4413      	add	r3, r2
 8008600:	b29a      	uxth	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4413      	add	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008612:	68fb      	ldr	r3, [r7, #12]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	789b      	ldrb	r3, [r3, #2]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d002      	beq.n	8008640 <USBH_CtlReq+0x20>
 800863a:	2b02      	cmp	r3, #2
 800863c:	d01d      	beq.n	800867a <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800863e:	e042      	b.n	80086c6 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2202      	movs	r2, #2
 8008656:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2203      	movs	r2, #3
 8008660:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008670:	2200      	movs	r2, #0
 8008672:	4619      	mov	r1, r3
 8008674:	f000 fc20 	bl	8008eb8 <osMessagePut>
    break;
 8008678:	e025      	b.n	80086c6 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f828 	bl	80086d0 <USBH_HandleControl>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d108      	bne.n	800869c <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]
    break;
 800869a:	e013      	b.n	80086c4 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d108      	bne.n	80086b4 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80086ae:	2303      	movs	r3, #3
 80086b0:	75fb      	strb	r3, [r7, #23]
    break;
 80086b2:	e007      	b.n	80086c4 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d104      	bne.n	80086c4 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80086c0:	2302      	movs	r3, #2
 80086c2:	75fb      	strb	r3, [r7, #23]
    break;
 80086c4:	bf00      	nop
  }
  return status;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086d8:	2301      	movs	r3, #1
 80086da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086dc:	2300      	movs	r3, #0
 80086de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	7e1b      	ldrb	r3, [r3, #24]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	2b0a      	cmp	r3, #10
 80086e8:	f200 821f 	bhi.w	8008b2a <USBH_HandleControl+0x45a>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <USBH_HandleControl+0x24>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008721 	.word	0x08008721
 80086f8:	0800873b 	.word	0x0800873b
 80086fc:	080087dd 	.word	0x080087dd
 8008700:	08008803 	.word	0x08008803
 8008704:	0800888f 	.word	0x0800888f
 8008708:	080088bb 	.word	0x080088bb
 800870c:	0800897d 	.word	0x0800897d
 8008710:	0800899f 	.word	0x0800899f
 8008714:	08008a31 	.word	0x08008a31
 8008718:	08008a59 	.word	0x08008a59
 800871c:	08008aeb 	.word	0x08008aeb
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f103 0110 	add.w	r1, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	795b      	ldrb	r3, [r3, #5]
 800872a:	461a      	mov	r2, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa0d 	bl	8008b4c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	761a      	strb	r2, [r3, #24]
    break;
 8008738:	e202      	b.n	8008b40 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f003 ffc1 	bl	800c6c8 <USBH_LL_GetURBState>
 8008746:	4603      	mov	r3, r0
 8008748:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d12c      	bne.n	80087aa <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7c1b      	ldrb	r3, [r3, #16]
 8008754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008758:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8adb      	ldrh	r3, [r3, #22]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008762:	7b7b      	ldrb	r3, [r7, #13]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d103      	bne.n	8008770 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2203      	movs	r2, #3
 800876c:	761a      	strb	r2, [r3, #24]
 800876e:	e00d      	b.n	800878c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2205      	movs	r2, #5
 8008774:	761a      	strb	r2, [r3, #24]
 8008776:	e009      	b.n	800878c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8008778:	7b7b      	ldrb	r3, [r7, #13]
 800877a:	2b80      	cmp	r3, #128	; 0x80
 800877c:	d103      	bne.n	8008786 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2209      	movs	r2, #9
 8008782:	761a      	strb	r2, [r3, #24]
 8008784:	e002      	b.n	800878c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2207      	movs	r2, #7
 800878a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2203      	movs	r2, #3
 8008790:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087a0:	2200      	movs	r2, #0
 80087a2:	4619      	mov	r1, r3
 80087a4:	f000 fb88 	bl	8008eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087a8:	e1c1      	b.n	8008b2e <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d003      	beq.n	80087b8 <USBH_HandleControl+0xe8>
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	f040 81bb 	bne.w	8008b2e <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	220b      	movs	r2, #11
 80087bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2203      	movs	r2, #3
 80087c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087d2:	2200      	movs	r2, #0
 80087d4:	4619      	mov	r1, r3
 80087d6:	f000 fb6f 	bl	8008eb8 <osMessagePut>
    break;
 80087da:	e1a8      	b.n	8008b2e <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6899      	ldr	r1, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	899a      	ldrh	r2, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f9e8 	bl	8008bca <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	761a      	strb	r2, [r3, #24]
    break;
 8008800:	e19e      	b.n	8008b40 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	791b      	ldrb	r3, [r3, #4]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f003 ff5d 	bl	800c6c8 <USBH_LL_GetURBState>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d110      	bne.n	800883a <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2209      	movs	r2, #9
 800881c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2203      	movs	r2, #3
 8008822:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008832:	2200      	movs	r2, #0
 8008834:	4619      	mov	r1, r3
 8008836:	f000 fb3f 	bl	8008eb8 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b05      	cmp	r3, #5
 800883e:	d110      	bne.n	8008862 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008840:	2303      	movs	r3, #3
 8008842:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2203      	movs	r2, #3
 8008848:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008858:	2200      	movs	r2, #0
 800885a:	4619      	mov	r1, r3
 800885c:	f000 fb2c 	bl	8008eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008860:	e167      	b.n	8008b32 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b04      	cmp	r3, #4
 8008866:	f040 8164 	bne.w	8008b32 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	220b      	movs	r2, #11
 800886e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2203      	movs	r2, #3
 8008874:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008884:	2200      	movs	r2, #0
 8008886:	4619      	mov	r1, r3
 8008888:	f000 fb16 	bl	8008eb8 <osMessagePut>
    break;
 800888c:	e151      	b.n	8008b32 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6899      	ldr	r1, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	899a      	ldrh	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7958      	ldrb	r0, [r3, #5]
 800889a:	2301      	movs	r3, #1
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	4603      	mov	r3, r0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f96d 	bl	8008b80 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2206      	movs	r2, #6
 80088b6:	761a      	strb	r2, [r3, #24]
    break;
 80088b8:	e142      	b.n	8008b40 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f003 ff01 	bl	800c6c8 <USBH_LL_GetURBState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d111      	bne.n	80088f4 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2207      	movs	r2, #7
 80088d4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2203      	movs	r2, #3
 80088da:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088ea:	2200      	movs	r2, #0
 80088ec:	4619      	mov	r1, r3
 80088ee:	f000 fae3 	bl	8008eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80088f2:	e120      	b.n	8008b36 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	d113      	bne.n	8008922 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	220c      	movs	r2, #12
 80088fe:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008900:	2303      	movs	r3, #3
 8008902:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2203      	movs	r2, #3
 8008908:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008918:	2200      	movs	r2, #0
 800891a:	4619      	mov	r1, r3
 800891c:	f000 facc 	bl	8008eb8 <osMessagePut>
    break;
 8008920:	e109      	b.n	8008b36 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d111      	bne.n	800894c <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2205      	movs	r2, #5
 800892c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2203      	movs	r2, #3
 8008932:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008942:	2200      	movs	r2, #0
 8008944:	4619      	mov	r1, r3
 8008946:	f000 fab7 	bl	8008eb8 <osMessagePut>
    break;
 800894a:	e0f4      	b.n	8008b36 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b04      	cmp	r3, #4
 8008950:	f040 80f1 	bne.w	8008b36 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	220b      	movs	r2, #11
 8008958:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800895a:	2302      	movs	r3, #2
 800895c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2203      	movs	r2, #3
 8008962:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008972:	2200      	movs	r2, #0
 8008974:	4619      	mov	r1, r3
 8008976:	f000 fa9f 	bl	8008eb8 <osMessagePut>
    break;
 800897a:	e0dc      	b.n	8008b36 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	791b      	ldrb	r3, [r3, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	2100      	movs	r1, #0
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f920 	bl	8008bca <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008990:	b29a      	uxth	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2208      	movs	r2, #8
 800899a:	761a      	strb	r2, [r3, #24]

    break;
 800899c:	e0d0      	b.n	8008b40 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	791b      	ldrb	r3, [r3, #4]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fe8f 	bl	800c6c8 <USBH_LL_GetURBState>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d113      	bne.n	80089dc <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	220d      	movs	r2, #13
 80089b8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2203      	movs	r2, #3
 80089c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d2:	2200      	movs	r2, #0
 80089d4:	4619      	mov	r1, r3
 80089d6:	f000 fa6f 	bl	8008eb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80089da:	e0ae      	b.n	8008b3a <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d111      	bne.n	8008a06 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	220b      	movs	r2, #11
 80089e6:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2203      	movs	r2, #3
 80089ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089fc:	2200      	movs	r2, #0
 80089fe:	4619      	mov	r1, r3
 8008a00:	f000 fa5a 	bl	8008eb8 <osMessagePut>
    break;
 8008a04:	e099      	b.n	8008b3a <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	f040 8096 	bne.w	8008b3a <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2203      	movs	r2, #3
 8008a16:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a26:	2200      	movs	r2, #0
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f000 fa45 	bl	8008eb8 <osMessagePut>
    break;
 8008a2e:	e084      	b.n	8008b3a <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	795a      	ldrb	r2, [r3, #5]
 8008a34:	2301      	movs	r3, #1
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f89e 	bl	8008b80 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	220a      	movs	r2, #10
 8008a54:	761a      	strb	r2, [r3, #24]
    break;
 8008a56:	e073      	b.n	8008b40 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	795b      	ldrb	r3, [r3, #5]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f003 fe32 	bl	800c6c8 <USBH_LL_GetURBState>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d113      	bne.n	8008a96 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220d      	movs	r2, #13
 8008a76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4619      	mov	r1, r3
 8008a90:	f000 fa12 	bl	8008eb8 <osMessagePut>
#endif
#endif
      }

    }
    break;
 8008a94:	e053      	b.n	8008b3e <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d111      	bne.n	8008ac0 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2209      	movs	r2, #9
 8008aa0:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f000 f9fd 	bl	8008eb8 <osMessagePut>
    break;
 8008abe:	e03e      	b.n	8008b3e <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d13b      	bne.n	8008b3e <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	220b      	movs	r2, #11
 8008aca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f000 f9e8 	bl	8008eb8 <osMessagePut>
    break;
 8008ae8:	e029      	b.n	8008b3e <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	7e5b      	ldrb	r3, [r3, #25]
 8008aee:	3301      	adds	r3, #1
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	765a      	strb	r2, [r3, #25]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7e5b      	ldrb	r3, [r3, #25]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d809      	bhi.n	8008b12 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f003 fcf5 	bl	800c4ee <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008b10:	e016      	b.n	8008b40 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b18:	2106      	movs	r1, #6
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e00a      	b.n	8008b40 <USBH_HandleControl+0x470>

  default:
    break;
 8008b2a:	bf00      	nop
 8008b2c:	e008      	b.n	8008b40 <USBH_HandleControl+0x470>
    break;
 8008b2e:	bf00      	nop
 8008b30:	e006      	b.n	8008b40 <USBH_HandleControl+0x470>
    break;
 8008b32:	bf00      	nop
 8008b34:	e004      	b.n	8008b40 <USBH_HandleControl+0x470>
    break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <USBH_HandleControl+0x470>
    break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <USBH_HandleControl+0x470>
    break;
 8008b3e:	bf00      	nop
  }
  return status;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop

08008b4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008b5a:	79f9      	ldrb	r1, [r7, #7]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9303      	str	r3, [sp, #12]
 8008b60:	2308      	movs	r3, #8
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2200      	movs	r2, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f003 fd78 	bl	800c666 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af04      	add	r7, sp, #16
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	460b      	mov	r3, r1
 8008b90:	80fb      	strh	r3, [r7, #6]
 8008b92:	4613      	mov	r3, r2
 8008b94:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008ba4:	7979      	ldrb	r1, [r7, #5]
 8008ba6:	7e3b      	ldrb	r3, [r7, #24]
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f003 fd53 	bl	800c666 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af04      	add	r7, sp, #16
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	460b      	mov	r3, r1
 8008bda:	80fb      	strh	r3, [r7, #6]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008be0:	7979      	ldrb	r1, [r7, #5]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9303      	str	r3, [sp, #12]
 8008be6:	88fb      	ldrh	r3, [r7, #6]
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f003 fd35 	bl	800c666 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bfc:	2300      	movs	r3, #0

}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b088      	sub	sp, #32
 8008c0a:	af04      	add	r7, sp, #16
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	460b      	mov	r3, r1
 8008c16:	80fb      	strh	r3, [r7, #6]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c2a:	7979      	ldrb	r1, [r7, #5]
 8008c2c:	7e3b      	ldrb	r3, [r7, #24]
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	9302      	str	r3, [sp, #8]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f003 fd10 	bl	800c666 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	460b      	mov	r3, r1
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	4613      	mov	r3, r2
 8008c64:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008c66:	7979      	ldrb	r1, [r7, #5]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	9302      	str	r3, [sp, #8]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	2301      	movs	r3, #1
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f003 fcf2 	bl	800c666 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af04      	add	r7, sp, #16
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	70fb      	strb	r3, [r7, #3]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70bb      	strb	r3, [r7, #2]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008ca6:	7878      	ldrb	r0, [r7, #1]
 8008ca8:	78ba      	ldrb	r2, [r7, #2]
 8008caa:	78f9      	ldrb	r1, [r7, #3]
 8008cac:	8b3b      	ldrh	r3, [r7, #24]
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	7d3b      	ldrb	r3, [r7, #20]
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	7c3b      	ldrb	r3, [r7, #16]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	4603      	mov	r3, r0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f003 fc85 	bl	800c5ca <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008cc0:	2300      	movs	r3, #0

}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f003 fca4 	bl	800c628 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ce0:	2300      	movs	r3, #0

}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f831 	bl	8008d5e <USBH_GetFreePipe>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d00:	89fb      	ldrh	r3, [r7, #14]
 8008d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d007      	beq.n	8008d1a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	89fa      	ldrh	r2, [r7, #14]
 8008d0e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32e0      	adds	r2, #224	; 0xe0
 8008d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008d1a:	89fb      	ldrh	r3, [r7, #14]
 8008d1c:	b2db      	uxtb	r3, r3
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	2b0a      	cmp	r3, #10
 8008d36:	d80b      	bhi.n	8008d50 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32e0      	adds	r2, #224	; 0xe0
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	32e0      	adds	r2, #224	; 0xe0
 8008d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
 8008d6e:	e00e      	b.n	8008d8e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d70:	7bfa      	ldrb	r2, [r7, #15]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32e0      	adds	r2, #224	; 0xe0
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	e007      	b.n	8008d98 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	73fb      	strb	r3, [r7, #15]
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	2b0a      	cmp	r3, #10
 8008d92:	d9ed      	bls.n	8008d70 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008db6:	2b84      	cmp	r3, #132	; 0x84
 8008db8:	d005      	beq.n	8008dc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3303      	adds	r3, #3
 8008dc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dda:	f3ef 8305 	mrs	r3, IPSR
 8008dde:	607b      	str	r3, [r7, #4]
  return(result);
 8008de0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2301      	movne	r3, #1
 8008de8:	2300      	moveq	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008dfc:	f001 f80a 	bl	8009e14 <vTaskStartScheduler>
  
  return osOK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af02      	add	r7, sp, #8
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685c      	ldr	r4, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e1c:	b29e      	uxth	r6, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff ffbd 	bl	8008da4 <makeFreeRtosPriority>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	9200      	str	r2, [sp, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	4632      	mov	r2, r6
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fe8d 	bl	8009b5a <xTaskCreate>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d001      	beq.n	8008e4a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e000      	b.n	8008e4c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <osDelay+0x16>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	e000      	b.n	8008e6c <osDelay+0x18>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 ff9d 	bl	8009dac <vTaskDelay>
  
  return osOK;
 8008e72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8008e84:	2001      	movs	r0, #1
 8008e86:	f000 fa59 	bl	800933c <xQueueCreateMutex>
 8008e8a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f000 f9d5 	bl	8009258 <xQueueGenericCreate>
 8008eae:	4603      	mov	r3, r0
#endif
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <osMessagePut+0x1e>
    ticks = 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ed6:	f7ff ff7d 	bl	8008dd4 <inHandlerMode>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d018      	beq.n	8008f12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008ee0:	f107 0210 	add.w	r2, r7, #16
 8008ee4:	f107 0108 	add.w	r1, r7, #8
 8008ee8:	2300      	movs	r3, #0
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fb38 	bl	8009560 <xQueueGenericSendFromISR>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d001      	beq.n	8008efa <osMessagePut+0x42>
      return osErrorOS;
 8008ef6:	23ff      	movs	r3, #255	; 0xff
 8008ef8:	e018      	b.n	8008f2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d014      	beq.n	8008f2a <osMessagePut+0x72>
 8008f00:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <osMessagePut+0x7c>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	e00b      	b.n	8008f2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008f12:	f107 0108 	add.w	r1, r7, #8
 8008f16:	2300      	movs	r3, #0
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fa26 	bl	800936c <xQueueGenericSend>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d001      	beq.n	8008f2a <osMessagePut+0x72>
      return osErrorOS;
 8008f26:	23ff      	movs	r3, #255	; 0xff
 8008f28:	e000      	b.n	8008f2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b08b      	sub	sp, #44	; 0x2c
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10a      	bne.n	8008f68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	617b      	str	r3, [r7, #20]
    return event;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	461c      	mov	r4, r3
 8008f5a:	f107 0314 	add.w	r3, r7, #20
 8008f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f66:	e054      	b.n	8009012 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d103      	bne.n	8008f80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e009      	b.n	8008f94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d006      	beq.n	8008f94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <osMessageGet+0x5c>
      ticks = 1;
 8008f90:	2301      	movs	r3, #1
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008f94:	f7ff ff1e 	bl	8008dd4 <inHandlerMode>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d01c      	beq.n	8008fd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008f9e:	f107 0220 	add.w	r2, r7, #32
 8008fa2:	f107 0314 	add.w	r3, r7, #20
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	68b8      	ldr	r0, [r7, #8]
 8008fac:	f000 fc48 	bl	8009840 <xQueueReceiveFromISR>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d102      	bne.n	8008fbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008fb6:	2310      	movs	r3, #16
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e001      	b.n	8008fc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01d      	beq.n	8009002 <osMessageGet+0xca>
 8008fc6:	4b15      	ldr	r3, [pc, #84]	; (800901c <osMessageGet+0xe4>)
 8008fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	e014      	b.n	8009002 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008fd8:	f107 0314 	add.w	r3, r7, #20
 8008fdc:	3304      	adds	r3, #4
 8008fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	68b8      	ldr	r0, [r7, #8]
 8008fe4:	f000 fb50 	bl	8009688 <xQueueReceive>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d102      	bne.n	8008ff4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008fee:	2310      	movs	r3, #16
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e006      	b.n	8009002 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <osMessageGet+0xc6>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e000      	b.n	8009000 <osMessageGet+0xc8>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	461c      	mov	r4, r3
 8009006:	f107 0314 	add.w	r3, r7, #20
 800900a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800900e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	372c      	adds	r7, #44	; 0x2c
 8009016:	46bd      	mov	sp, r7
 8009018:	bd90      	pop	{r4, r7, pc}
 800901a:	bf00      	nop
 800901c:	e000ed04 	.word	0xe000ed04

08009020 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f103 0208 	add.w	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f04f 32ff 	mov.w	r2, #4294967295
 8009038:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f103 0208 	add.w	r2, r3, #8
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f103 0208 	add.w	r2, r3, #8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d8:	d103      	bne.n	80090e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	e00c      	b.n	80090fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3308      	adds	r3, #8
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e002      	b.n	80090f0 <vListInsert+0x2e>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d2f6      	bcs.n	80090ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6892      	ldr	r2, [r2, #8]
 800914a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6852      	ldr	r2, [r2, #4]
 8009154:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d103      	bne.n	8009168 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	1e5a      	subs	r2, r3, #1
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d109      	bne.n	80091b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	e7fe      	b.n	80091ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80091b0:	f001 fc24 	bl	800a9fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091bc:	68f9      	ldr	r1, [r7, #12]
 80091be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	3b01      	subs	r3, #1
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	441a      	add	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	22ff      	movs	r2, #255	; 0xff
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d114      	bne.n	8009230 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01a      	beq.n	8009244 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3310      	adds	r3, #16
 8009212:	4618      	mov	r0, r3
 8009214:	f001 f828 	bl	800a268 <xTaskRemoveFromEventList>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d012      	beq.n	8009244 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800921e:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <xQueueGenericReset+0xcc>)
 8009220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	e009      	b.n	8009244 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3310      	adds	r3, #16
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff fef3 	bl	8009020 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3324      	adds	r3, #36	; 0x24
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff feee 	bl	8009020 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009244:	f001 fc08 	bl	800aa58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009248:	2301      	movs	r3, #1
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af02      	add	r7, sp, #8
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <xQueueGenericCreate+0x28>
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	e7fe      	b.n	800927e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009286:	2300      	movs	r3, #0
 8009288:	61fb      	str	r3, [r7, #28]
 800928a:	e004      	b.n	8009296 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	3348      	adds	r3, #72	; 0x48
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fcc8 	bl	800ac30 <pvPortMalloc>
 80092a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	3348      	adds	r3, #72	; 0x48
 80092ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092ae:	79fa      	ldrb	r2, [r7, #7]
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f805 	bl	80092ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80092c0:	69bb      	ldr	r3, [r7, #24]
	}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
 80092d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d103      	bne.n	80092e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e002      	b.n	80092ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092f8:	2101      	movs	r1, #1
 80092fa:	69b8      	ldr	r0, [r7, #24]
 80092fc:	f7ff ff44 	bl	8009188 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00e      	beq.n	8009334 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009328:	2300      	movs	r3, #0
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f81c 	bl	800936c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009346:	2301      	movs	r3, #1
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	461a      	mov	r2, r3
 8009352:	6939      	ldr	r1, [r7, #16]
 8009354:	6978      	ldr	r0, [r7, #20]
 8009356:	f7ff ff7f 	bl	8009258 <xQueueGenericCreate>
 800935a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff ffd3 	bl	8009308 <prvInitialiseMutex>

		return pxNewQueue;
 8009362:	68fb      	ldr	r3, [r7, #12]
	}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08e      	sub	sp, #56	; 0x38
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <xQueueGenericSend+0x30>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
 800939a:	e7fe      	b.n	800939a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <xQueueGenericSend+0x3e>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <xQueueGenericSend+0x42>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <xQueueGenericSend+0x44>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <xQueueGenericSend+0x5c>
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
 80093c6:	e7fe      	b.n	80093c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d103      	bne.n	80093d6 <xQueueGenericSend+0x6a>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <xQueueGenericSend+0x6e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e000      	b.n	80093dc <xQueueGenericSend+0x70>
 80093da:	2300      	movs	r3, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <xQueueGenericSend+0x88>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	623b      	str	r3, [r7, #32]
 80093f2:	e7fe      	b.n	80093f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093f4:	f001 f8d6 	bl	800a5a4 <xTaskGetSchedulerState>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <xQueueGenericSend+0x98>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <xQueueGenericSend+0x9c>
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <xQueueGenericSend+0x9e>
 8009408:	2300      	movs	r3, #0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <xQueueGenericSend+0xb6>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e7fe      	b.n	8009420 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009422:	f001 faeb 	bl	800a9fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <xQueueGenericSend+0xcc>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d129      	bne.n	800948c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943e:	f000 fa7c 	bl	800993a <prvCopyDataToQueue>
 8009442:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	3324      	adds	r3, #36	; 0x24
 8009450:	4618      	mov	r0, r3
 8009452:	f000 ff09 	bl	800a268 <xTaskRemoveFromEventList>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d013      	beq.n	8009484 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800945c:	4b3f      	ldr	r3, [pc, #252]	; (800955c <xQueueGenericSend+0x1f0>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	e00a      	b.n	8009484 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <xQueueGenericSend+0x1f0>)
 8009476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009484:	f001 fae8 	bl	800aa58 <vPortExitCritical>
				return pdPASS;
 8009488:	2301      	movs	r3, #1
 800948a:	e063      	b.n	8009554 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d103      	bne.n	800949a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009492:	f001 fae1 	bl	800aa58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009496:	2300      	movs	r3, #0
 8009498:	e05c      	b.n	8009554 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 ff41 	bl	800a32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094aa:	2301      	movs	r3, #1
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094ae:	f001 fad3 	bl	800aa58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094b2:	f000 fcf5 	bl	8009ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094b6:	f001 faa1 	bl	800a9fc <vPortEnterCritical>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d103      	bne.n	80094d0 <xQueueGenericSend+0x164>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d103      	bne.n	80094e6 <xQueueGenericSend+0x17a>
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094e6:	f001 fab7 	bl	800aa58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ea:	1d3a      	adds	r2, r7, #4
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 ff30 	bl	800a358 <xTaskCheckForTimeOut>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d124      	bne.n	8009548 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009500:	f000 fb13 	bl	8009b2a <prvIsQueueFull>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	3310      	adds	r3, #16
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fe84 	bl	800a220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951a:	f000 fa9e 	bl	8009a5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800951e:	f000 fccd 	bl	8009ebc <xTaskResumeAll>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f af7c 	bne.w	8009422 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <xQueueGenericSend+0x1f0>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	e772      	b.n	8009422 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800953c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800953e:	f000 fa8c 	bl	8009a5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009542:	f000 fcbb 	bl	8009ebc <xTaskResumeAll>
 8009546:	e76c      	b.n	8009422 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954a:	f000 fa86 	bl	8009a5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800954e:	f000 fcb5 	bl	8009ebc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009552:	2300      	movs	r3, #0
		}
	}
}
 8009554:	4618      	mov	r0, r3
 8009556:	3738      	adds	r7, #56	; 0x38
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	e000ed04 	.word	0xe000ed04

08009560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	; 0x38
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <xQueueGenericSendFromISR+0x2c>
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
 800958a:	e7fe      	b.n	800958a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d103      	bne.n	800959a <xQueueGenericSendFromISR+0x3a>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <xQueueGenericSendFromISR+0x3e>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericSendFromISR+0x40>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d109      	bne.n	80095b8 <xQueueGenericSendFromISR+0x58>
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	623b      	str	r3, [r7, #32]
 80095b6:	e7fe      	b.n	80095b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d103      	bne.n	80095c6 <xQueueGenericSendFromISR+0x66>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <xQueueGenericSendFromISR+0x6a>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <xQueueGenericSendFromISR+0x6c>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d109      	bne.n	80095e4 <xQueueGenericSendFromISR+0x84>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	e7fe      	b.n	80095e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095e4:	f001 fae6 	bl	800abb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095e8:	f3ef 8211 	mrs	r2, BASEPRI
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61ba      	str	r2, [r7, #24]
 80095fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009600:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	429a      	cmp	r2, r3
 800960e:	d302      	bcc.n	8009616 <xQueueGenericSendFromISR+0xb6>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d12c      	bne.n	8009670 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009626:	f000 f988 	bl	800993a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800962a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d112      	bne.n	800965a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d016      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	3324      	adds	r3, #36	; 0x24
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fe11 	bl	800a268 <xTaskRemoveFromEventList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e007      	b.n	800966a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800965a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800965e:	3301      	adds	r3, #1
 8009660:	b2db      	uxtb	r3, r3
 8009662:	b25a      	sxtb	r2, r3
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800966a:	2301      	movs	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800966e:	e001      	b.n	8009674 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009670:	2300      	movs	r3, #0
 8009672:	637b      	str	r3, [r7, #52]	; 0x34
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009680:	4618      	mov	r0, r3
 8009682:	3738      	adds	r7, #56	; 0x38
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d109      	bne.n	80096b6 <xQueueReceive+0x2e>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	623b      	str	r3, [r7, #32]
 80096b4:	e7fe      	b.n	80096b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <xQueueReceive+0x3c>
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <xQueueReceive+0x40>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <xQueueReceive+0x42>
 80096c8:	2300      	movs	r3, #0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <xQueueReceive+0x5a>
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	61fb      	str	r3, [r7, #28]
 80096e0:	e7fe      	b.n	80096e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096e2:	f000 ff5f 	bl	800a5a4 <xTaskGetSchedulerState>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <xQueueReceive+0x6a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <xQueueReceive+0x6e>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <xQueueReceive+0x70>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d109      	bne.n	8009710 <xQueueReceive+0x88>
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	61bb      	str	r3, [r7, #24]
 800970e:	e7fe      	b.n	800970e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009710:	f001 f974 	bl	800a9fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01f      	beq.n	8009760 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009724:	f000 f973 	bl	8009a0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	1e5a      	subs	r2, r3, #1
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00f      	beq.n	8009758 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	3310      	adds	r3, #16
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fd93 	bl	800a268 <xTaskRemoveFromEventList>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009748:	4b3c      	ldr	r3, [pc, #240]	; (800983c <xQueueReceive+0x1b4>)
 800974a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009758:	f001 f97e 	bl	800aa58 <vPortExitCritical>
				return pdPASS;
 800975c:	2301      	movs	r3, #1
 800975e:	e069      	b.n	8009834 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d103      	bne.n	800976e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009766:	f001 f977 	bl	800aa58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800976a:	2300      	movs	r3, #0
 800976c:	e062      	b.n	8009834 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d106      	bne.n	8009782 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fdd7 	bl	800a32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800977e:	2301      	movs	r3, #1
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009782:	f001 f969 	bl	800aa58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009786:	f000 fb8b 	bl	8009ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800978a:	f001 f937 	bl	800a9fc <vPortEnterCritical>
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009794:	b25b      	sxtb	r3, r3
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979a:	d103      	bne.n	80097a4 <xQueueReceive+0x11c>
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097aa:	b25b      	sxtb	r3, r3
 80097ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b0:	d103      	bne.n	80097ba <xQueueReceive+0x132>
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097ba:	f001 f94d 	bl	800aa58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097be:	1d3a      	adds	r2, r7, #4
 80097c0:	f107 0310 	add.w	r3, r7, #16
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fdc6 	bl	800a358 <xTaskCheckForTimeOut>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d123      	bne.n	800981a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d4:	f000 f993 	bl	8009afe <prvIsQueueEmpty>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d017      	beq.n	800980e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	3324      	adds	r3, #36	; 0x24
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fd1a 	bl	800a220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ee:	f000 f934 	bl	8009a5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097f2:	f000 fb63 	bl	8009ebc <xTaskResumeAll>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d189      	bne.n	8009710 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80097fc:	4b0f      	ldr	r3, [pc, #60]	; (800983c <xQueueReceive+0x1b4>)
 80097fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	e780      	b.n	8009710 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800980e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009810:	f000 f923 	bl	8009a5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009814:	f000 fb52 	bl	8009ebc <xTaskResumeAll>
 8009818:	e77a      	b.n	8009710 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800981a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981c:	f000 f91d 	bl	8009a5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009820:	f000 fb4c 	bl	8009ebc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009826:	f000 f96a 	bl	8009afe <prvIsQueueEmpty>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	f43f af6f 	beq.w	8009710 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009832:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009834:	4618      	mov	r0, r3
 8009836:	3730      	adds	r7, #48	; 0x30
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08e      	sub	sp, #56	; 0x38
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <xQueueReceiveFromISR+0x2a>
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	623b      	str	r3, [r7, #32]
 8009868:	e7fe      	b.n	8009868 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <xQueueReceiveFromISR+0x38>
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <xQueueReceiveFromISR+0x3c>
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <xQueueReceiveFromISR+0x3e>
 800987c:	2300      	movs	r3, #0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <xQueueReceiveFromISR+0x56>
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	e7fe      	b.n	8009894 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009896:	f001 f98d 	bl	800abb4 <vPortValidateInterruptPriority>
	__asm volatile
 800989a:	f3ef 8211 	mrs	r2, BASEPRI
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	61ba      	str	r2, [r7, #24]
 80098b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80098b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d02f      	beq.n	8009922 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d0:	f000 f89d 	bl	8009a0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	1e5a      	subs	r2, r3, #1
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e4:	d112      	bne.n	800990c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d016      	beq.n	800991c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	3310      	adds	r3, #16
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fcb8 	bl	800a268 <xTaskRemoveFromEventList>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00e      	beq.n	800991c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e007      	b.n	800991c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800990c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009910:	3301      	adds	r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	b25a      	sxtb	r2, r3
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800991c:	2301      	movs	r3, #1
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
 8009920:	e001      	b.n	8009926 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009922:	2300      	movs	r3, #0
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009932:	4618      	mov	r0, r3
 8009934:	3738      	adds	r7, #56	; 0x38
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10d      	bne.n	8009974 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d14d      	bne.n	80099fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fe3b 	bl	800a5e0 <xTaskPriorityDisinherit>
 800996a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	605a      	str	r2, [r3, #4]
 8009972:	e043      	b.n	80099fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d119      	bne.n	80099ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6898      	ldr	r0, [r3, #8]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	461a      	mov	r2, r3
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	f002 ffb3 	bl	800c8f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	441a      	add	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d32b      	bcc.n	80099fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	609a      	str	r2, [r3, #8]
 80099ac:	e026      	b.n	80099fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68d8      	ldr	r0, [r3, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b6:	461a      	mov	r2, r3
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	f002 ff99 	bl	800c8f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	425b      	negs	r3, r3
 80099c8:	441a      	add	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d207      	bcs.n	80099ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	425b      	negs	r3, r3
 80099e4:	441a      	add	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d105      	bne.n	80099fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a04:	697b      	ldr	r3, [r7, #20]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d018      	beq.n	8009a52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	441a      	add	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d303      	bcc.n	8009a42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68d9      	ldr	r1, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6838      	ldr	r0, [r7, #0]
 8009a4e:	f002 ff4f 	bl	800c8f0 <memcpy>
	}
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a62:	f000 ffcb 	bl	800a9fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a6e:	e011      	b.n	8009a94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3324      	adds	r3, #36	; 0x24
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fbf3 	bl	800a268 <xTaskRemoveFromEventList>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a88:	f000 fcc6 	bl	800a418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dce9      	bgt.n	8009a70 <prvUnlockQueue+0x16>
 8009a9c:	e000      	b.n	8009aa0 <prvUnlockQueue+0x46>
					break;
 8009a9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	22ff      	movs	r2, #255	; 0xff
 8009aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009aa8:	f000 ffd6 	bl	800aa58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009aac:	f000 ffa6 	bl	800a9fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ab8:	e011      	b.n	8009ade <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d012      	beq.n	8009ae8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3310      	adds	r3, #16
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fbce 	bl	800a268 <xTaskRemoveFromEventList>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ad2:	f000 fca1 	bl	800a418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dce9      	bgt.n	8009aba <prvUnlockQueue+0x60>
 8009ae6:	e000      	b.n	8009aea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ae8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	22ff      	movs	r2, #255	; 0xff
 8009aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009af2:	f000 ffb1 	bl	800aa58 <vPortExitCritical>
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b06:	f000 ff79 	bl	800a9fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b12:	2301      	movs	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e001      	b.n	8009b1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b1c:	f000 ff9c 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b32:	f000 ff63 	bl	800a9fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d102      	bne.n	8009b48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b42:	2301      	movs	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	e001      	b.n	8009b4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b4c:	f000 ff84 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 8009b50:	68fb      	ldr	r3, [r7, #12]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b08c      	sub	sp, #48	; 0x30
 8009b5e:	af04      	add	r7, sp, #16
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	4613      	mov	r3, r2
 8009b68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 f85e 	bl	800ac30 <pvPortMalloc>
 8009b74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00e      	beq.n	8009b9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009b7c:	2054      	movs	r0, #84	; 0x54
 8009b7e:	f001 f857 	bl	800ac30 <pvPortMalloc>
 8009b82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8009b90:	e005      	b.n	8009b9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f001 f90e 	bl	800adb4 <vPortFree>
 8009b98:	e001      	b.n	8009b9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d013      	beq.n	8009bcc <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ba4:	88fa      	ldrh	r2, [r7, #6]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9303      	str	r3, [sp, #12]
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	9302      	str	r3, [sp, #8]
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f80e 	bl	8009bdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bc0:	69f8      	ldr	r0, [r7, #28]
 8009bc2:	f000 f889 	bl	8009cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	e002      	b.n	8009bd2 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	f023 0307 	bic.w	r3, r3, #7
 8009c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d009      	beq.n	8009c22 <prvInitialiseNewTask+0x46>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e7fe      	b.n	8009c20 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
 8009c26:	e012      	b.n	8009c4e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	7819      	ldrb	r1, [r3, #0]
 8009c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	3334      	adds	r3, #52	; 0x34
 8009c38:	460a      	mov	r2, r1
 8009c3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	4413      	add	r3, r2
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d006      	beq.n	8009c56 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	61fb      	str	r3, [r7, #28]
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2b0f      	cmp	r3, #15
 8009c52:	d9e9      	bls.n	8009c28 <prvInitialiseNewTask+0x4c>
 8009c54:	e000      	b.n	8009c58 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009c56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	2b06      	cmp	r3, #6
 8009c64:	d901      	bls.n	8009c6a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c66:	2306      	movs	r3, #6
 8009c68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c74:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	2200      	movs	r2, #0
 8009c7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff f9ed 	bl	8009060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	3318      	adds	r3, #24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff f9e8 	bl	8009060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	f1c3 0207 	rsb	r2, r3, #7
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	2200      	movs	r2, #0
 8009caa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	69b8      	ldr	r0, [r7, #24]
 8009cba:	f000 fd7b 	bl	800a7b4 <pxPortInitialiseStack>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ce0:	f000 fe8c 	bl	800a9fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ce4:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <prvAddNewTaskToReadyList+0xb8>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <prvAddNewTaskToReadyList+0xb8>)
 8009cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cee:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <prvAddNewTaskToReadyList+0xbc>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cf6:	4a27      	ldr	r2, [pc, #156]	; (8009d94 <prvAddNewTaskToReadyList+0xbc>)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cfc:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <prvAddNewTaskToReadyList+0xb8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d110      	bne.n	8009d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d04:	f000 fbac 	bl	800a460 <prvInitialiseTaskLists>
 8009d08:	e00d      	b.n	8009d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d0a:	4b23      	ldr	r3, [pc, #140]	; (8009d98 <prvAddNewTaskToReadyList+0xc0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d109      	bne.n	8009d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <prvAddNewTaskToReadyList+0xbc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d802      	bhi.n	8009d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d20:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <prvAddNewTaskToReadyList+0xbc>)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <prvAddNewTaskToReadyList+0xc4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	4a1b      	ldr	r2, [pc, #108]	; (8009d9c <prvAddNewTaskToReadyList+0xc4>)
 8009d2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	2201      	movs	r2, #1
 8009d36:	409a      	lsls	r2, r3
 8009d38:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <prvAddNewTaskToReadyList+0xc8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <prvAddNewTaskToReadyList+0xc8>)
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4a15      	ldr	r2, [pc, #84]	; (8009da4 <prvAddNewTaskToReadyList+0xcc>)
 8009d50:	441a      	add	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3304      	adds	r3, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7ff f98e 	bl	800907a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d5e:	f000 fe7b 	bl	800aa58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <prvAddNewTaskToReadyList+0xc0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00e      	beq.n	8009d88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <prvAddNewTaskToReadyList+0xbc>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d207      	bcs.n	8009d88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d78:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <prvAddNewTaskToReadyList+0xd0>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	200001c0 	.word	0x200001c0
 8009d94:	200000c0 	.word	0x200000c0
 8009d98:	200001cc 	.word	0x200001cc
 8009d9c:	200001dc 	.word	0x200001dc
 8009da0:	200001c8 	.word	0x200001c8
 8009da4:	200000c4 	.word	0x200000c4
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d016      	beq.n	8009dec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <vTaskDelay+0x60>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <vTaskDelay+0x2e>
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	60bb      	str	r3, [r7, #8]
 8009dd8:	e7fe      	b.n	8009dd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009dda:	f000 f861 	bl	8009ea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dde:	2100      	movs	r1, #0
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc81 	bl	800a6e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009de6:	f000 f869 	bl	8009ebc <xTaskResumeAll>
 8009dea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d107      	bne.n	8009e02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <vTaskDelay+0x64>)
 8009df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	200001e8 	.word	0x200001e8
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	; (8009e88 <vTaskStartScheduler+0x74>)
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	2300      	movs	r3, #0
 8009e24:	2280      	movs	r2, #128	; 0x80
 8009e26:	4919      	ldr	r1, [pc, #100]	; (8009e8c <vTaskStartScheduler+0x78>)
 8009e28:	4819      	ldr	r0, [pc, #100]	; (8009e90 <vTaskStartScheduler+0x7c>)
 8009e2a:	f7ff fe96 	bl	8009b5a <xTaskCreate>
 8009e2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d115      	bne.n	8009e62 <vTaskStartScheduler+0x4e>
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e48:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <vTaskStartScheduler+0x80>)
 8009e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e50:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <vTaskStartScheduler+0x84>)
 8009e52:	2201      	movs	r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009e56:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <vTaskStartScheduler+0x88>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e5c:	f000 fd30 	bl	800a8c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e60:	e00d      	b.n	8009e7e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d109      	bne.n	8009e7e <vTaskStartScheduler+0x6a>
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	e7fe      	b.n	8009e7c <vTaskStartScheduler+0x68>
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	200001e4 	.word	0x200001e4
 8009e8c:	0800cad0 	.word	0x0800cad0
 8009e90:	0800a431 	.word	0x0800a431
 8009e94:	200001e0 	.word	0x200001e0
 8009e98:	200001cc 	.word	0x200001cc
 8009e9c:	200001c4 	.word	0x200001c4

08009ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ea4:	4b04      	ldr	r3, [pc, #16]	; (8009eb8 <vTaskSuspendAll+0x18>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	4a03      	ldr	r2, [pc, #12]	; (8009eb8 <vTaskSuspendAll+0x18>)
 8009eac:	6013      	str	r3, [r2, #0]
}
 8009eae:	bf00      	nop
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	200001e8 	.word	0x200001e8

08009ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eca:	4b41      	ldr	r3, [pc, #260]	; (8009fd0 <xTaskResumeAll+0x114>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <xTaskResumeAll+0x2a>
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	e7fe      	b.n	8009ee4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ee6:	f000 fd89 	bl	800a9fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009eea:	4b39      	ldr	r3, [pc, #228]	; (8009fd0 <xTaskResumeAll+0x114>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	4a37      	ldr	r2, [pc, #220]	; (8009fd0 <xTaskResumeAll+0x114>)
 8009ef2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ef4:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <xTaskResumeAll+0x114>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d161      	bne.n	8009fc0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009efc:	4b35      	ldr	r3, [pc, #212]	; (8009fd4 <xTaskResumeAll+0x118>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d05d      	beq.n	8009fc0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f04:	e02e      	b.n	8009f64 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009f06:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <xTaskResumeAll+0x11c>)
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3318      	adds	r3, #24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff f90e 	bl	8009134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff f909 	bl	8009134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	2201      	movs	r2, #1
 8009f28:	409a      	lsls	r2, r3
 8009f2a:	4b2c      	ldr	r3, [pc, #176]	; (8009fdc <xTaskResumeAll+0x120>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	4a2a      	ldr	r2, [pc, #168]	; (8009fdc <xTaskResumeAll+0x120>)
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4a27      	ldr	r2, [pc, #156]	; (8009fe0 <xTaskResumeAll+0x124>)
 8009f42:	441a      	add	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f7ff f895 	bl	800907a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f54:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <xTaskResumeAll+0x128>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d302      	bcc.n	8009f64 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009f5e:	4b22      	ldr	r3, [pc, #136]	; (8009fe8 <xTaskResumeAll+0x12c>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f64:	4b1c      	ldr	r3, [pc, #112]	; (8009fd8 <xTaskResumeAll+0x11c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1cc      	bne.n	8009f06 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f72:	f000 faf1 	bl	800a558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009f76:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <xTaskResumeAll+0x130>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d010      	beq.n	8009fa4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f82:	f000 f837 	bl	8009ff4 <xTaskIncrementTick>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <xTaskResumeAll+0x12c>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1f1      	bne.n	8009f82 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009f9e:	4b13      	ldr	r3, [pc, #76]	; (8009fec <xTaskResumeAll+0x130>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fa4:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <xTaskResumeAll+0x12c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d009      	beq.n	8009fc0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <xTaskResumeAll+0x134>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fc0:	f000 fd4a 	bl	800aa58 <vPortExitCritical>

	return xAlreadyYielded;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	200001e8 	.word	0x200001e8
 8009fd4:	200001c0 	.word	0x200001c0
 8009fd8:	20000180 	.word	0x20000180
 8009fdc:	200001c8 	.word	0x200001c8
 8009fe0:	200000c4 	.word	0x200000c4
 8009fe4:	200000c0 	.word	0x200000c0
 8009fe8:	200001d4 	.word	0x200001d4
 8009fec:	200001d0 	.word	0x200001d0
 8009ff0:	e000ed04 	.word	0xe000ed04

08009ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ffe:	4b50      	ldr	r3, [pc, #320]	; (800a140 <xTaskIncrementTick+0x14c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f040 808c 	bne.w	800a120 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a008:	4b4e      	ldr	r3, [pc, #312]	; (800a144 <xTaskIncrementTick+0x150>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a010:	4a4c      	ldr	r2, [pc, #304]	; (800a144 <xTaskIncrementTick+0x150>)
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d11f      	bne.n	800a05c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a01c:	4b4a      	ldr	r3, [pc, #296]	; (800a148 <xTaskIncrementTick+0x154>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <xTaskIncrementTick+0x46>
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	e7fe      	b.n	800a038 <xTaskIncrementTick+0x44>
 800a03a:	4b43      	ldr	r3, [pc, #268]	; (800a148 <xTaskIncrementTick+0x154>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	4b42      	ldr	r3, [pc, #264]	; (800a14c <xTaskIncrementTick+0x158>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a40      	ldr	r2, [pc, #256]	; (800a148 <xTaskIncrementTick+0x154>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	4a40      	ldr	r2, [pc, #256]	; (800a14c <xTaskIncrementTick+0x158>)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	4b40      	ldr	r3, [pc, #256]	; (800a150 <xTaskIncrementTick+0x15c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	4a3e      	ldr	r2, [pc, #248]	; (800a150 <xTaskIncrementTick+0x15c>)
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	f000 fa7e 	bl	800a558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a05c:	4b3d      	ldr	r3, [pc, #244]	; (800a154 <xTaskIncrementTick+0x160>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	429a      	cmp	r2, r3
 800a064:	d34d      	bcc.n	800a102 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a066:	4b38      	ldr	r3, [pc, #224]	; (800a148 <xTaskIncrementTick+0x154>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <xTaskIncrementTick+0x80>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <xTaskIncrementTick+0x82>
 800a074:	2300      	movs	r3, #0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a07a:	4b36      	ldr	r3, [pc, #216]	; (800a154 <xTaskIncrementTick+0x160>)
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	601a      	str	r2, [r3, #0]
					break;
 800a082:	e03e      	b.n	800a102 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a084:	4b30      	ldr	r3, [pc, #192]	; (800a148 <xTaskIncrementTick+0x154>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d203      	bcs.n	800a0a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a09c:	4a2d      	ldr	r2, [pc, #180]	; (800a154 <xTaskIncrementTick+0x160>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
						break;
 800a0a2:	e02e      	b.n	800a102 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff f843 	bl	8009134 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d004      	beq.n	800a0c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	3318      	adds	r3, #24
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff f83a 	bl	8009134 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	409a      	lsls	r2, r3
 800a0c8:	4b23      	ldr	r3, [pc, #140]	; (800a158 <xTaskIncrementTick+0x164>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	4a22      	ldr	r2, [pc, #136]	; (800a158 <xTaskIncrementTick+0x164>)
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <xTaskIncrementTick+0x168>)
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7fe ffc6 	bl	800907a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <xTaskIncrementTick+0x16c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d3b4      	bcc.n	800a066 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a100:	e7b1      	b.n	800a066 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a102:	4b17      	ldr	r3, [pc, #92]	; (800a160 <xTaskIncrementTick+0x16c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	4914      	ldr	r1, [pc, #80]	; (800a15c <xTaskIncrementTick+0x168>)
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	440b      	add	r3, r1
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d907      	bls.n	800a12a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a11a:	2301      	movs	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e004      	b.n	800a12a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a120:	4b10      	ldr	r3, [pc, #64]	; (800a164 <xTaskIncrementTick+0x170>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	4a0f      	ldr	r2, [pc, #60]	; (800a164 <xTaskIncrementTick+0x170>)
 800a128:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <xTaskIncrementTick+0x174>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a132:	2301      	movs	r3, #1
 800a134:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a136:	697b      	ldr	r3, [r7, #20]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	200001e8 	.word	0x200001e8
 800a144:	200001c4 	.word	0x200001c4
 800a148:	20000178 	.word	0x20000178
 800a14c:	2000017c 	.word	0x2000017c
 800a150:	200001d8 	.word	0x200001d8
 800a154:	200001e0 	.word	0x200001e0
 800a158:	200001c8 	.word	0x200001c8
 800a15c:	200000c4 	.word	0x200000c4
 800a160:	200000c0 	.word	0x200000c0
 800a164:	200001d0 	.word	0x200001d0
 800a168:	200001d4 	.word	0x200001d4

0800a16c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a172:	4b26      	ldr	r3, [pc, #152]	; (800a20c <vTaskSwitchContext+0xa0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a17a:	4b25      	ldr	r3, [pc, #148]	; (800a210 <vTaskSwitchContext+0xa4>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a180:	e03e      	b.n	800a200 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a182:	4b23      	ldr	r3, [pc, #140]	; (800a210 <vTaskSwitchContext+0xa4>)
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a188:	4b22      	ldr	r3, [pc, #136]	; (800a214 <vTaskSwitchContext+0xa8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	fab3 f383 	clz	r3, r3
 800a194:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	f1c3 031f 	rsb	r3, r3, #31
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	491e      	ldr	r1, [pc, #120]	; (800a218 <vTaskSwitchContext+0xac>)
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	607b      	str	r3, [r7, #4]
 800a1c4:	e7fe      	b.n	800a1c4 <vTaskSwitchContext+0x58>
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4a11      	ldr	r2, [pc, #68]	; (800a218 <vTaskSwitchContext+0xac>)
 800a1d2:	4413      	add	r3, r2
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	605a      	str	r2, [r3, #4]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d104      	bne.n	800a1f6 <vTaskSwitchContext+0x8a>
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4a07      	ldr	r2, [pc, #28]	; (800a21c <vTaskSwitchContext+0xb0>)
 800a1fe:	6013      	str	r3, [r2, #0]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	200001e8 	.word	0x200001e8
 800a210:	200001d4 	.word	0x200001d4
 800a214:	200001c8 	.word	0x200001c8
 800a218:	200000c4 	.word	0x200000c4
 800a21c:	200000c0 	.word	0x200000c0

0800a220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d109      	bne.n	800a244 <vTaskPlaceOnEventList+0x24>
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	e7fe      	b.n	800a242 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <vTaskPlaceOnEventList+0x44>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3318      	adds	r3, #24
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7fe ff38 	bl	80090c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a252:	2101      	movs	r1, #1
 800a254:	6838      	ldr	r0, [r7, #0]
 800a256:	f000 fa47 	bl	800a6e8 <prvAddCurrentTaskToDelayedList>
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200000c0 	.word	0x200000c0

0800a268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <xTaskRemoveFromEventList+0x2a>
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	e7fe      	b.n	800a290 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	3318      	adds	r3, #24
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe ff4c 	bl	8009134 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29c:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <xTaskRemoveFromEventList+0xac>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d11c      	bne.n	800a2de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe ff43 	bl	8009134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	409a      	lsls	r2, r3
 800a2b6:	4b18      	ldr	r3, [pc, #96]	; (800a318 <xTaskRemoveFromEventList+0xb0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	4a16      	ldr	r2, [pc, #88]	; (800a318 <xTaskRemoveFromEventList+0xb0>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a13      	ldr	r2, [pc, #76]	; (800a31c <xTaskRemoveFromEventList+0xb4>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fe fecf 	bl	800907a <vListInsertEnd>
 800a2dc:	e005      	b.n	800a2ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3318      	adds	r3, #24
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	480e      	ldr	r0, [pc, #56]	; (800a320 <xTaskRemoveFromEventList+0xb8>)
 800a2e6:	f7fe fec8 	bl	800907a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <xTaskRemoveFromEventList+0xbc>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d905      	bls.n	800a304 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <xTaskRemoveFromEventList+0xc0>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	e001      	b.n	800a308 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a308:	697b      	ldr	r3, [r7, #20]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	200001e8 	.word	0x200001e8
 800a318:	200001c8 	.word	0x200001c8
 800a31c:	200000c4 	.word	0x200000c4
 800a320:	20000180 	.word	0x20000180
 800a324:	200000c0 	.word	0x200000c0
 800a328:	200001d4 	.word	0x200001d4

0800a32c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <vTaskInternalSetTimeOutState+0x24>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a33c:	4b05      	ldr	r3, [pc, #20]	; (800a354 <vTaskInternalSetTimeOutState+0x28>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	605a      	str	r2, [r3, #4]
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	200001d8 	.word	0x200001d8
 800a354:	200001c4 	.word	0x200001c4

0800a358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d109      	bne.n	800a37c <xTaskCheckForTimeOut+0x24>
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	e7fe      	b.n	800a37a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <xTaskCheckForTimeOut+0x3e>
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e7fe      	b.n	800a394 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a396:	f000 fb31 	bl	800a9fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <xTaskCheckForTimeOut+0xb8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b2:	d102      	bne.n	800a3ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61fb      	str	r3, [r7, #28]
 800a3b8:	e023      	b.n	800a402 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b15      	ldr	r3, [pc, #84]	; (800a414 <xTaskCheckForTimeOut+0xbc>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d007      	beq.n	800a3d6 <xTaskCheckForTimeOut+0x7e>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d302      	bcc.n	800a3d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	e015      	b.n	800a402 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d20b      	bcs.n	800a3f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff ff9d 	bl	800a32c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61fb      	str	r3, [r7, #28]
 800a3f6:	e004      	b.n	800a402 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a402:	f000 fb29 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3720      	adds	r7, #32
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	200001c4 	.word	0x200001c4
 800a414:	200001d8 	.word	0x200001d8

0800a418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a41c:	4b03      	ldr	r3, [pc, #12]	; (800a42c <vTaskMissedYield+0x14>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
}
 800a422:	bf00      	nop
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	200001d4 	.word	0x200001d4

0800a430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a438:	f000 f852 	bl	800a4e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <prvIdleTask+0x28>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d9f9      	bls.n	800a438 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <prvIdleTask+0x2c>)
 800a446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a454:	e7f0      	b.n	800a438 <prvIdleTask+0x8>
 800a456:	bf00      	nop
 800a458:	200000c4 	.word	0x200000c4
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a466:	2300      	movs	r3, #0
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	e00c      	b.n	800a486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4a12      	ldr	r2, [pc, #72]	; (800a4c0 <prvInitialiseTaskLists+0x60>)
 800a478:	4413      	add	r3, r2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fdd0 	bl	8009020 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3301      	adds	r3, #1
 800a484:	607b      	str	r3, [r7, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b06      	cmp	r3, #6
 800a48a:	d9ef      	bls.n	800a46c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a48c:	480d      	ldr	r0, [pc, #52]	; (800a4c4 <prvInitialiseTaskLists+0x64>)
 800a48e:	f7fe fdc7 	bl	8009020 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a492:	480d      	ldr	r0, [pc, #52]	; (800a4c8 <prvInitialiseTaskLists+0x68>)
 800a494:	f7fe fdc4 	bl	8009020 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a498:	480c      	ldr	r0, [pc, #48]	; (800a4cc <prvInitialiseTaskLists+0x6c>)
 800a49a:	f7fe fdc1 	bl	8009020 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a49e:	480c      	ldr	r0, [pc, #48]	; (800a4d0 <prvInitialiseTaskLists+0x70>)
 800a4a0:	f7fe fdbe 	bl	8009020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4a4:	480b      	ldr	r0, [pc, #44]	; (800a4d4 <prvInitialiseTaskLists+0x74>)
 800a4a6:	f7fe fdbb 	bl	8009020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <prvInitialiseTaskLists+0x78>)
 800a4ac:	4a05      	ldr	r2, [pc, #20]	; (800a4c4 <prvInitialiseTaskLists+0x64>)
 800a4ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <prvInitialiseTaskLists+0x7c>)
 800a4b2:	4a05      	ldr	r2, [pc, #20]	; (800a4c8 <prvInitialiseTaskLists+0x68>)
 800a4b4:	601a      	str	r2, [r3, #0]
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	200000c4 	.word	0x200000c4
 800a4c4:	20000150 	.word	0x20000150
 800a4c8:	20000164 	.word	0x20000164
 800a4cc:	20000180 	.word	0x20000180
 800a4d0:	20000194 	.word	0x20000194
 800a4d4:	200001ac 	.word	0x200001ac
 800a4d8:	20000178 	.word	0x20000178
 800a4dc:	2000017c 	.word	0x2000017c

0800a4e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4e6:	e019      	b.n	800a51c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4e8:	f000 fa88 	bl	800a9fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <prvCheckTasksWaitingTermination+0x4c>)
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fe1b 	bl	8009134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4fe:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <prvCheckTasksWaitingTermination+0x50>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3b01      	subs	r3, #1
 800a504:	4a0a      	ldr	r2, [pc, #40]	; (800a530 <prvCheckTasksWaitingTermination+0x50>)
 800a506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <prvCheckTasksWaitingTermination+0x54>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	4a09      	ldr	r2, [pc, #36]	; (800a534 <prvCheckTasksWaitingTermination+0x54>)
 800a510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a512:	f000 faa1 	bl	800aa58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f80e 	bl	800a538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <prvCheckTasksWaitingTermination+0x54>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e1      	bne.n	800a4e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000194 	.word	0x20000194
 800a530:	200001c0 	.word	0x200001c0
 800a534:	200001a8 	.word	0x200001a8

0800a538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fc35 	bl	800adb4 <vPortFree>
			vPortFree( pxTCB );
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fc32 	bl	800adb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a55e:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <prvResetNextTaskUnblockTime+0x44>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <prvResetNextTaskUnblockTime+0x14>
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <prvResetNextTaskUnblockTime+0x16>
 800a56c:	2300      	movs	r3, #0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d004      	beq.n	800a57c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a572:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <prvResetNextTaskUnblockTime+0x48>)
 800a574:	f04f 32ff 	mov.w	r2, #4294967295
 800a578:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a57a:	e008      	b.n	800a58e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a57c:	4b07      	ldr	r3, [pc, #28]	; (800a59c <prvResetNextTaskUnblockTime+0x44>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	4a05      	ldr	r2, [pc, #20]	; (800a5a0 <prvResetNextTaskUnblockTime+0x48>)
 800a58c:	6013      	str	r3, [r2, #0]
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000178 	.word	0x20000178
 800a5a0:	200001e0 	.word	0x200001e0

0800a5a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <xTaskGetSchedulerState+0x34>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d102      	bne.n	800a5b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e008      	b.n	800a5ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b8:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <xTaskGetSchedulerState+0x38>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	607b      	str	r3, [r7, #4]
 800a5c4:	e001      	b.n	800a5ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5ca:	687b      	ldr	r3, [r7, #4]
	}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	200001cc 	.word	0x200001cc
 800a5dc:	200001e8 	.word	0x200001e8

0800a5e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d06c      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5f6:	4b39      	ldr	r3, [pc, #228]	; (800a6dc <xTaskPriorityDisinherit+0xfc>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d009      	beq.n	800a614 <xTaskPriorityDisinherit+0x34>
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e7fe      	b.n	800a612 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <xTaskPriorityDisinherit+0x50>
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60bb      	str	r3, [r7, #8]
 800a62e:	e7fe      	b.n	800a62e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a634:	1e5a      	subs	r2, r3, #1
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	429a      	cmp	r2, r3
 800a644:	d044      	beq.n	800a6d0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d140      	bne.n	800a6d0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fd6e 	bl	8009134 <uxListRemove>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d115      	bne.n	800a68a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a662:	491f      	ldr	r1, [pc, #124]	; (800a6e0 <xTaskPriorityDisinherit+0x100>)
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xTaskPriorityDisinherit+0xaa>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	2201      	movs	r2, #1
 800a67a:	fa02 f303 	lsl.w	r3, r2, r3
 800a67e:	43da      	mvns	r2, r3
 800a680:	4b18      	ldr	r3, [pc, #96]	; (800a6e4 <xTaskPriorityDisinherit+0x104>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4013      	ands	r3, r2
 800a686:	4a17      	ldr	r2, [pc, #92]	; (800a6e4 <xTaskPriorityDisinherit+0x104>)
 800a688:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f1c3 0207 	rsb	r2, r3, #7
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	409a      	lsls	r2, r3
 800a6a6:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <xTaskPriorityDisinherit+0x104>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	4a0d      	ldr	r2, [pc, #52]	; (800a6e4 <xTaskPriorityDisinherit+0x104>)
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a08      	ldr	r2, [pc, #32]	; (800a6e0 <xTaskPriorityDisinherit+0x100>)
 800a6be:	441a      	add	r2, r3
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f7fe fcd7 	bl	800907a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6d0:	697b      	ldr	r3, [r7, #20]
	}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200000c0 	.word	0x200000c0
 800a6e0:	200000c4 	.word	0x200000c4
 800a6e4:	200001c8 	.word	0x200001c8

0800a6e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6f2:	4b29      	ldr	r3, [pc, #164]	; (800a798 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f8:	4b28      	ldr	r3, [pc, #160]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fd18 	bl	8009134 <uxListRemove>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	fa02 f303 	lsl.w	r3, r2, r3
 800a716:	43da      	mvns	r2, r3
 800a718:	4b21      	ldr	r3, [pc, #132]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4013      	ands	r3, r2
 800a71e:	4a20      	ldr	r2, [pc, #128]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d10a      	bne.n	800a740 <prvAddCurrentTaskToDelayedList+0x58>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d007      	beq.n	800a740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a730:	4b1a      	ldr	r3, [pc, #104]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	481a      	ldr	r0, [pc, #104]	; (800a7a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a73a:	f7fe fc9e 	bl	800907a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a73e:	e026      	b.n	800a78e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a748:	4b14      	ldr	r3, [pc, #80]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	429a      	cmp	r2, r3
 800a756:	d209      	bcs.n	800a76c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a758:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3304      	adds	r3, #4
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fe fcac 	bl	80090c2 <vListInsert>
}
 800a76a:	e010      	b.n	800a78e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a76c:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3304      	adds	r3, #4
 800a776:	4619      	mov	r1, r3
 800a778:	4610      	mov	r0, r2
 800a77a:	f7fe fca2 	bl	80090c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a77e:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	429a      	cmp	r2, r3
 800a786:	d202      	bcs.n	800a78e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a788:	4a09      	ldr	r2, [pc, #36]	; (800a7b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	6013      	str	r3, [r2, #0]
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200001c4 	.word	0x200001c4
 800a79c:	200000c0 	.word	0x200000c0
 800a7a0:	200001c8 	.word	0x200001c8
 800a7a4:	200001ac 	.word	0x200001ac
 800a7a8:	2000017c 	.word	0x2000017c
 800a7ac:	20000178 	.word	0x20000178
 800a7b0:	200001e0 	.word	0x200001e0

0800a7b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f023 0201 	bic.w	r2, r3, #1
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7e4:	4a0c      	ldr	r2, [pc, #48]	; (800a818 <pxPortInitialiseStack+0x64>)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3b14      	subs	r3, #20
 800a7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3b04      	subs	r3, #4
 800a7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f06f 0202 	mvn.w	r2, #2
 800a802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3b20      	subs	r3, #32
 800a808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a80a:	68fb      	ldr	r3, [r7, #12]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	0800a81d 	.word	0x0800a81d

0800a81c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a826:	4b11      	ldr	r3, [pc, #68]	; (800a86c <prvTaskExitError+0x50>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82e:	d009      	beq.n	800a844 <prvTaskExitError+0x28>
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e7fe      	b.n	800a842 <prvTaskExitError+0x26>
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a856:	bf00      	nop
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0fc      	beq.n	800a858 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000028 	.word	0x20000028

0800a870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <pxCurrentTCBConst2>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	6808      	ldr	r0, [r1, #0]
 800a876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87a:	f380 8809 	msr	PSP, r0
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	4770      	bx	lr
 800a88c:	f3af 8000 	nop.w

0800a890 <pxCurrentTCBConst2>:
 800a890:	200000c0 	.word	0x200000c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop

0800a898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a898:	4808      	ldr	r0, [pc, #32]	; (800a8bc <prvPortStartFirstTask+0x24>)
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	6800      	ldr	r0, [r0, #0]
 800a89e:	f380 8808 	msr	MSP, r0
 800a8a2:	f04f 0000 	mov.w	r0, #0
 800a8a6:	f380 8814 	msr	CONTROL, r0
 800a8aa:	b662      	cpsie	i
 800a8ac:	b661      	cpsie	f
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	df00      	svc	0
 800a8b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ba:	bf00      	nop
 800a8bc:	e000ed08 	.word	0xe000ed08

0800a8c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8c6:	4b44      	ldr	r3, [pc, #272]	; (800a9d8 <xPortStartScheduler+0x118>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a44      	ldr	r2, [pc, #272]	; (800a9dc <xPortStartScheduler+0x11c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d109      	bne.n	800a8e4 <xPortStartScheduler+0x24>
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	e7fe      	b.n	800a8e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8e4:	4b3c      	ldr	r3, [pc, #240]	; (800a9d8 <xPortStartScheduler+0x118>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a3d      	ldr	r2, [pc, #244]	; (800a9e0 <xPortStartScheduler+0x120>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d109      	bne.n	800a902 <xPortStartScheduler+0x42>
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	e7fe      	b.n	800a900 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a902:	4b38      	ldr	r3, [pc, #224]	; (800a9e4 <xPortStartScheduler+0x124>)
 800a904:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a924:	b2da      	uxtb	r2, r3
 800a926:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <xPortStartScheduler+0x128>)
 800a928:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a92a:	4b30      	ldr	r3, [pc, #192]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a92c:	2207      	movs	r2, #7
 800a92e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a930:	e009      	b.n	800a946 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a932:	4b2e      	ldr	r3, [pc, #184]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3b01      	subs	r3, #1
 800a938:	4a2c      	ldr	r2, [pc, #176]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a93a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a93c:	78fb      	ldrb	r3, [r7, #3]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	b2db      	uxtb	r3, r3
 800a944:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94e:	2b80      	cmp	r3, #128	; 0x80
 800a950:	d0ef      	beq.n	800a932 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a952:	4b26      	ldr	r3, [pc, #152]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f1c3 0307 	rsb	r3, r3, #7
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d009      	beq.n	800a972 <xPortStartScheduler+0xb2>
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	60bb      	str	r3, [r7, #8]
 800a970:	e7fe      	b.n	800a970 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a972:	4b1e      	ldr	r3, [pc, #120]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	021b      	lsls	r3, r3, #8
 800a978:	4a1c      	ldr	r2, [pc, #112]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a97a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a97c:	4b1b      	ldr	r3, [pc, #108]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a984:	4a19      	ldr	r2, [pc, #100]	; (800a9ec <xPortStartScheduler+0x12c>)
 800a986:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a990:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <xPortStartScheduler+0x130>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a16      	ldr	r2, [pc, #88]	; (800a9f0 <xPortStartScheduler+0x130>)
 800a996:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a99a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a99c:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <xPortStartScheduler+0x130>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a13      	ldr	r2, [pc, #76]	; (800a9f0 <xPortStartScheduler+0x130>)
 800a9a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9a8:	f000 f8d6 	bl	800ab58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9ac:	4b11      	ldr	r3, [pc, #68]	; (800a9f4 <xPortStartScheduler+0x134>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9b2:	f000 f8f5 	bl	800aba0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9b6:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a0f      	ldr	r2, [pc, #60]	; (800a9f8 <xPortStartScheduler+0x138>)
 800a9bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9c2:	f7ff ff69 	bl	800a898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9c6:	f7ff fbd1 	bl	800a16c <vTaskSwitchContext>
	prvTaskExitError();
 800a9ca:	f7ff ff27 	bl	800a81c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	e000ed00 	.word	0xe000ed00
 800a9dc:	410fc271 	.word	0x410fc271
 800a9e0:	410fc270 	.word	0x410fc270
 800a9e4:	e000e400 	.word	0xe000e400
 800a9e8:	200001ec 	.word	0x200001ec
 800a9ec:	200001f0 	.word	0x200001f0
 800a9f0:	e000ed20 	.word	0xe000ed20
 800a9f4:	20000028 	.word	0x20000028
 800a9f8:	e000ef34 	.word	0xe000ef34

0800a9fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa14:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <vPortEnterCritical+0x54>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	4a0d      	ldr	r2, [pc, #52]	; (800aa50 <vPortEnterCritical+0x54>)
 800aa1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <vPortEnterCritical+0x54>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d10e      	bne.n	800aa44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa26:	4b0b      	ldr	r3, [pc, #44]	; (800aa54 <vPortEnterCritical+0x58>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d009      	beq.n	800aa44 <vPortEnterCritical+0x48>
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	603b      	str	r3, [r7, #0]
 800aa42:	e7fe      	b.n	800aa42 <vPortEnterCritical+0x46>
	}
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	20000028 	.word	0x20000028
 800aa54:	e000ed04 	.word	0xe000ed04

0800aa58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa5e:	4b11      	ldr	r3, [pc, #68]	; (800aaa4 <vPortExitCritical+0x4c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <vPortExitCritical+0x22>
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	607b      	str	r3, [r7, #4]
 800aa78:	e7fe      	b.n	800aa78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aa7a:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <vPortExitCritical+0x4c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <vPortExitCritical+0x4c>)
 800aa82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa84:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <vPortExitCritical+0x4c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <vPortExitCritical+0x3e>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000028 	.word	0x20000028
	...

0800aab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aab0:	f3ef 8009 	mrs	r0, PSP
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <pxCurrentTCBConst>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	f01e 0f10 	tst.w	lr, #16
 800aac0:	bf08      	it	eq
 800aac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	6010      	str	r0, [r2, #0]
 800aacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aad4:	f380 8811 	msr	BASEPRI, r0
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f7ff fb44 	bl	800a16c <vTaskSwitchContext>
 800aae4:	f04f 0000 	mov.w	r0, #0
 800aae8:	f380 8811 	msr	BASEPRI, r0
 800aaec:	bc09      	pop	{r0, r3}
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	6808      	ldr	r0, [r1, #0]
 800aaf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf6:	f01e 0f10 	tst.w	lr, #16
 800aafa:	bf08      	it	eq
 800aafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab00:	f380 8809 	msr	PSP, r0
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w

0800ab10 <pxCurrentTCBConst>:
 800ab10:	200000c0 	.word	0x200000c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop

0800ab18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab30:	f7ff fa60 	bl	8009ff4 <xTaskIncrementTick>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab3a:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <SysTick_Handler+0x3c>)
 800ab3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	2300      	movs	r3, #0
 800ab44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab5c:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <vPortSetupTimerInterrupt+0x34>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab62:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <vPortSetupTimerInterrupt+0x38>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab68:	4b0a      	ldr	r3, [pc, #40]	; (800ab94 <vPortSetupTimerInterrupt+0x3c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <vPortSetupTimerInterrupt+0x40>)
 800ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab72:	099b      	lsrs	r3, r3, #6
 800ab74:	4a09      	ldr	r2, [pc, #36]	; (800ab9c <vPortSetupTimerInterrupt+0x44>)
 800ab76:	3b01      	subs	r3, #1
 800ab78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab7a:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <vPortSetupTimerInterrupt+0x34>)
 800ab7c:	2207      	movs	r2, #7
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	e000e010 	.word	0xe000e010
 800ab90:	e000e018 	.word	0xe000e018
 800ab94:	20000038 	.word	0x20000038
 800ab98:	10624dd3 	.word	0x10624dd3
 800ab9c:	e000e014 	.word	0xe000e014

0800aba0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aba0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abb0 <vPortEnableVFP+0x10>
 800aba4:	6801      	ldr	r1, [r0, #0]
 800aba6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abaa:	6001      	str	r1, [r0, #0]
 800abac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abae:	bf00      	nop
 800abb0:	e000ed88 	.word	0xe000ed88

0800abb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abba:	f3ef 8305 	mrs	r3, IPSR
 800abbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b0f      	cmp	r3, #15
 800abc4:	d913      	bls.n	800abee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abc6:	4a16      	ldr	r2, [pc, #88]	; (800ac20 <vPortValidateInterruptPriority+0x6c>)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abd0:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <vPortValidateInterruptPriority+0x70>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	7afa      	ldrb	r2, [r7, #11]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d209      	bcs.n	800abee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	607b      	str	r3, [r7, #4]
 800abec:	e7fe      	b.n	800abec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abee:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <vPortValidateInterruptPriority+0x74>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abf6:	4b0d      	ldr	r3, [pc, #52]	; (800ac2c <vPortValidateInterruptPriority+0x78>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d909      	bls.n	800ac12 <vPortValidateInterruptPriority+0x5e>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	e7fe      	b.n	800ac10 <vPortValidateInterruptPriority+0x5c>
	}
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	e000e3f0 	.word	0xe000e3f0
 800ac24:	200001ec 	.word	0x200001ec
 800ac28:	e000ed0c 	.word	0xe000ed0c
 800ac2c:	200001f0 	.word	0x200001f0

0800ac30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08a      	sub	sp, #40	; 0x28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac3c:	f7ff f930 	bl	8009ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac40:	4b57      	ldr	r3, [pc, #348]	; (800ada0 <pvPortMalloc+0x170>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac48:	f000 f90c 	bl	800ae64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac4c:	4b55      	ldr	r3, [pc, #340]	; (800ada4 <pvPortMalloc+0x174>)
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4013      	ands	r3, r2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f040 808c 	bne.w	800ad72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01c      	beq.n	800ac9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ac60:	2208      	movs	r2, #8
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f003 0307 	and.w	r3, r3, #7
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d013      	beq.n	800ac9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f023 0307 	bic.w	r3, r3, #7
 800ac78:	3308      	adds	r3, #8
 800ac7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f003 0307 	and.w	r3, r3, #7
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <pvPortMalloc+0x6a>
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e7fe      	b.n	800ac98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d068      	beq.n	800ad72 <pvPortMalloc+0x142>
 800aca0:	4b41      	ldr	r3, [pc, #260]	; (800ada8 <pvPortMalloc+0x178>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d863      	bhi.n	800ad72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acaa:	4b40      	ldr	r3, [pc, #256]	; (800adac <pvPortMalloc+0x17c>)
 800acac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acae:	4b3f      	ldr	r3, [pc, #252]	; (800adac <pvPortMalloc+0x17c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acb4:	e004      	b.n	800acc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d903      	bls.n	800acd2 <pvPortMalloc+0xa2>
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1f1      	bne.n	800acb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acd2:	4b33      	ldr	r3, [pc, #204]	; (800ada0 <pvPortMalloc+0x170>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acd8:	429a      	cmp	r2, r3
 800acda:	d04a      	beq.n	800ad72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acdc:	6a3b      	ldr	r3, [r7, #32]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2208      	movs	r2, #8
 800ace2:	4413      	add	r3, r2
 800ace4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	1ad2      	subs	r2, r2, r3
 800acf6:	2308      	movs	r3, #8
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d91e      	bls.n	800ad3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4413      	add	r3, r2
 800ad04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	f003 0307 	and.w	r3, r3, #7
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d009      	beq.n	800ad24 <pvPortMalloc+0xf4>
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	613b      	str	r3, [r7, #16]
 800ad22:	e7fe      	b.n	800ad22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	1ad2      	subs	r2, r2, r3
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad36:	69b8      	ldr	r0, [r7, #24]
 800ad38:	f000 f8f6 	bl	800af28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad3c:	4b1a      	ldr	r3, [pc, #104]	; (800ada8 <pvPortMalloc+0x178>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <pvPortMalloc+0x178>)
 800ad48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad4a:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <pvPortMalloc+0x178>)
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <pvPortMalloc+0x180>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d203      	bcs.n	800ad5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <pvPortMalloc+0x178>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a15      	ldr	r2, [pc, #84]	; (800adb0 <pvPortMalloc+0x180>)
 800ad5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <pvPortMalloc+0x174>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	431a      	orrs	r2, r3
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad72:	f7ff f8a3 	bl	8009ebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d009      	beq.n	800ad94 <pvPortMalloc+0x164>
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e7fe      	b.n	800ad92 <pvPortMalloc+0x162>
	return pvReturn;
 800ad94:	69fb      	ldr	r3, [r7, #28]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3728      	adds	r7, #40	; 0x28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000db4 	.word	0x20000db4
 800ada4:	20000dc0 	.word	0x20000dc0
 800ada8:	20000db8 	.word	0x20000db8
 800adac:	20000dac 	.word	0x20000dac
 800adb0:	20000dbc 	.word	0x20000dbc

0800adb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d046      	beq.n	800ae54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adc6:	2308      	movs	r3, #8
 800adc8:	425b      	negs	r3, r3
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4413      	add	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	4b20      	ldr	r3, [pc, #128]	; (800ae5c <vPortFree+0xa8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4013      	ands	r3, r2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <vPortFree+0x42>
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	e7fe      	b.n	800adf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <vPortFree+0x5e>
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	60bb      	str	r3, [r7, #8]
 800ae10:	e7fe      	b.n	800ae10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <vPortFree+0xa8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d019      	beq.n	800ae54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d115      	bne.n	800ae54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <vPortFree+0xa8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae38:	f7ff f832 	bl	8009ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <vPortFree+0xac>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4413      	add	r3, r2
 800ae46:	4a06      	ldr	r2, [pc, #24]	; (800ae60 <vPortFree+0xac>)
 800ae48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae4a:	6938      	ldr	r0, [r7, #16]
 800ae4c:	f000 f86c 	bl	800af28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae50:	f7ff f834 	bl	8009ebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae54:	bf00      	nop
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000dc0 	.word	0x20000dc0
 800ae60:	20000db8 	.word	0x20000db8

0800ae64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ae6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae70:	4b27      	ldr	r3, [pc, #156]	; (800af10 <prvHeapInit+0xac>)
 800ae72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00c      	beq.n	800ae98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3307      	adds	r3, #7
 800ae82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0307 	bic.w	r3, r3, #7
 800ae8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <prvHeapInit+0xac>)
 800ae94:	4413      	add	r3, r2
 800ae96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae9c:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <prvHeapInit+0xb0>)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <prvHeapInit+0xb0>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	4413      	add	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	1a9b      	subs	r3, r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0307 	bic.w	r3, r3, #7
 800aebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4a15      	ldr	r2, [pc, #84]	; (800af18 <prvHeapInit+0xb4>)
 800aec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aec6:	4b14      	ldr	r3, [pc, #80]	; (800af18 <prvHeapInit+0xb4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2200      	movs	r2, #0
 800aecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aece:	4b12      	ldr	r3, [pc, #72]	; (800af18 <prvHeapInit+0xb4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	1ad2      	subs	r2, r2, r3
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aee4:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvHeapInit+0xb4>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <prvHeapInit+0xb8>)
 800aef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <prvHeapInit+0xbc>)
 800aefa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <prvHeapInit+0xc0>)
 800aefe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af02:	601a      	str	r2, [r3, #0]
}
 800af04:	bf00      	nop
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	200001f4 	.word	0x200001f4
 800af14:	20000dac 	.word	0x20000dac
 800af18:	20000db4 	.word	0x20000db4
 800af1c:	20000dbc 	.word	0x20000dbc
 800af20:	20000db8 	.word	0x20000db8
 800af24:	20000dc0 	.word	0x20000dc0

0800af28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af30:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <prvInsertBlockIntoFreeList+0xac>)
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e002      	b.n	800af3c <prvInsertBlockIntoFreeList+0x14>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	429a      	cmp	r2, r3
 800af44:	d8f7      	bhi.n	800af36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	4413      	add	r3, r2
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	429a      	cmp	r2, r3
 800af56:	d108      	bne.n	800af6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	441a      	add	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	441a      	add	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d118      	bne.n	800afb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4b15      	ldr	r3, [pc, #84]	; (800afd8 <prvInsertBlockIntoFreeList+0xb0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d00d      	beq.n	800afa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	441a      	add	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	e008      	b.n	800afb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afa6:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <prvInsertBlockIntoFreeList+0xb0>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e003      	b.n	800afb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d002      	beq.n	800afc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20000dac 	.word	0x20000dac
 800afd8:	20000db4 	.word	0x20000db4

0800afdc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800afdc:	b5b0      	push	{r4, r5, r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800afe6:	f107 0314 	add.w	r3, r7, #20
 800afea:	4618      	mov	r0, r3
 800afec:	f7fd ff46 	bl	8008e7c <osMutexCreate>
 800aff0:	4602      	mov	r2, r0
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <MX_FREERTOS_Init+0x40>)
 800aff4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, Thread1, osPriorityNormal, 0, 128);
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <MX_FREERTOS_Init+0x44>)
 800aff8:	463c      	mov	r4, r7
 800affa:	461d      	mov	r5, r3
 800affc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800affe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	6023      	str	r3, [r4, #0]
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 800b004:	463b      	mov	r3, r7
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd fefc 	bl	8008e06 <osThreadCreate>
 800b00e:	4602      	mov	r2, r0
 800b010:	4b04      	ldr	r3, [pc, #16]	; (800b024 <MX_FREERTOS_Init+0x48>)
 800b012:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800b014:	bf00      	nop
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bdb0      	pop	{r4, r5, r7, pc}
 800b01c:	20000df0 	.word	0x20000df0
 800b020:	0800cae0 	.word	0x0800cae0
 800b024:	20000dec 	.word	0x20000dec

0800b028 <Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Thread1 */
void Thread1(void const * argument)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800b030:	f001 f8f4 	bl	800c21c <MX_USB_HOST_Init>
//  motorMove(roboclaw0, 0,0);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800b034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b038:	f7fd ff0c 	bl	8008e54 <osDelay>
 800b03c:	e7fa      	b.n	800b034 <Thread1+0xc>
	...

0800b040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b046:	f107 031c 	add.w	r3, r7, #28
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	605a      	str	r2, [r3, #4]
 800b050:	609a      	str	r2, [r3, #8]
 800b052:	60da      	str	r2, [r3, #12]
 800b054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b056:	4b9a      	ldr	r3, [pc, #616]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	4a99      	ldr	r2, [pc, #612]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b05c:	f043 0310 	orr.w	r3, r3, #16
 800b060:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b062:	4b97      	ldr	r3, [pc, #604]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b06e:	4b94      	ldr	r3, [pc, #592]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	4a93      	ldr	r2, [pc, #588]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b074:	f043 0304 	orr.w	r3, r3, #4
 800b078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b07a:	4b91      	ldr	r3, [pc, #580]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07e:	f003 0304 	and.w	r3, r3, #4
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b086:	4b8e      	ldr	r3, [pc, #568]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b08a:	4a8d      	ldr	r2, [pc, #564]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b090:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b092:	4b8b      	ldr	r3, [pc, #556]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09a:	613b      	str	r3, [r7, #16]
 800b09c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b09e:	4b88      	ldr	r3, [pc, #544]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a2:	4a87      	ldr	r2, [pc, #540]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0a4:	f043 0301 	orr.w	r3, r3, #1
 800b0a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0aa:	4b85      	ldr	r3, [pc, #532]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0b6:	4b82      	ldr	r3, [pc, #520]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ba:	4a81      	ldr	r2, [pc, #516]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0c2:	4b7f      	ldr	r3, [pc, #508]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	60bb      	str	r3, [r7, #8]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b0ce:	4b7c      	ldr	r3, [pc, #496]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d2:	4a7b      	ldr	r2, [pc, #492]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0d4:	f043 0308 	orr.w	r3, r3, #8
 800b0d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0da:	4b79      	ldr	r3, [pc, #484]	; (800b2c0 <MX_GPIO_Init+0x280>)
 800b0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	607b      	str	r3, [r7, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f240 1109 	movw	r1, #265	; 0x109
 800b0ec:	4875      	ldr	r0, [pc, #468]	; (800b2c4 <MX_GPIO_Init+0x284>)
 800b0ee:	f7f5 fd1b 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	210c      	movs	r1, #12
 800b0f6:	4874      	ldr	r0, [pc, #464]	; (800b2c8 <MX_GPIO_Init+0x288>)
 800b0f8:	f7f5 fd16 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b102:	4872      	ldr	r0, [pc, #456]	; (800b2cc <MX_GPIO_Init+0x28c>)
 800b104:	f7f5 fd10 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 800b108:	2200      	movs	r2, #0
 800b10a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b10e:	486f      	ldr	r0, [pc, #444]	; (800b2cc <MX_GPIO_Init+0x28c>)
 800b110:	f7f5 fd0a 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800b114:	2200      	movs	r2, #0
 800b116:	2180      	movs	r1, #128	; 0x80
 800b118:	486d      	ldr	r0, [pc, #436]	; (800b2d0 <MX_GPIO_Init+0x290>)
 800b11a:	f7f5 fd05 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800b11e:	2308      	movs	r3, #8
 800b120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b122:	2301      	movs	r3, #1
 800b124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b126:	2300      	movs	r3, #0
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b12a:	2302      	movs	r3, #2
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800b12e:	f107 031c 	add.w	r3, r7, #28
 800b132:	4619      	mov	r1, r3
 800b134:	4863      	ldr	r0, [pc, #396]	; (800b2c4 <MX_GPIO_Init+0x284>)
 800b136:	f7f5 fb4f 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800b13a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b13e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b140:	4b64      	ldr	r3, [pc, #400]	; (800b2d4 <MX_GPIO_Init+0x294>)
 800b142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b144:	2300      	movs	r3, #0
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b148:	f107 031c 	add.w	r3, r7, #28
 800b14c:	4619      	mov	r1, r3
 800b14e:	485f      	ldr	r0, [pc, #380]	; (800b2cc <MX_GPIO_Init+0x28c>)
 800b150:	f7f5 fb42 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 800b154:	2307      	movs	r3, #7
 800b156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b158:	2300      	movs	r3, #0
 800b15a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b160:	f107 031c 	add.w	r3, r7, #28
 800b164:	4619      	mov	r1, r3
 800b166:	4859      	ldr	r0, [pc, #356]	; (800b2cc <MX_GPIO_Init+0x28c>)
 800b168:	f7f5 fb36 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Joystick_Center_Pin|Joystick_Down_Pin;
 800b16c:	2303      	movs	r3, #3
 800b16e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b170:	4b59      	ldr	r3, [pc, #356]	; (800b2d8 <MX_GPIO_Init+0x298>)
 800b172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b174:	2300      	movs	r3, #0
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b178:	f107 031c 	add.w	r3, r7, #28
 800b17c:	4619      	mov	r1, r3
 800b17e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b182:	f7f5 fb29 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800b186:	2310      	movs	r3, #16
 800b188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b18a:	4b52      	ldr	r3, [pc, #328]	; (800b2d4 <MX_GPIO_Init+0x294>)
 800b18c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800b192:	f107 031c 	add.w	r3, r7, #28
 800b196:	4619      	mov	r1, r3
 800b198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b19c:	f7f5 fb1c 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 800b1a0:	2320      	movs	r3, #32
 800b1a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 800b1ac:	f107 031c 	add.w	r3, r7, #28
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b1b6:	f7f5 fb0f 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800b1ca:	f107 031c 	add.w	r3, r7, #28
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	483d      	ldr	r0, [pc, #244]	; (800b2c8 <MX_GPIO_Init+0x288>)
 800b1d2:	f7f5 fb01 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800b1d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800b1e8:	f107 031c 	add.w	r3, r7, #28
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	4835      	ldr	r0, [pc, #212]	; (800b2c4 <MX_GPIO_Init+0x284>)
 800b1f0:	f7f5 faf2 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800b1f4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b1f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b202:	2300      	movs	r3, #0
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b206:	f107 031c 	add.w	r3, r7, #28
 800b20a:	4619      	mov	r1, r3
 800b20c:	482f      	ldr	r0, [pc, #188]	; (800b2cc <MX_GPIO_Init+0x28c>)
 800b20e:	f7f5 fae3 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 800b212:	2304      	movs	r3, #4
 800b214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b216:	4b2f      	ldr	r3, [pc, #188]	; (800b2d4 <MX_GPIO_Init+0x294>)
 800b218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 800b21e:	f107 031c 	add.w	r3, r7, #28
 800b222:	4619      	mov	r1, r3
 800b224:	482a      	ldr	r0, [pc, #168]	; (800b2d0 <MX_GPIO_Init+0x290>)
 800b226:	f7f5 fad7 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800b22a:	2380      	movs	r3, #128	; 0x80
 800b22c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b22e:	2301      	movs	r3, #1
 800b230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b232:	2300      	movs	r3, #0
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b236:	2303      	movs	r3, #3
 800b238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800b23a:	f107 031c 	add.w	r3, r7, #28
 800b23e:	4619      	mov	r1, r3
 800b240:	4823      	ldr	r0, [pc, #140]	; (800b2d0 <MX_GPIO_Init+0x290>)
 800b242:	f7f5 fac9 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800b246:	2308      	movs	r3, #8
 800b248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b24a:	2301      	movs	r3, #1
 800b24c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b252:	2300      	movs	r3, #0
 800b254:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800b256:	f107 031c 	add.w	r3, r7, #28
 800b25a:	4619      	mov	r1, r3
 800b25c:	481a      	ldr	r0, [pc, #104]	; (800b2c8 <MX_GPIO_Init+0x288>)
 800b25e:	f7f5 fabb 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800b262:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <MX_GPIO_Init+0x294>)
 800b26a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800b270:	f107 031c 	add.w	r3, r7, #28
 800b274:	4619      	mov	r1, r3
 800b276:	4814      	ldr	r0, [pc, #80]	; (800b2c8 <MX_GPIO_Init+0x288>)
 800b278:	f7f5 faae 	bl	80007d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800b27c:	2301      	movs	r3, #1
 800b27e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b280:	2301      	movs	r3, #1
 800b282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b284:	2300      	movs	r3, #0
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b288:	2300      	movs	r3, #0
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800b28c:	f107 031c 	add.w	r3, r7, #28
 800b290:	4619      	mov	r1, r3
 800b292:	480c      	ldr	r0, [pc, #48]	; (800b2c4 <MX_GPIO_Init+0x284>)
 800b294:	f7f5 faa0 	bl	80007d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800b298:	2200      	movs	r2, #0
 800b29a:	2105      	movs	r1, #5
 800b29c:	2006      	movs	r0, #6
 800b29e:	f7f5 fa2f 	bl	8000700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b2a2:	2006      	movs	r0, #6
 800b2a4:	f7f5 fa48 	bl	8000738 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2105      	movs	r1, #5
 800b2ac:	2007      	movs	r0, #7
 800b2ae:	f7f5 fa27 	bl	8000700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800b2b2:	2007      	movs	r0, #7
 800b2b4:	f7f5 fa40 	bl	8000738 <HAL_NVIC_EnableIRQ>

}
 800b2b8:	bf00      	nop
 800b2ba:	3730      	adds	r7, #48	; 0x30
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	40021000 	.word	0x40021000
 800b2c4:	48001000 	.word	0x48001000
 800b2c8:	48000400 	.word	0x48000400
 800b2cc:	48000800 	.word	0x48000800
 800b2d0:	48000c00 	.word	0x48000c00
 800b2d4:	10120000 	.word	0x10120000
 800b2d8:	10110000 	.word	0x10110000

0800b2dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <MX_I2C1_Init+0x74>)
 800b2e2:	4a1c      	ldr	r2, [pc, #112]	; (800b354 <MX_I2C1_Init+0x78>)
 800b2e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800b2e6:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <MX_I2C1_Init+0x74>)
 800b2e8:	4a1b      	ldr	r2, [pc, #108]	; (800b358 <MX_I2C1_Init+0x7c>)
 800b2ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b2ec:	4b18      	ldr	r3, [pc, #96]	; (800b350 <MX_I2C1_Init+0x74>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b2f2:	4b17      	ldr	r3, [pc, #92]	; (800b350 <MX_I2C1_Init+0x74>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <MX_I2C1_Init+0x74>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b2fe:	4b14      	ldr	r3, [pc, #80]	; (800b350 <MX_I2C1_Init+0x74>)
 800b300:	2200      	movs	r2, #0
 800b302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b304:	4b12      	ldr	r3, [pc, #72]	; (800b350 <MX_I2C1_Init+0x74>)
 800b306:	2200      	movs	r2, #0
 800b308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <MX_I2C1_Init+0x74>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b310:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <MX_I2C1_Init+0x74>)
 800b312:	2200      	movs	r2, #0
 800b314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b316:	480e      	ldr	r0, [pc, #56]	; (800b350 <MX_I2C1_Init+0x74>)
 800b318:	f7f7 f856 	bl	80023c8 <HAL_I2C_Init>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b322:	f000 fa6d 	bl	800b800 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b326:	2100      	movs	r1, #0
 800b328:	4809      	ldr	r0, [pc, #36]	; (800b350 <MX_I2C1_Init+0x74>)
 800b32a:	f7f7 f8dc 	bl	80024e6 <HAL_I2CEx_ConfigAnalogFilter>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b334:	f000 fa64 	bl	800b800 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b338:	2100      	movs	r1, #0
 800b33a:	4805      	ldr	r0, [pc, #20]	; (800b350 <MX_I2C1_Init+0x74>)
 800b33c:	f7f7 f91e 	bl	800257c <HAL_I2CEx_ConfigDigitalFilter>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b346:	f000 fa5b 	bl	800b800 <Error_Handler>
  }

}
 800b34a:	bf00      	nop
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000df4 	.word	0x20000df4
 800b354:	40005400 	.word	0x40005400
 800b358:	00909beb 	.word	0x00909beb

0800b35c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b360:	4b1b      	ldr	r3, [pc, #108]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b362:	4a1c      	ldr	r2, [pc, #112]	; (800b3d4 <MX_I2C2_Init+0x78>)
 800b364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 800b366:	4b1a      	ldr	r3, [pc, #104]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b368:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <MX_I2C2_Init+0x7c>)
 800b36a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b36c:	4b18      	ldr	r3, [pc, #96]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b36e:	2200      	movs	r2, #0
 800b370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b372:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b374:	2201      	movs	r2, #1
 800b376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b378:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b37e:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b380:	2200      	movs	r2, #0
 800b382:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b384:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b386:	2200      	movs	r2, #0
 800b388:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b38a:	4b11      	ldr	r3, [pc, #68]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b392:	2200      	movs	r2, #0
 800b394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b396:	480e      	ldr	r0, [pc, #56]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b398:	f7f7 f816 	bl	80023c8 <HAL_I2C_Init>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b3a2:	f000 fa2d 	bl	800b800 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4809      	ldr	r0, [pc, #36]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b3aa:	f7f7 f89c 	bl	80024e6 <HAL_I2CEx_ConfigAnalogFilter>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b3b4:	f000 fa24 	bl	800b800 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <MX_I2C2_Init+0x74>)
 800b3bc:	f7f7 f8de 	bl	800257c <HAL_I2CEx_ConfigDigitalFilter>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b3c6:	f000 fa1b 	bl	800b800 <Error_Handler>
  }

}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000e40 	.word	0x20000e40
 800b3d4:	40005800 	.word	0x40005800
 800b3d8:	00909beb 	.word	0x00909beb

0800b3dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08c      	sub	sp, #48	; 0x30
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e4:	f107 031c 	add.w	r3, r7, #28
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	605a      	str	r2, [r3, #4]
 800b3ee:	609a      	str	r2, [r3, #8]
 800b3f0:	60da      	str	r2, [r3, #12]
 800b3f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a2e      	ldr	r2, [pc, #184]	; (800b4b4 <HAL_I2C_MspInit+0xd8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d128      	bne.n	800b450 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3fe:	4b2e      	ldr	r3, [pc, #184]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b402:	4a2d      	ldr	r2, [pc, #180]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b404:	f043 0302 	orr.w	r3, r3, #2
 800b408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b40a:	4b2b      	ldr	r3, [pc, #172]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	61bb      	str	r3, [r7, #24]
 800b414:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800b416:	23c0      	movs	r3, #192	; 0xc0
 800b418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b41a:	2312      	movs	r3, #18
 800b41c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b41e:	2301      	movs	r3, #1
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b422:	2303      	movs	r3, #3
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b426:	2304      	movs	r3, #4
 800b428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b42a:	f107 031c 	add.w	r3, r7, #28
 800b42e:	4619      	mov	r1, r3
 800b430:	4822      	ldr	r0, [pc, #136]	; (800b4bc <HAL_I2C_MspInit+0xe0>)
 800b432:	f7f5 f9d1 	bl	80007d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b436:	4b20      	ldr	r3, [pc, #128]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43a:	4a1f      	ldr	r2, [pc, #124]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b43c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b440:	6593      	str	r3, [r2, #88]	; 0x58
 800b442:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b44e:	e02d      	b.n	800b4ac <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a1a      	ldr	r2, [pc, #104]	; (800b4c0 <HAL_I2C_MspInit+0xe4>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d128      	bne.n	800b4ac <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b45a:	4b17      	ldr	r3, [pc, #92]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45e:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b460:	f043 0302 	orr.w	r3, r3, #2
 800b464:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b466:	4b14      	ldr	r3, [pc, #80]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800b472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b478:	2312      	movs	r3, #18
 800b47a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b47c:	2301      	movs	r3, #1
 800b47e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b480:	2303      	movs	r3, #3
 800b482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b484:	2304      	movs	r3, #4
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b488:	f107 031c 	add.w	r3, r7, #28
 800b48c:	4619      	mov	r1, r3
 800b48e:	480b      	ldr	r0, [pc, #44]	; (800b4bc <HAL_I2C_MspInit+0xe0>)
 800b490:	f7f5 f9a2 	bl	80007d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b494:	4b08      	ldr	r3, [pc, #32]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b498:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b49a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b49e:	6593      	str	r3, [r2, #88]	; 0x58
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <HAL_I2C_MspInit+0xdc>)
 800b4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
}
 800b4ac:	bf00      	nop
 800b4ae:	3730      	adds	r7, #48	; 0x30
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40005400 	.word	0x40005400
 800b4b8:	40021000 	.word	0x40021000
 800b4bc:	48000400 	.word	0x48000400
 800b4c0:	40005800 	.word	0x40005800

0800b4c4 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 800b4c8:	4b18      	ldr	r3, [pc, #96]	; (800b52c <MX_LCD_Init+0x68>)
 800b4ca:	4a19      	ldr	r2, [pc, #100]	; (800b530 <MX_LCD_Init+0x6c>)
 800b4cc:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800b4ce:	4b17      	ldr	r3, [pc, #92]	; (800b52c <MX_LCD_Init+0x68>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800b4d4:	4b15      	ldr	r3, [pc, #84]	; (800b52c <MX_LCD_Init+0x68>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800b4da:	4b14      	ldr	r3, [pc, #80]	; (800b52c <MX_LCD_Init+0x68>)
 800b4dc:	220c      	movs	r2, #12
 800b4de:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800b4e0:	4b12      	ldr	r3, [pc, #72]	; (800b52c <MX_LCD_Init+0x68>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800b4e6:	4b11      	ldr	r3, [pc, #68]	; (800b52c <MX_LCD_Init+0x68>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <MX_LCD_Init+0x68>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <MX_LCD_Init+0x68>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800b4f8:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <MX_LCD_Init+0x68>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800b4fe:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <MX_LCD_Init+0x68>)
 800b500:	2200      	movs	r2, #0
 800b502:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800b504:	4b09      	ldr	r3, [pc, #36]	; (800b52c <MX_LCD_Init+0x68>)
 800b506:	2200      	movs	r2, #0
 800b508:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800b50a:	4b08      	ldr	r3, [pc, #32]	; (800b52c <MX_LCD_Init+0x68>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <MX_LCD_Init+0x68>)
 800b512:	2200      	movs	r2, #0
 800b514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800b516:	4805      	ldr	r0, [pc, #20]	; (800b52c <MX_LCD_Init+0x68>)
 800b518:	f7f7 f87c 	bl	8002614 <HAL_LCD_Init>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800b522:	f000 f96d 	bl	800b800 <Error_Handler>
  }

}
 800b526:	bf00      	nop
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000e8c 	.word	0x20000e8c
 800b530:	40002400 	.word	0x40002400

0800b534 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08c      	sub	sp, #48	; 0x30
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b53c:	f107 031c 	add.w	r3, r7, #28
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	605a      	str	r2, [r3, #4]
 800b546:	609a      	str	r2, [r3, #8]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a44      	ldr	r2, [pc, #272]	; (800b664 <HAL_LCD_MspInit+0x130>)
 800b552:	4293      	cmp	r3, r2
 800b554:	f040 8081 	bne.w	800b65a <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800b558:	4b43      	ldr	r3, [pc, #268]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55c:	4a42      	ldr	r2, [pc, #264]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b55e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b562:	6593      	str	r3, [r2, #88]	; 0x58
 800b564:	4b40      	ldr	r3, [pc, #256]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b56c:	61bb      	str	r3, [r7, #24]
 800b56e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b570:	4b3d      	ldr	r3, [pc, #244]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b574:	4a3c      	ldr	r2, [pc, #240]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b576:	f043 0304 	orr.w	r3, r3, #4
 800b57a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b57c:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b588:	4b37      	ldr	r3, [pc, #220]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58c:	4a36      	ldr	r2, [pc, #216]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b594:	4b34      	ldr	r3, [pc, #208]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5a0:	4b31      	ldr	r3, [pc, #196]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a4:	4a30      	ldr	r2, [pc, #192]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5a6:	f043 0302 	orr.w	r3, r3, #2
 800b5aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5ac:	4b2e      	ldr	r3, [pc, #184]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5b8:	4b2b      	ldr	r3, [pc, #172]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5bc:	4a2a      	ldr	r2, [pc, #168]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5be:	f043 0308 	orr.w	r3, r3, #8
 800b5c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5c4:	4b28      	ldr	r3, [pc, #160]	; (800b668 <HAL_LCD_MspInit+0x134>)
 800b5c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c8:	f003 0308 	and.w	r3, r3, #8
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 800b5d0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800b5d4:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b5e2:	230b      	movs	r3, #11
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5e6:	f107 031c 	add.w	r3, r7, #28
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	481f      	ldr	r0, [pc, #124]	; (800b66c <HAL_LCD_MspInit+0x138>)
 800b5ee:	f7f5 f8f3 	bl	80007d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800b5f2:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800b5f6:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b600:	2300      	movs	r3, #0
 800b602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b604:	230b      	movs	r3, #11
 800b606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b608:	f107 031c 	add.w	r3, r7, #28
 800b60c:	4619      	mov	r1, r3
 800b60e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b612:	f7f5 f8e1 	bl	80007d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 800b616:	f24f 2333 	movw	r3, #62003	; 0xf233
 800b61a:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b61c:	2302      	movs	r3, #2
 800b61e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b620:	2300      	movs	r3, #0
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b624:	2300      	movs	r3, #0
 800b626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b628:	230b      	movs	r3, #11
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b62c:	f107 031c 	add.w	r3, r7, #28
 800b630:	4619      	mov	r1, r3
 800b632:	480f      	ldr	r0, [pc, #60]	; (800b670 <HAL_LCD_MspInit+0x13c>)
 800b634:	f7f5 f8d0 	bl	80007d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 800b638:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b63c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b63e:	2302      	movs	r3, #2
 800b640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b642:	2300      	movs	r3, #0
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b646:	2300      	movs	r3, #0
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800b64a:	230b      	movs	r3, #11
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b64e:	f107 031c 	add.w	r3, r7, #28
 800b652:	4619      	mov	r1, r3
 800b654:	4807      	ldr	r0, [pc, #28]	; (800b674 <HAL_LCD_MspInit+0x140>)
 800b656:	f7f5 f8bf 	bl	80007d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 800b65a:	bf00      	nop
 800b65c:	3730      	adds	r7, #48	; 0x30
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	40002400 	.word	0x40002400
 800b668:	40021000 	.word	0x40021000
 800b66c:	48000800 	.word	0x48000800
 800b670:	48000400 	.word	0x48000400
 800b674:	48000c00 	.word	0x48000c00

0800b678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b67c:	f7f4 ff28 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b680:	f000 f816 	bl	800b6b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b684:	f7ff fcdc 	bl	800b040 <MX_GPIO_Init>
  MX_I2C1_Init();
 800b688:	f7ff fe28 	bl	800b2dc <MX_I2C1_Init>
  MX_I2C2_Init();
 800b68c:	f7ff fe66 	bl	800b35c <MX_I2C2_Init>
  MX_LCD_Init();
 800b690:	f7ff ff18 	bl	800b4c4 <MX_LCD_Init>
  MX_QUADSPI_Init();
 800b694:	f000 f8bc 	bl	800b810 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800b698:	f000 fa54 	bl	800bb44 <MX_SAI1_Init>
  MX_SPI2_Init();
 800b69c:	f000 fb72 	bl	800bd84 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800b6a0:	f000 fd42 	bl	800c128 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800b6a4:	f7ff fc9a 	bl	800afdc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b6a8:	f7fd fba6 	bl	8008df8 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800b6ac:	e7fe      	b.n	800b6ac <main+0x34>
	...

0800b6b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b0b8      	sub	sp, #224	; 0xe0
 800b6b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b6b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b6ba:	2244      	movs	r2, #68	; 0x44
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 f921 	bl	800c906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b6c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	605a      	str	r2, [r3, #4]
 800b6ce:	609a      	str	r2, [r3, #8]
 800b6d0:	60da      	str	r2, [r3, #12]
 800b6d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	2288      	movs	r2, #136	; 0x88
 800b6d8:	2100      	movs	r1, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f913 	bl	800c906 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b6e0:	2309      	movs	r3, #9
 800b6e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b6e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b700:	2301      	movs	r3, #1
 800b702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800b706:	2314      	movs	r3, #20
 800b708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800b70c:	2307      	movs	r3, #7
 800b70e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b712:	2302      	movs	r3, #2
 800b714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b718:	2302      	movs	r3, #2
 800b71a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b71e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b722:	4618      	mov	r0, r3
 800b724:	f7f7 f994 	bl	8002a50 <HAL_RCC_OscConfig>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800b72e:	f000 f867 	bl	800b800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b732:	230f      	movs	r3, #15
 800b734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b738:	2303      	movs	r3, #3
 800b73a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800b73e:	2380      	movs	r3, #128	; 0x80
 800b740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b744:	2300      	movs	r3, #0
 800b746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b754:	2102      	movs	r1, #2
 800b756:	4618      	mov	r0, r3
 800b758:	f7f7 fd2a 	bl	80031b0 <HAL_RCC_ClockConfig>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800b762:	f000 f84d 	bl	800b800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800b766:	4b1c      	ldr	r3, [pc, #112]	; (800b7d8 <SystemClock_Config+0x128>)
 800b768:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b76e:	2300      	movs	r3, #0
 800b770:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b772:	2300      	movs	r3, #0
 800b774:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800b776:	2300      	movs	r3, #0
 800b778:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b77a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b77e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b786:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800b788:	2303      	movs	r3, #3
 800b78a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b790:	2318      	movs	r3, #24
 800b792:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b794:	2307      	movs	r3, #7
 800b796:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800b798:	2304      	movs	r3, #4
 800b79a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b79c:	2302      	movs	r3, #2
 800b79e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 800b7a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b7a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b7a6:	463b      	mov	r3, r7
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f7 ff47 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800b7b4:	f000 f824 	bl	800b800 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800b7b8:	f7f7 fed0 	bl	800355c <HAL_RCC_EnableCSS>
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b7bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b7c0:	f7f7 f818 	bl	80027f4 <HAL_PWREx_ControlVoltageScaling>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800b7ca:	f000 f819 	bl	800b800 <Error_Handler>
  }
}
 800b7ce:	bf00      	nop
 800b7d0:	37e0      	adds	r7, #224	; 0xe0
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	000228c2 	.word	0x000228c2

0800b7dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a04      	ldr	r2, [pc, #16]	; (800b7fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d101      	bne.n	800b7f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b7ee:	f7f4 fe8f 	bl	8000510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	40012c00 	.word	0x40012c00

0800b800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b800:	b480      	push	{r7}
 800b802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b804:	bf00      	nop
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 800b814:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b816:	4a10      	ldr	r2, [pc, #64]	; (800b858 <MX_QUADSPI_Init+0x48>)
 800b818:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800b81a:	4b0e      	ldr	r3, [pc, #56]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b81c:	22ff      	movs	r2, #255	; 0xff
 800b81e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b822:	2201      	movs	r2, #1
 800b824:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b828:	2200      	movs	r2, #0
 800b82a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800b82c:	4b09      	ldr	r3, [pc, #36]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b82e:	2201      	movs	r2, #1
 800b830:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800b832:	4b08      	ldr	r3, [pc, #32]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b834:	2200      	movs	r2, #0
 800b836:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b838:	4b06      	ldr	r3, [pc, #24]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b83e:	4805      	ldr	r0, [pc, #20]	; (800b854 <MX_QUADSPI_Init+0x44>)
 800b840:	f7f7 f83e 	bl	80028c0 <HAL_QSPI_Init>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800b84a:	f7ff ffd9 	bl	800b800 <Error_Handler>
  }

}
 800b84e:	bf00      	nop
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000ec8 	.word	0x20000ec8
 800b858:	a0001000 	.word	0xa0001000

0800b85c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	609a      	str	r2, [r3, #8]
 800b870:	60da      	str	r2, [r3, #12]
 800b872:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a17      	ldr	r2, [pc, #92]	; (800b8d8 <HAL_QSPI_MspInit+0x7c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d128      	bne.n	800b8d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800b87e:	4b17      	ldr	r3, [pc, #92]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b882:	4a16      	ldr	r2, [pc, #88]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b888:	6513      	str	r3, [r2, #80]	; 0x50
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b892:	613b      	str	r3, [r7, #16]
 800b894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89a:	4a10      	ldr	r2, [pc, #64]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b89c:	f043 0310 	orr.w	r3, r3, #16
 800b8a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <HAL_QSPI_MspInit+0x80>)
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a6:	f003 0310 	and.w	r3, r3, #16
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800b8ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800b8b2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800b8c0:	230a      	movs	r3, #10
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <HAL_QSPI_MspInit+0x84>)
 800b8cc:	f7f4 ff84 	bl	80007d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800b8d0:	bf00      	nop
 800b8d2:	3728      	adds	r7, #40	; 0x28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	a0001000 	.word	0xa0001000
 800b8dc:	40021000 	.word	0x40021000
 800b8e0:	48001000 	.word	0x48001000

0800b8e4 <crc16>:
#include "roboclaw.h"

unsigned int crc16 (unsigned char *packet, int nBytes) {
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	82fb      	strh	r3, [r7, #22]
	for (int byte = 0; byte < nBytes; byte++) {
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]
 800b8f6:	e026      	b.n	800b946 <crc16+0x62>
		crc = crc ^ ((unsigned int)packet[byte] << 8);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	b29b      	uxth	r3, r3
 800b902:	021b      	lsls	r3, r3, #8
 800b904:	b29a      	uxth	r2, r3
 800b906:	8afb      	ldrh	r3, [r7, #22]
 800b908:	4053      	eors	r3, r2
 800b90a:	82fb      	strh	r3, [r7, #22]
		for (unsigned char bit = 0; bit < 8; bit++) {
 800b90c:	2300      	movs	r3, #0
 800b90e:	73fb      	strb	r3, [r7, #15]
 800b910:	e013      	b.n	800b93a <crc16+0x56>
			if (crc & 0x8000) {
 800b912:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b916:	2b00      	cmp	r3, #0
 800b918:	da09      	bge.n	800b92e <crc16+0x4a>
					crc = (crc << 1) ^ 0x1021;
 800b91a:	8afb      	ldrh	r3, [r7, #22]
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	b21b      	sxth	r3, r3
 800b920:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800b924:	f083 0301 	eor.w	r3, r3, #1
 800b928:	b21b      	sxth	r3, r3
 800b92a:	82fb      	strh	r3, [r7, #22]
 800b92c:	e002      	b.n	800b934 <crc16+0x50>
			} else {
				crc = crc << 1;
 800b92e:	8afb      	ldrh	r3, [r7, #22]
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	82fb      	strh	r3, [r7, #22]
		for (unsigned char bit = 0; bit < 8; bit++) {
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	3301      	adds	r3, #1
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	2b07      	cmp	r3, #7
 800b93e:	d9e8      	bls.n	800b912 <crc16+0x2e>
	for (int byte = 0; byte < nBytes; byte++) {
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	3301      	adds	r3, #1
 800b944:	613b      	str	r3, [r7, #16]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	dbd4      	blt.n	800b8f8 <crc16+0x14>
			}
		}
	}
	return crc;
 800b94e:	8afb      	ldrh	r3, [r7, #22]
}
 800b950:	4618      	mov	r0, r3
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <in_range>:
unsigned char in_range(unsigned char x, unsigned char a, unsigned char b) {
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	71fb      	strb	r3, [r7, #7]
 800b966:	460b      	mov	r3, r1
 800b968:	71bb      	strb	r3, [r7, #6]
 800b96a:	4613      	mov	r3, r2
 800b96c:	717b      	strb	r3, [r7, #5]
	if (x < a) return a;
 800b96e:	79fa      	ldrb	r2, [r7, #7]
 800b970:	79bb      	ldrb	r3, [r7, #6]
 800b972:	429a      	cmp	r2, r3
 800b974:	d201      	bcs.n	800b97a <in_range+0x1e>
 800b976:	79bb      	ldrb	r3, [r7, #6]
 800b978:	e006      	b.n	800b988 <in_range+0x2c>
	if (x > b) return b;
 800b97a:	79fa      	ldrb	r2, [r7, #7]
 800b97c:	797b      	ldrb	r3, [r7, #5]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d901      	bls.n	800b986 <in_range+0x2a>
 800b982:	797b      	ldrb	r3, [r7, #5]
 800b984:	e000      	b.n	800b988 <in_range+0x2c>
	return x;
 800b986:	79fb      	ldrb	r3, [r7, #7]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <motorForward>:

HAL_StatusTypeDef motorForward(unsigned char roboclaw, unsigned char motor, unsigned char speed) {
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	71fb      	strb	r3, [r7, #7]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	71bb      	strb	r3, [r7, #6]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	717b      	strb	r3, [r7, #5]
	unsigned char buffer[5];
	buffer[0] = roboclaw;
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	723b      	strb	r3, [r7, #8]
	if(motor == 0) buffer[1] = 0;
 800b9aa:	79bb      	ldrb	r3, [r7, #6]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <motorForward+0x22>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	727b      	strb	r3, [r7, #9]
 800b9b4:	e004      	b.n	800b9c0 <motorForward+0x2c>
	else if(motor == 1) buffer[1] = 4;
 800b9b6:	79bb      	ldrb	r3, [r7, #6]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <motorForward+0x2c>
 800b9bc:	2304      	movs	r3, #4
 800b9be:	727b      	strb	r3, [r7, #9]
	buffer[2] = in_range(speed, 0, 127);
 800b9c0:	797b      	ldrb	r3, [r7, #5]
 800b9c2:	227f      	movs	r2, #127	; 0x7f
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7ff ffc8 	bl	800b95c <in_range>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	72bb      	strb	r3, [r7, #10]
	unsigned short crc = crc16(buffer, 3);
 800b9d0:	f107 0308 	add.w	r3, r7, #8
 800b9d4:	2103      	movs	r1, #3
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff ff84 	bl	800b8e4 <crc16>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	81fb      	strh	r3, [r7, #14]
	buffer[3] = crc>>8;
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
 800b9e2:	0a1b      	lsrs	r3, r3, #8
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	72fb      	strb	r3, [r7, #11]
	buffer[4] = crc;
 800b9ea:	89fb      	ldrh	r3, [r7, #14]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit(&huart2, buffer, 5, 100);
 800b9f0:	f107 0108 	add.w	r1, r7, #8
 800b9f4:	2364      	movs	r3, #100	; 0x64
 800b9f6:	2205      	movs	r2, #5
 800b9f8:	4803      	ldr	r0, [pc, #12]	; (800ba08 <motorForward+0x74>)
 800b9fa:	f7f9 fcf1 	bl	80053e0 <HAL_UART_Transmit>
 800b9fe:	4603      	mov	r3, r0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	200010b8 	.word	0x200010b8

0800ba0c <motorBackward>:

HAL_StatusTypeDef motorBackward	(unsigned char roboclaw, unsigned char motor, unsigned char speed) {
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	71fb      	strb	r3, [r7, #7]
 800ba16:	460b      	mov	r3, r1
 800ba18:	71bb      	strb	r3, [r7, #6]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	717b      	strb	r3, [r7, #5]
	unsigned char buffer[5];
	buffer[0] = roboclaw;
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	723b      	strb	r3, [r7, #8]
	if(motor == 0) buffer[1] = 1;
 800ba22:	79bb      	ldrb	r3, [r7, #6]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <motorBackward+0x22>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	727b      	strb	r3, [r7, #9]
 800ba2c:	e004      	b.n	800ba38 <motorBackward+0x2c>
	else if(motor == 1) buffer[1] = 5;
 800ba2e:	79bb      	ldrb	r3, [r7, #6]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <motorBackward+0x2c>
 800ba34:	2305      	movs	r3, #5
 800ba36:	727b      	strb	r3, [r7, #9]
	buffer[2] = in_range(speed, 0, 127);
 800ba38:	797b      	ldrb	r3, [r7, #5]
 800ba3a:	227f      	movs	r2, #127	; 0x7f
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff ff8c 	bl	800b95c <in_range>
 800ba44:	4603      	mov	r3, r0
 800ba46:	72bb      	strb	r3, [r7, #10]
	unsigned short crc = crc16(buffer, 3);
 800ba48:	f107 0308 	add.w	r3, r7, #8
 800ba4c:	2103      	movs	r1, #3
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff ff48 	bl	800b8e4 <crc16>
 800ba54:	4603      	mov	r3, r0
 800ba56:	81fb      	strh	r3, [r7, #14]
	buffer[3] = crc>>8;
 800ba58:	89fb      	ldrh	r3, [r7, #14]
 800ba5a:	0a1b      	lsrs	r3, r3, #8
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	72fb      	strb	r3, [r7, #11]
	buffer[4] = crc;
 800ba62:	89fb      	ldrh	r3, [r7, #14]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit(&huart2, buffer, 5, 100);
 800ba68:	f107 0108 	add.w	r1, r7, #8
 800ba6c:	2364      	movs	r3, #100	; 0x64
 800ba6e:	2205      	movs	r2, #5
 800ba70:	4803      	ldr	r0, [pc, #12]	; (800ba80 <motorBackward+0x74>)
 800ba72:	f7f9 fcb5 	bl	80053e0 <HAL_UART_Transmit>
 800ba76:	4603      	mov	r3, r0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	200010b8 	.word	0x200010b8

0800ba84 <motorMove>:

HAL_StatusTypeDef motorMove	(unsigned char roboclaw, unsigned char motor, signed char speed) {
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	71fb      	strb	r3, [r7, #7]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	71bb      	strb	r3, [r7, #6]
 800ba92:	4613      	mov	r3, r2
 800ba94:	717b      	strb	r3, [r7, #5]
	if(speed >= 0) {
 800ba96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	db0e      	blt.n	800babc <motorMove+0x38>
		return motorForward(roboclaw, motor, in_range(speed, 0, 127));
 800ba9e:	797b      	ldrb	r3, [r7, #5]
 800baa0:	227f      	movs	r2, #127	; 0x7f
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff ff59 	bl	800b95c <in_range>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	79b9      	ldrb	r1, [r7, #6]
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff ff6e 	bl	800b994 <motorForward>
 800bab8:	4603      	mov	r3, r0
 800baba:	e00f      	b.n	800badc <motorMove+0x58>
	}
	else {
		return motorBackward(roboclaw, motor, in_range(-(signed char)speed, 0, 127));
 800babc:	797b      	ldrb	r3, [r7, #5]
 800babe:	425b      	negs	r3, r3
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	227f      	movs	r2, #127	; 0x7f
 800bac4:	2100      	movs	r1, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff ff48 	bl	800b95c <in_range>
 800bacc:	4603      	mov	r3, r0
 800bace:	461a      	mov	r2, r3
 800bad0:	79b9      	ldrb	r1, [r7, #6]
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff ff99 	bl	800ba0c <motorBackward>
 800bada:	4603      	mov	r3, r0
	}
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <allMotorsMove>:

HAL_StatusTypeDef allMotorsMove (signed char* speeds) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result;
	for (int i = 0, roboclaw = 0; roboclaw < 6; roboclaw++) {
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	e01d      	b.n	800bb32 <allMotorsMove+0x4e>
		for (char motor = 0; motor < 2; motor++, i++) {
 800baf6:	2300      	movs	r3, #0
 800baf8:	72fb      	strb	r3, [r7, #11]
 800bafa:	e014      	b.n	800bb26 <allMotorsMove+0x42>
			result = motorMove(roboclaw0 + roboclaw, motor, speeds[i]);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	3b80      	subs	r3, #128	; 0x80
 800bb02:	b2d8      	uxtb	r0, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f993 2000 	ldrsb.w	r2, [r3]
 800bb0e:	7afb      	ldrb	r3, [r7, #11]
 800bb10:	4619      	mov	r1, r3
 800bb12:	f7ff ffb7 	bl	800ba84 <motorMove>
 800bb16:	4603      	mov	r3, r0
 800bb18:	75fb      	strb	r3, [r7, #23]
		for (char motor = 0; motor < 2; motor++, i++) {
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	72fb      	strb	r3, [r7, #11]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	3301      	adds	r3, #1
 800bb24:	613b      	str	r3, [r7, #16]
 800bb26:	7afb      	ldrb	r3, [r7, #11]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d9e7      	bls.n	800bafc <allMotorsMove+0x18>
	for (int i = 0, roboclaw = 0; roboclaw < 6; roboclaw++) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2b05      	cmp	r3, #5
 800bb36:	ddde      	ble.n	800baf6 <allMotorsMove+0x12>
		}
	}
	return result;
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 800bb48:	4b4d      	ldr	r3, [pc, #308]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb4a:	4a4e      	ldr	r2, [pc, #312]	; (800bc84 <MX_SAI1_Init+0x140>)
 800bb4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bb4e:	4b4c      	ldr	r3, [pc, #304]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800bb54:	4b4a      	ldr	r3, [pc, #296]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800bb5a:	4b49      	ldr	r3, [pc, #292]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb5c:	2240      	movs	r2, #64	; 0x40
 800bb5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bb60:	4b47      	ldr	r3, [pc, #284]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bb66:	4b46      	ldr	r3, [pc, #280]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bb6c:	4b44      	ldr	r3, [pc, #272]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bb72:	4b43      	ldr	r3, [pc, #268]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bb78:	4b41      	ldr	r3, [pc, #260]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bb7e:	4b40      	ldr	r3, [pc, #256]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800bb84:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb86:	4a40      	ldr	r2, [pc, #256]	; (800bc88 <MX_SAI1_Init+0x144>)
 800bb88:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bb8a:	4b3d      	ldr	r3, [pc, #244]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bb90:	4b3b      	ldr	r3, [pc, #236]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bb96:	4b3a      	ldr	r3, [pc, #232]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bb9c:	4b38      	ldr	r3, [pc, #224]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800bba2:	4b37      	ldr	r3, [pc, #220]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bba4:	2208      	movs	r2, #8
 800bba6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800bba8:	4b35      	ldr	r3, [pc, #212]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbaa:	2201      	movs	r2, #1
 800bbac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bbae:	4b34      	ldr	r3, [pc, #208]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bbba:	4b31      	ldr	r3, [pc, #196]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800bbc0:	4b2f      	ldr	r3, [pc, #188]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800bbcc:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800bbd2:	4b2b      	ldr	r3, [pc, #172]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800bbd8:	4829      	ldr	r0, [pc, #164]	; (800bc80 <MX_SAI1_Init+0x13c>)
 800bbda:	f7f8 ff2f 	bl	8004a3c <HAL_SAI_Init>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800bbe4:	f7ff fe0c 	bl	800b800 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800bbe8:	4b28      	ldr	r3, [pc, #160]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bbea:	4a29      	ldr	r2, [pc, #164]	; (800bc90 <MX_SAI1_Init+0x14c>)
 800bbec:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bbee:	4b27      	ldr	r3, [pc, #156]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800bbf4:	4b25      	ldr	r3, [pc, #148]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bbfc:	2240      	movs	r2, #64	; 0x40
 800bbfe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bc00:	4b22      	ldr	r3, [pc, #136]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bc06:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800bc0c:	4b1f      	ldr	r3, [pc, #124]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bc12:	4b1e      	ldr	r3, [pc, #120]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bc18:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bc1e:	4b1b      	ldr	r3, [pc, #108]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bc24:	4b19      	ldr	r3, [pc, #100]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bc2a:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bc30:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 800bc36:	4b15      	ldr	r3, [pc, #84]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc38:	2218      	movs	r2, #24
 800bc3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800bc3c:	4b13      	ldr	r3, [pc, #76]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc3e:	2201      	movs	r2, #1
 800bc40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bc48:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800bc54:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bc5a:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc62:	2201      	movs	r2, #1
 800bc64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800bc66:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800bc6c:	4807      	ldr	r0, [pc, #28]	; (800bc8c <MX_SAI1_Init+0x148>)
 800bc6e:	f7f8 fee5 	bl	8004a3c <HAL_SAI_Init>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800bc78:	f7ff fdc2 	bl	800b800 <Error_Handler>
  }

}
 800bc7c:	bf00      	nop
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20000f90 	.word	0x20000f90
 800bc84:	40015404 	.word	0x40015404
 800bc88:	0002ee00 	.word	0x0002ee00
 800bc8c:	20000f0c 	.word	0x20000f0c
 800bc90:	40015424 	.word	0x40015424

0800bc94 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	; 0x28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a33      	ldr	r2, [pc, #204]	; (800bd70 <HAL_SAI_MspInit+0xdc>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d135      	bne.n	800bd12 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800bca6:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10b      	bne.n	800bcc6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800bcae:	4b32      	ldr	r3, [pc, #200]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bcb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb2:	4a31      	ldr	r2, [pc, #196]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bcb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcb8:	6613      	str	r3, [r2, #96]	; 0x60
 800bcba:	4b2f      	ldr	r3, [pc, #188]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bcbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800bcc6:	4b2b      	ldr	r3, [pc, #172]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3301      	adds	r3, #1
 800bccc:	4a29      	ldr	r2, [pc, #164]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bcce:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800bcd0:	2374      	movs	r3, #116	; 0x74
 800bcd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800bce0:	230d      	movs	r3, #13
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bce4:	f107 0314 	add.w	r3, r7, #20
 800bce8:	4619      	mov	r1, r3
 800bcea:	4824      	ldr	r0, [pc, #144]	; (800bd7c <HAL_SAI_MspInit+0xe8>)
 800bcec:	f7f4 fd74 	bl	80007d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800bcf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800bd02:	230d      	movs	r3, #13
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800bd06:	f107 0314 	add.w	r3, r7, #20
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	481b      	ldr	r0, [pc, #108]	; (800bd7c <HAL_SAI_MspInit+0xe8>)
 800bd0e:	f7f4 fd63 	bl	80007d8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a1a      	ldr	r2, [pc, #104]	; (800bd80 <HAL_SAI_MspInit+0xec>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d124      	bne.n	800bd66 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800bd1c:	4b15      	ldr	r3, [pc, #84]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10b      	bne.n	800bd3c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800bd24:	4b14      	ldr	r3, [pc, #80]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bd26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bd2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd2e:	6613      	str	r3, [r2, #96]	; 0x60
 800bd30:	4b11      	ldr	r3, [pc, #68]	; (800bd78 <HAL_SAI_MspInit+0xe4>)
 800bd32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3301      	adds	r3, #1
 800bd42:	4a0c      	ldr	r2, [pc, #48]	; (800bd74 <HAL_SAI_MspInit+0xe0>)
 800bd44:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800bd46:	2380      	movs	r3, #128	; 0x80
 800bd48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd52:	2303      	movs	r3, #3
 800bd54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800bd56:	230d      	movs	r3, #13
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800bd5a:	f107 0314 	add.w	r3, r7, #20
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4806      	ldr	r0, [pc, #24]	; (800bd7c <HAL_SAI_MspInit+0xe8>)
 800bd62:	f7f4 fd39 	bl	80007d8 <HAL_GPIO_Init>

    }
}
 800bd66:	bf00      	nop
 800bd68:	3728      	adds	r7, #40	; 0x28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	40015404 	.word	0x40015404
 800bd74:	20000dc4 	.word	0x20000dc4
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	48001000 	.word	0x48001000
 800bd80:	40015424 	.word	0x40015424

0800bd84 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800bd88:	4b1b      	ldr	r3, [pc, #108]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bd8a:	4a1c      	ldr	r2, [pc, #112]	; (800bdfc <MX_SPI2_Init+0x78>)
 800bd8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800bd8e:	4b1a      	ldr	r3, [pc, #104]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bd90:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800bd96:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800bd9c:	4b16      	ldr	r3, [pc, #88]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bd9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bda2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bda4:	4b14      	ldr	r3, [pc, #80]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bdaa:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800bdb0:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdb6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800bdc4:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdca:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdd2:	2207      	movs	r2, #7
 800bdd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800bdd6:	4b08      	ldr	r3, [pc, #32]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bddc:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bdde:	2208      	movs	r2, #8
 800bde0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800bde2:	4805      	ldr	r0, [pc, #20]	; (800bdf8 <MX_SPI2_Init+0x74>)
 800bde4:	f7f8 ffc4 	bl	8004d70 <HAL_SPI_Init>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800bdee:	f7ff fd07 	bl	800b800 <Error_Handler>
  }

}
 800bdf2:	bf00      	nop
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20001014 	.word	0x20001014
 800bdfc:	40003800 	.word	0x40003800

0800be00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	; 0x28
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be08:	f107 0314 	add.w	r3, r7, #20
 800be0c:	2200      	movs	r2, #0
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	605a      	str	r2, [r3, #4]
 800be12:	609a      	str	r2, [r3, #8]
 800be14:	60da      	str	r2, [r3, #12]
 800be16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a17      	ldr	r2, [pc, #92]	; (800be7c <HAL_SPI_MspInit+0x7c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d127      	bne.n	800be72 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800be22:	4b17      	ldr	r3, [pc, #92]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be26:	4a16      	ldr	r2, [pc, #88]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be2c:	6593      	str	r3, [r2, #88]	; 0x58
 800be2e:	4b14      	ldr	r3, [pc, #80]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800be3a:	4b11      	ldr	r3, [pc, #68]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be3e:	4a10      	ldr	r2, [pc, #64]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be40:	f043 0308 	orr.w	r3, r3, #8
 800be44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be46:	4b0e      	ldr	r3, [pc, #56]	; (800be80 <HAL_SPI_MspInit+0x80>)
 800be48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be4a:	f003 0308 	and.w	r3, r3, #8
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800be52:	231a      	movs	r3, #26
 800be54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be56:	2302      	movs	r3, #2
 800be58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be5e:	2303      	movs	r3, #3
 800be60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800be62:	2305      	movs	r3, #5
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800be66:	f107 0314 	add.w	r3, r7, #20
 800be6a:	4619      	mov	r1, r3
 800be6c:	4805      	ldr	r0, [pc, #20]	; (800be84 <HAL_SPI_MspInit+0x84>)
 800be6e:	f7f4 fcb3 	bl	80007d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800be72:	bf00      	nop
 800be74:	3728      	adds	r7, #40	; 0x28
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	40003800 	.word	0x40003800
 800be80:	40021000 	.word	0x40021000
 800be84:	48000c00 	.word	0x48000c00

0800be88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be8e:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <HAL_MspInit+0x4c>)
 800be90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be92:	4a10      	ldr	r2, [pc, #64]	; (800bed4 <HAL_MspInit+0x4c>)
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	6613      	str	r3, [r2, #96]	; 0x60
 800be9a:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <HAL_MspInit+0x4c>)
 800be9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bea6:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <HAL_MspInit+0x4c>)
 800bea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beaa:	4a0a      	ldr	r2, [pc, #40]	; (800bed4 <HAL_MspInit+0x4c>)
 800beac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beb0:	6593      	str	r3, [r2, #88]	; 0x58
 800beb2:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <HAL_MspInit+0x4c>)
 800beb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beba:	603b      	str	r3, [r7, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bebe:	2200      	movs	r2, #0
 800bec0:	210f      	movs	r1, #15
 800bec2:	f06f 0001 	mvn.w	r0, #1
 800bec6:	f7f4 fc1b 	bl	8000700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800beca:	bf00      	nop
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	40021000 	.word	0x40021000

0800bed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08c      	sub	sp, #48	; 0x30
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800bee8:	2200      	movs	r2, #0
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	2019      	movs	r0, #25
 800beee:	f7f4 fc07 	bl	8000700 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800bef2:	2019      	movs	r0, #25
 800bef4:	f7f4 fc20 	bl	8000738 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800bef8:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <HAL_InitTick+0x9c>)
 800befa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800befc:	4a1d      	ldr	r2, [pc, #116]	; (800bf74 <HAL_InitTick+0x9c>)
 800befe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf02:	6613      	str	r3, [r2, #96]	; 0x60
 800bf04:	4b1b      	ldr	r3, [pc, #108]	; (800bf74 <HAL_InitTick+0x9c>)
 800bf06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bf10:	f107 0210 	add.w	r2, r7, #16
 800bf14:	f107 0314 	add.w	r3, r7, #20
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7f7 faec 	bl	80034f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800bf20:	f7f7 fad4 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 800bf24:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	4a13      	ldr	r2, [pc, #76]	; (800bf78 <HAL_InitTick+0xa0>)
 800bf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2e:	0c9b      	lsrs	r3, r3, #18
 800bf30:	3b01      	subs	r3, #1
 800bf32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800bf34:	4b11      	ldr	r3, [pc, #68]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf36:	4a12      	ldr	r2, [pc, #72]	; (800bf80 <HAL_InitTick+0xa8>)
 800bf38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800bf3a:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bf40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800bf42:	4a0e      	ldr	r2, [pc, #56]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800bf48:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800bf54:	4809      	ldr	r0, [pc, #36]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf56:	f7f8 ff95 	bl	8004e84 <HAL_TIM_Base_Init>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800bf60:	4806      	ldr	r0, [pc, #24]	; (800bf7c <HAL_InitTick+0xa4>)
 800bf62:	f7f8 ffc5 	bl	8004ef0 <HAL_TIM_Base_Start_IT>
 800bf66:	4603      	mov	r3, r0
 800bf68:	e000      	b.n	800bf6c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3730      	adds	r7, #48	; 0x30
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	40021000 	.word	0x40021000
 800bf78:	431bde83 	.word	0x431bde83
 800bf7c:	20001078 	.word	0x20001078
 800bf80:	40012c00 	.word	0x40012c00

0800bf84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bf84:	b480      	push	{r7}
 800bf86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bf88:	bf00      	nop
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bf92:	b480      	push	{r7}
 800bf94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bf96:	e7fe      	b.n	800bf96 <HardFault_Handler+0x4>

0800bf98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bf9c:	e7fe      	b.n	800bf9c <MemManage_Handler+0x4>

0800bf9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bfa2:	e7fe      	b.n	800bfa2 <BusFault_Handler+0x4>

0800bfa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bfa8:	e7fe      	b.n	800bfa8 <UsageFault_Handler+0x4>

0800bfaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bfae:	bf00      	nop
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	f7f4 fdcb 	bl	8000b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800bfc2:	bf00      	nop
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800bfca:	2002      	movs	r0, #2
 800bfcc:	f7f4 fdc4 	bl	8000b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800bfd0:	bf00      	nop
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bfd8:	4802      	ldr	r0, [pc, #8]	; (800bfe4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800bfda:	f7f8 ffb3 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800bfde:	bf00      	nop
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20001078 	.word	0x20001078

0800bfe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800bfec:	4802      	ldr	r0, [pc, #8]	; (800bff8 <USART2_IRQHandler+0x10>)
 800bfee:	f7f9 fa8b 	bl	8005508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bff2:	bf00      	nop
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	200010b8 	.word	0x200010b8

0800bffc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800c000:	4802      	ldr	r0, [pc, #8]	; (800c00c <OTG_FS_IRQHandler+0x10>)
 800c002:	f7f5 f843 	bl	800108c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c006:	bf00      	nop
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	20001510 	.word	0x20001510

0800c010 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */

  if(GPIO_Pin == Joystick_Center_Pin){
 800c01a:	88fb      	ldrh	r3, [r7, #6]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d117      	bne.n	800c050 <HAL_GPIO_EXTI_Callback+0x40>

	  switch (i%2) {
 800c020:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <HAL_GPIO_EXTI_Callback+0x48>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	bfb8      	it	lt
 800c02c:	425b      	neglt	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d005      	beq.n	800c03e <HAL_GPIO_EXTI_Callback+0x2e>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d107      	bne.n	800c046 <HAL_GPIO_EXTI_Callback+0x36>
		case 1:
			allMotorsMove(speedddd);
 800c036:	4809      	ldr	r0, [pc, #36]	; (800c05c <HAL_GPIO_EXTI_Callback+0x4c>)
 800c038:	f7ff fd54 	bl	800bae4 <allMotorsMove>
			break;
 800c03c:	e003      	b.n	800c046 <HAL_GPIO_EXTI_Callback+0x36>
		case 0:
			allMotorsMove(stopppp);
 800c03e:	4808      	ldr	r0, [pc, #32]	; (800c060 <HAL_GPIO_EXTI_Callback+0x50>)
 800c040:	f7ff fd50 	bl	800bae4 <allMotorsMove>
			break;
 800c044:	bf00      	nop
	}
	  i++;
 800c046:	4b04      	ldr	r3, [pc, #16]	; (800c058 <HAL_GPIO_EXTI_Callback+0x48>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	4a02      	ldr	r2, [pc, #8]	; (800c058 <HAL_GPIO_EXTI_Callback+0x48>)
 800c04e:	6013      	str	r3, [r2, #0]


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	20000dd4 	.word	0x20000dd4
 800c05c:	2000002c 	.word	0x2000002c
 800c060:	20000dc8 	.word	0x20000dc8

0800c064 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <_sbrk+0x50>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <_sbrk+0x16>
		heap_end = &end;
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <_sbrk+0x50>)
 800c076:	4a10      	ldr	r2, [pc, #64]	; (800c0b8 <_sbrk+0x54>)
 800c078:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c07a:	4b0e      	ldr	r3, [pc, #56]	; (800c0b4 <_sbrk+0x50>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c080:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <_sbrk+0x50>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	466a      	mov	r2, sp
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d907      	bls.n	800c09e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c08e:	f000 fbf5 	bl	800c87c <__errno>
 800c092:	4602      	mov	r2, r0
 800c094:	230c      	movs	r3, #12
 800c096:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
 800c09c:	e006      	b.n	800c0ac <_sbrk+0x48>
	}

	heap_end += incr;
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <_sbrk+0x50>)
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	4a03      	ldr	r2, [pc, #12]	; (800c0b4 <_sbrk+0x50>)
 800c0a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20000dd8 	.word	0x20000dd8
 800c0b8:	200017d8 	.word	0x200017d8

0800c0bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c0c0:	4b17      	ldr	r3, [pc, #92]	; (800c120 <SystemInit+0x64>)
 800c0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c6:	4a16      	ldr	r2, [pc, #88]	; (800c120 <SystemInit+0x64>)
 800c0c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800c0d0:	4b14      	ldr	r3, [pc, #80]	; (800c124 <SystemInit+0x68>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a13      	ldr	r2, [pc, #76]	; (800c124 <SystemInit+0x68>)
 800c0d6:	f043 0301 	orr.w	r3, r3, #1
 800c0da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800c0dc:	4b11      	ldr	r3, [pc, #68]	; (800c124 <SystemInit+0x68>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	; (800c124 <SystemInit+0x68>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0f      	ldr	r2, [pc, #60]	; (800c124 <SystemInit+0x68>)
 800c0e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800c0ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800c0f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800c0f2:	4b0c      	ldr	r3, [pc, #48]	; (800c124 <SystemInit+0x68>)
 800c0f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c0fa:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <SystemInit+0x68>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a09      	ldr	r2, [pc, #36]	; (800c124 <SystemInit+0x68>)
 800c100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c104:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800c106:	4b07      	ldr	r3, [pc, #28]	; (800c124 <SystemInit+0x68>)
 800c108:	2200      	movs	r2, #0
 800c10a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c10c:	4b04      	ldr	r3, [pc, #16]	; (800c120 <SystemInit+0x64>)
 800c10e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c112:	609a      	str	r2, [r3, #8]
#endif
}
 800c114:	bf00      	nop
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	e000ed00 	.word	0xe000ed00
 800c124:	40021000 	.word	0x40021000

0800c128 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800c12c:	4b14      	ldr	r3, [pc, #80]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c12e:	4a15      	ldr	r2, [pc, #84]	; (800c184 <MX_USART2_UART_Init+0x5c>)
 800c130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c132:	4b13      	ldr	r3, [pc, #76]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c13a:	4b11      	ldr	r3, [pc, #68]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c140:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c142:	2200      	movs	r2, #0
 800c144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c146:	4b0e      	ldr	r3, [pc, #56]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c148:	2200      	movs	r2, #0
 800c14a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c14c:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c14e:	220c      	movs	r2, #12
 800c150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c152:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c154:	2200      	movs	r2, #0
 800c156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c15e:	4b08      	ldr	r3, [pc, #32]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c160:	2200      	movs	r2, #0
 800c162:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c166:	2200      	movs	r2, #0
 800c168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c16a:	4805      	ldr	r0, [pc, #20]	; (800c180 <MX_USART2_UART_Init+0x58>)
 800c16c:	f7f9 f8ea 	bl	8005344 <HAL_UART_Init>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c176:	f7ff fb43 	bl	800b800 <Error_Handler>
  }

}
 800c17a:	bf00      	nop
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	200010b8 	.word	0x200010b8
 800c184:	40004400 	.word	0x40004400

0800c188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c190:	f107 0314 	add.w	r3, r7, #20
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	605a      	str	r2, [r3, #4]
 800c19a:	609a      	str	r2, [r3, #8]
 800c19c:	60da      	str	r2, [r3, #12]
 800c19e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a1b      	ldr	r2, [pc, #108]	; (800c214 <HAL_UART_MspInit+0x8c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c1aa:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ae:	4a1a      	ldr	r2, [pc, #104]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1b4:	6593      	str	r3, [r2, #88]	; 0x58
 800c1b6:	4b18      	ldr	r3, [pc, #96]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1be:	613b      	str	r3, [r7, #16]
 800c1c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1c2:	4b15      	ldr	r3, [pc, #84]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c6:	4a14      	ldr	r2, [pc, #80]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1c8:	f043 0301 	orr.w	r3, r3, #1
 800c1cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c1ce:	4b12      	ldr	r3, [pc, #72]	; (800c218 <HAL_UART_MspInit+0x90>)
 800c1d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	60fb      	str	r3, [r7, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800c1da:	230c      	movs	r3, #12
 800c1dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1de:	2302      	movs	r3, #2
 800c1e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c1ea:	2307      	movs	r3, #7
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ee:	f107 0314 	add.w	r3, r7, #20
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c1f8:	f7f4 faee 	bl	80007d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2105      	movs	r1, #5
 800c200:	2026      	movs	r0, #38	; 0x26
 800c202:	f7f4 fa7d 	bl	8000700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c206:	2026      	movs	r0, #38	; 0x26
 800c208:	f7f4 fa96 	bl	8000738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c20c:	bf00      	nop
 800c20e:	3728      	adds	r7, #40	; 0x28
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	40004400 	.word	0x40004400
 800c218:	40021000 	.word	0x40021000

0800c21c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c220:	2201      	movs	r2, #1
 800c222:	490e      	ldr	r1, [pc, #56]	; (800c25c <MX_USB_HOST_Init+0x40>)
 800c224:	480e      	ldr	r0, [pc, #56]	; (800c260 <MX_USB_HOST_Init+0x44>)
 800c226:	f7fb f99b 	bl	8007560 <USBH_Init>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c230:	f7ff fae6 	bl	800b800 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c234:	490b      	ldr	r1, [pc, #44]	; (800c264 <MX_USB_HOST_Init+0x48>)
 800c236:	480a      	ldr	r0, [pc, #40]	; (800c260 <MX_USB_HOST_Init+0x44>)
 800c238:	f7fb fa2d 	bl	8007696 <USBH_RegisterClass>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c242:	f7ff fadd 	bl	800b800 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c246:	4806      	ldr	r0, [pc, #24]	; (800c260 <MX_USB_HOST_Init+0x44>)
 800c248:	f7fb fab2 	bl	80077b0 <USBH_Start>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c252:	f7ff fad5 	bl	800b800 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c256:	bf00      	nop
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	0800c269 	.word	0x0800c269
 800c260:	20001138 	.word	0x20001138
 800c264:	20000008 	.word	0x20000008

0800c268 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c274:	78fb      	ldrb	r3, [r7, #3]
 800c276:	3b01      	subs	r3, #1
 800c278:	2b04      	cmp	r3, #4
 800c27a:	d819      	bhi.n	800c2b0 <USBH_UserProcess+0x48>
 800c27c:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <USBH_UserProcess+0x1c>)
 800c27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c282:	bf00      	nop
 800c284:	0800c2b1 	.word	0x0800c2b1
 800c288:	0800c2a1 	.word	0x0800c2a1
 800c28c:	0800c2b1 	.word	0x0800c2b1
 800c290:	0800c2a9 	.word	0x0800c2a9
 800c294:	0800c299 	.word	0x0800c299
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c298:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <USBH_UserProcess+0x58>)
 800c29a:	2203      	movs	r2, #3
 800c29c:	701a      	strb	r2, [r3, #0]
  break;
 800c29e:	e008      	b.n	800c2b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <USBH_UserProcess+0x58>)
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	701a      	strb	r2, [r3, #0]
  break;
 800c2a6:	e004      	b.n	800c2b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <USBH_UserProcess+0x58>)
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	701a      	strb	r2, [r3, #0]
  break;
 800c2ae:	e000      	b.n	800c2b2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c2b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c2b2:	bf00      	nop
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20000ddc 	.word	0x20000ddc

0800c2c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	; 0x28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2cc:	f107 0314 	add.w	r3, r7, #20
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	605a      	str	r2, [r3, #4]
 800c2d6:	609a      	str	r2, [r3, #8]
 800c2d8:	60da      	str	r2, [r3, #12]
 800c2da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2e4:	d14e      	bne.n	800c384 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2e6:	4b29      	ldr	r3, [pc, #164]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ea:	4a28      	ldr	r2, [pc, #160]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c2ec:	f043 0301 	orr.w	r3, r3, #1
 800c2f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c2f2:	4b26      	ldr	r3, [pc, #152]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f6:	f003 0301 	and.w	r3, r3, #1
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c2fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c304:	2302      	movs	r3, #2
 800c306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c30c:	2303      	movs	r3, #3
 800c30e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c310:	230a      	movs	r3, #10
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	4619      	mov	r1, r3
 800c31a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c31e:	f7f4 fa5b 	bl	80007d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c322:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c326:	4a19      	ldr	r2, [pc, #100]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c32c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c32e:	4b17      	ldr	r3, [pc, #92]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c33a:	4b14      	ldr	r3, [pc, #80]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d114      	bne.n	800c370 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	4a10      	ldr	r2, [pc, #64]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c350:	6593      	str	r3, [r2, #88]	; 0x58
 800c352:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c35a:	60bb      	str	r3, [r7, #8]
 800c35c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c35e:	f7f6 fa9f 	bl	80028a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c362:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c366:	4a09      	ldr	r2, [pc, #36]	; (800c38c <HAL_HCD_MspInit+0xc8>)
 800c368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c36c:	6593      	str	r3, [r2, #88]	; 0x58
 800c36e:	e001      	b.n	800c374 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c370:	f7f6 fa96 	bl	80028a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c374:	2200      	movs	r2, #0
 800c376:	2105      	movs	r1, #5
 800c378:	2043      	movs	r0, #67	; 0x43
 800c37a:	f7f4 f9c1 	bl	8000700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c37e:	2043      	movs	r0, #67	; 0x43
 800c380:	f7f4 f9da 	bl	8000738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c384:	bf00      	nop
 800c386:	3728      	adds	r7, #40	; 0x28
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	40021000 	.word	0x40021000

0800c390 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fb fd59 	bl	8007e56 <USBH_LL_IncTimer>
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fb fd9e 	bl	8007efc <USBH_LL_Connect>
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fb fdc4 	bl	8007f64 <USBH_LL_Disconnect>
}
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fb fe02 	bl	8008004 <USBH_LL_NotifyURBChange>
#endif
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c416:	4618      	mov	r0, r3
 800c418:	f7fb fd47 	bl	8007eaa <USBH_LL_PortEnabled>
} 
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c432:	4618      	mov	r0, r3
 800c434:	f7fb fd47 	bl	8007ec6 <USBH_LL_PortDisabled>
} 
 800c438:	bf00      	nop
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d12a      	bne.n	800c4a8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c452:	4a18      	ldr	r2, [pc, #96]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a15      	ldr	r2, [pc, #84]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c45e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c462:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c464:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c468:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c46a:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c46c:	2208      	movs	r2, #8
 800c46e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c470:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c472:	2201      	movs	r2, #1
 800c474:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c476:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c478:	2200      	movs	r2, #0
 800c47a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c47c:	4b0d      	ldr	r3, [pc, #52]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c47e:	2202      	movs	r2, #2
 800c480:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c482:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c484:	2200      	movs	r2, #0
 800c486:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c488:	480a      	ldr	r0, [pc, #40]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c48a:	f7f4 fb7d 	bl	8000b88 <HAL_HCD_Init>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c494:	f7ff f9b4 	bl	800b800 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c498:	4806      	ldr	r0, [pc, #24]	; (800c4b4 <USBH_LL_Init+0x74>)
 800c49a:	f7f4 ff75 	bl	8001388 <HAL_HCD_GetCurrentFrame>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7fb fcc8 	bl	8007e38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20001510 	.word	0x20001510

0800c4b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f4 fee2 	bl	8001298 <HAL_HCD_Start>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 f95c 	bl	800c798 <USBH_Get_USB_Status>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c504:	4618      	mov	r0, r3
 800c506:	f7f4 feea 	bl	80012de <HAL_HCD_Stop>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	4618      	mov	r0, r3
 800c512:	f000 f941 	bl	800c798 <USBH_Get_USB_Status>
 800c516:	4603      	mov	r3, r0
 800c518:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c52c:	2301      	movs	r3, #1
 800c52e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c536:	4618      	mov	r0, r3
 800c538:	f7f4 ff34 	bl	80013a4 <HAL_HCD_GetCurrentSpeed>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d007      	beq.n	800c552 <USBH_LL_GetSpeed+0x2e>
 800c542:	2b01      	cmp	r3, #1
 800c544:	d302      	bcc.n	800c54c <USBH_LL_GetSpeed+0x28>
 800c546:	2b02      	cmp	r3, #2
 800c548:	d006      	beq.n	800c558 <USBH_LL_GetSpeed+0x34>
 800c54a:	e008      	b.n	800c55e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]
    break;
 800c550:	e008      	b.n	800c564 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]
    break;
 800c556:	e005      	b.n	800c564 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c558:	2302      	movs	r3, #2
 800c55a:	73fb      	strb	r3, [r7, #15]
    break;
 800c55c:	e002      	b.n	800c564 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c55e:	2301      	movs	r3, #1
 800c560:	73fb      	strb	r3, [r7, #15]
    break;
 800c562:	bf00      	nop
  }
  return  speed;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c584:	4618      	mov	r0, r3
 800c586:	f7f4 fec7 	bl	8001318 <HAL_HCD_ResetPort>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f901 	bl	800c798 <USBH_Get_USB_Status>
 800c596:	4603      	mov	r3, r0
 800c598:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5b6:	78fa      	ldrb	r2, [r7, #3]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7f4 fecf 	bl	800135e <HAL_HCD_HC_GetXferCount>
 800c5c0:	4603      	mov	r3, r0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c5ca:	b590      	push	{r4, r7, lr}
 800c5cc:	b089      	sub	sp, #36	; 0x24
 800c5ce:	af04      	add	r7, sp, #16
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	4608      	mov	r0, r1
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4603      	mov	r3, r0
 800c5da:	70fb      	strb	r3, [r7, #3]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70bb      	strb	r3, [r7, #2]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c5f2:	787c      	ldrb	r4, [r7, #1]
 800c5f4:	78ba      	ldrb	r2, [r7, #2]
 800c5f6:	78f9      	ldrb	r1, [r7, #3]
 800c5f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5fa:	9302      	str	r3, [sp, #8]
 800c5fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c600:	9301      	str	r3, [sp, #4]
 800c602:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	4623      	mov	r3, r4
 800c60a:	f7f4 fb1f 	bl	8000c4c <HAL_HCD_HC_Init>
 800c60e:	4603      	mov	r3, r0
 800c610:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	4618      	mov	r0, r3
 800c616:	f000 f8bf 	bl	800c798 <USBH_Get_USB_Status>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	bd90      	pop	{r4, r7, pc}

0800c628 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c642:	78fa      	ldrb	r2, [r7, #3]
 800c644:	4611      	mov	r1, r2
 800c646:	4618      	mov	r0, r3
 800c648:	f7f4 fb98 	bl	8000d7c <HAL_HCD_HC_Halt>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f8a0 	bl	800c798 <USBH_Get_USB_Status>
 800c658:	4603      	mov	r3, r0
 800c65a:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c666:	b590      	push	{r4, r7, lr}
 800c668:	b089      	sub	sp, #36	; 0x24
 800c66a:	af04      	add	r7, sp, #16
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	4608      	mov	r0, r1
 800c670:	4611      	mov	r1, r2
 800c672:	461a      	mov	r2, r3
 800c674:	4603      	mov	r3, r0
 800c676:	70fb      	strb	r3, [r7, #3]
 800c678:	460b      	mov	r3, r1
 800c67a:	70bb      	strb	r3, [r7, #2]
 800c67c:	4613      	mov	r3, r2
 800c67e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c68e:	787c      	ldrb	r4, [r7, #1]
 800c690:	78ba      	ldrb	r2, [r7, #2]
 800c692:	78f9      	ldrb	r1, [r7, #3]
 800c694:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c698:	9303      	str	r3, [sp, #12]
 800c69a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c69c:	9302      	str	r3, [sp, #8]
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4623      	mov	r3, r4
 800c6aa:	f7f4 fb8b 	bl	8000dc4 <HAL_HCD_HC_SubmitRequest>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f86f 	bl	800c798 <USBH_Get_USB_Status>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd90      	pop	{r4, r7, pc}

0800c6c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6da:	78fa      	ldrb	r2, [r7, #3]
 800c6dc:	4611      	mov	r1, r2
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f4 fe28 	bl	8001334 <HAL_HCD_HC_GetURBState>
 800c6e4:	4603      	mov	r3, r0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c700:	2b01      	cmp	r3, #1
 800c702:	d103      	bne.n	800c70c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f872 	bl	800c7f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c70c:	20c8      	movs	r0, #200	; 0xc8
 800c70e:	f7f3 ff1d 	bl	800054c <HAL_Delay>
  return USBH_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	70fb      	strb	r3, [r7, #3]
 800c728:	4613      	mov	r3, r2
 800c72a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c732:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c734:	78fa      	ldrb	r2, [r7, #3]
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	333b      	adds	r3, #59	; 0x3b
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	4613      	mov	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	440b      	add	r3, r1
 800c758:	3350      	adds	r3, #80	; 0x50
 800c75a:	78ba      	ldrb	r2, [r7, #2]
 800c75c:	701a      	strb	r2, [r3, #0]
 800c75e:	e009      	b.n	800c774 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c760:	78fa      	ldrb	r2, [r7, #3]
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	4613      	mov	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	440b      	add	r3, r1
 800c76e:	3351      	adds	r3, #81	; 0x51
 800c770:	78ba      	ldrb	r2, [r7, #2]
 800c772:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b082      	sub	sp, #8
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7f3 fede 	bl	800054c <HAL_Delay>
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d817      	bhi.n	800c7dc <USBH_Get_USB_Status+0x44>
 800c7ac:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <USBH_Get_USB_Status+0x1c>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c7c5 	.word	0x0800c7c5
 800c7b8:	0800c7cb 	.word	0x0800c7cb
 800c7bc:	0800c7d1 	.word	0x0800c7d1
 800c7c0:	0800c7d7 	.word	0x0800c7d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c8:	e00b      	b.n	800c7e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ce:	e008      	b.n	800c7e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d4:	e005      	b.n	800c7e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7da:	e002      	b.n	800c7e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c7dc:	2302      	movs	r3, #2
 800c7de:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e0:	bf00      	nop
  }
  return usb_status;
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800c7fa:	79fb      	ldrb	r3, [r7, #7]
 800c7fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c7fe:	79fb      	ldrb	r3, [r7, #7]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800c804:	2301      	movs	r3, #1
 800c806:	73fb      	strb	r3, [r7, #15]
 800c808:	e001      	b.n	800c80e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c80a:	2300      	movs	r3, #0
 800c80c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	461a      	mov	r2, r3
 800c812:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c816:	4803      	ldr	r0, [pc, #12]	; (800c824 <MX_DriverVbusFS+0x34>)
 800c818:	f7f4 f986 	bl	8000b28 <HAL_GPIO_WritePin>
}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	48000800 	.word	0x48000800

0800c828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c828:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c82c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c82e:	e003      	b.n	800c838 <LoopCopyDataInit>

0800c830 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c830:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c832:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c834:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c836:	3104      	adds	r1, #4

0800c838 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c838:	480b      	ldr	r0, [pc, #44]	; (800c868 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c83a:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <LoopForever+0xe>)
	adds	r2, r0, r1
 800c83c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c83e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c840:	d3f6      	bcc.n	800c830 <CopyDataInit>
	ldr	r2, =_sbss
 800c842:	4a0b      	ldr	r2, [pc, #44]	; (800c870 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c844:	e002      	b.n	800c84c <LoopFillZerobss>

0800c846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c846:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c848:	f842 3b04 	str.w	r3, [r2], #4

0800c84c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <LoopForever+0x16>)
	cmp	r2, r3
 800c84e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c850:	d3f9      	bcc.n	800c846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c852:	f7ff fc33 	bl	800c0bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c856:	f000 f817 	bl	800c888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c85a:	f7fe ff0d 	bl	800b678 <main>

0800c85e <LoopForever>:

LoopForever:
    b LoopForever
 800c85e:	e7fe      	b.n	800c85e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c860:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c864:	0800cb4c 	.word	0x0800cb4c
	ldr	r0, =_sdata
 800c868:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c86c:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 800c870:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 800c874:	200017d8 	.word	0x200017d8

0800c878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c878:	e7fe      	b.n	800c878 <ADC1_2_IRQHandler>
	...

0800c87c <__errno>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <__errno+0x8>)
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	2000003c 	.word	0x2000003c

0800c888 <__libc_init_array>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	4e0d      	ldr	r6, [pc, #52]	; (800c8c0 <__libc_init_array+0x38>)
 800c88c:	4c0d      	ldr	r4, [pc, #52]	; (800c8c4 <__libc_init_array+0x3c>)
 800c88e:	1ba4      	subs	r4, r4, r6
 800c890:	10a4      	asrs	r4, r4, #2
 800c892:	2500      	movs	r5, #0
 800c894:	42a5      	cmp	r5, r4
 800c896:	d109      	bne.n	800c8ac <__libc_init_array+0x24>
 800c898:	4e0b      	ldr	r6, [pc, #44]	; (800c8c8 <__libc_init_array+0x40>)
 800c89a:	4c0c      	ldr	r4, [pc, #48]	; (800c8cc <__libc_init_array+0x44>)
 800c89c:	f000 f8f6 	bl	800ca8c <_init>
 800c8a0:	1ba4      	subs	r4, r4, r6
 800c8a2:	10a4      	asrs	r4, r4, #2
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	42a5      	cmp	r5, r4
 800c8a8:	d105      	bne.n	800c8b6 <__libc_init_array+0x2e>
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8b0:	4798      	blx	r3
 800c8b2:	3501      	adds	r5, #1
 800c8b4:	e7ee      	b.n	800c894 <__libc_init_array+0xc>
 800c8b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8ba:	4798      	blx	r3
 800c8bc:	3501      	adds	r5, #1
 800c8be:	e7f2      	b.n	800c8a6 <__libc_init_array+0x1e>
 800c8c0:	0800cb44 	.word	0x0800cb44
 800c8c4:	0800cb44 	.word	0x0800cb44
 800c8c8:	0800cb44 	.word	0x0800cb44
 800c8cc:	0800cb48 	.word	0x0800cb48

0800c8d0 <malloc>:
 800c8d0:	4b02      	ldr	r3, [pc, #8]	; (800c8dc <malloc+0xc>)
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	f000 b86d 	b.w	800c9b4 <_malloc_r>
 800c8da:	bf00      	nop
 800c8dc:	2000003c 	.word	0x2000003c

0800c8e0 <free>:
 800c8e0:	4b02      	ldr	r3, [pc, #8]	; (800c8ec <free+0xc>)
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	6818      	ldr	r0, [r3, #0]
 800c8e6:	f000 b817 	b.w	800c918 <_free_r>
 800c8ea:	bf00      	nop
 800c8ec:	2000003c 	.word	0x2000003c

0800c8f0 <memcpy>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	1e43      	subs	r3, r0, #1
 800c8f4:	440a      	add	r2, r1
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	d100      	bne.n	800c8fc <memcpy+0xc>
 800c8fa:	bd10      	pop	{r4, pc}
 800c8fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c900:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c904:	e7f7      	b.n	800c8f6 <memcpy+0x6>

0800c906 <memset>:
 800c906:	4402      	add	r2, r0
 800c908:	4603      	mov	r3, r0
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d100      	bne.n	800c910 <memset+0xa>
 800c90e:	4770      	bx	lr
 800c910:	f803 1b01 	strb.w	r1, [r3], #1
 800c914:	e7f9      	b.n	800c90a <memset+0x4>
	...

0800c918 <_free_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4605      	mov	r5, r0
 800c91c:	2900      	cmp	r1, #0
 800c91e:	d045      	beq.n	800c9ac <_free_r+0x94>
 800c920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c924:	1f0c      	subs	r4, r1, #4
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfb8      	it	lt
 800c92a:	18e4      	addlt	r4, r4, r3
 800c92c:	f000 f8ac 	bl	800ca88 <__malloc_lock>
 800c930:	4a1f      	ldr	r2, [pc, #124]	; (800c9b0 <_free_r+0x98>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	4610      	mov	r0, r2
 800c936:	b933      	cbnz	r3, 800c946 <_free_r+0x2e>
 800c938:	6063      	str	r3, [r4, #4]
 800c93a:	6014      	str	r4, [r2, #0]
 800c93c:	4628      	mov	r0, r5
 800c93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c942:	f000 b8a2 	b.w	800ca8a <__malloc_unlock>
 800c946:	42a3      	cmp	r3, r4
 800c948:	d90c      	bls.n	800c964 <_free_r+0x4c>
 800c94a:	6821      	ldr	r1, [r4, #0]
 800c94c:	1862      	adds	r2, r4, r1
 800c94e:	4293      	cmp	r3, r2
 800c950:	bf04      	itt	eq
 800c952:	681a      	ldreq	r2, [r3, #0]
 800c954:	685b      	ldreq	r3, [r3, #4]
 800c956:	6063      	str	r3, [r4, #4]
 800c958:	bf04      	itt	eq
 800c95a:	1852      	addeq	r2, r2, r1
 800c95c:	6022      	streq	r2, [r4, #0]
 800c95e:	6004      	str	r4, [r0, #0]
 800c960:	e7ec      	b.n	800c93c <_free_r+0x24>
 800c962:	4613      	mov	r3, r2
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	b10a      	cbz	r2, 800c96c <_free_r+0x54>
 800c968:	42a2      	cmp	r2, r4
 800c96a:	d9fa      	bls.n	800c962 <_free_r+0x4a>
 800c96c:	6819      	ldr	r1, [r3, #0]
 800c96e:	1858      	adds	r0, r3, r1
 800c970:	42a0      	cmp	r0, r4
 800c972:	d10b      	bne.n	800c98c <_free_r+0x74>
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	4401      	add	r1, r0
 800c978:	1858      	adds	r0, r3, r1
 800c97a:	4282      	cmp	r2, r0
 800c97c:	6019      	str	r1, [r3, #0]
 800c97e:	d1dd      	bne.n	800c93c <_free_r+0x24>
 800c980:	6810      	ldr	r0, [r2, #0]
 800c982:	6852      	ldr	r2, [r2, #4]
 800c984:	605a      	str	r2, [r3, #4]
 800c986:	4401      	add	r1, r0
 800c988:	6019      	str	r1, [r3, #0]
 800c98a:	e7d7      	b.n	800c93c <_free_r+0x24>
 800c98c:	d902      	bls.n	800c994 <_free_r+0x7c>
 800c98e:	230c      	movs	r3, #12
 800c990:	602b      	str	r3, [r5, #0]
 800c992:	e7d3      	b.n	800c93c <_free_r+0x24>
 800c994:	6820      	ldr	r0, [r4, #0]
 800c996:	1821      	adds	r1, r4, r0
 800c998:	428a      	cmp	r2, r1
 800c99a:	bf04      	itt	eq
 800c99c:	6811      	ldreq	r1, [r2, #0]
 800c99e:	6852      	ldreq	r2, [r2, #4]
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	bf04      	itt	eq
 800c9a4:	1809      	addeq	r1, r1, r0
 800c9a6:	6021      	streq	r1, [r4, #0]
 800c9a8:	605c      	str	r4, [r3, #4]
 800c9aa:	e7c7      	b.n	800c93c <_free_r+0x24>
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20000de0 	.word	0x20000de0

0800c9b4 <_malloc_r>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	1ccd      	adds	r5, r1, #3
 800c9b8:	f025 0503 	bic.w	r5, r5, #3
 800c9bc:	3508      	adds	r5, #8
 800c9be:	2d0c      	cmp	r5, #12
 800c9c0:	bf38      	it	cc
 800c9c2:	250c      	movcc	r5, #12
 800c9c4:	2d00      	cmp	r5, #0
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	db01      	blt.n	800c9ce <_malloc_r+0x1a>
 800c9ca:	42a9      	cmp	r1, r5
 800c9cc:	d903      	bls.n	800c9d6 <_malloc_r+0x22>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	6033      	str	r3, [r6, #0]
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
 800c9d6:	f000 f857 	bl	800ca88 <__malloc_lock>
 800c9da:	4a21      	ldr	r2, [pc, #132]	; (800ca60 <_malloc_r+0xac>)
 800c9dc:	6814      	ldr	r4, [r2, #0]
 800c9de:	4621      	mov	r1, r4
 800c9e0:	b991      	cbnz	r1, 800ca08 <_malloc_r+0x54>
 800c9e2:	4c20      	ldr	r4, [pc, #128]	; (800ca64 <_malloc_r+0xb0>)
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	b91b      	cbnz	r3, 800c9f0 <_malloc_r+0x3c>
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f000 f83d 	bl	800ca68 <_sbrk_r>
 800c9ee:	6020      	str	r0, [r4, #0]
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 f838 	bl	800ca68 <_sbrk_r>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d124      	bne.n	800ca46 <_malloc_r+0x92>
 800c9fc:	230c      	movs	r3, #12
 800c9fe:	6033      	str	r3, [r6, #0]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 f842 	bl	800ca8a <__malloc_unlock>
 800ca06:	e7e4      	b.n	800c9d2 <_malloc_r+0x1e>
 800ca08:	680b      	ldr	r3, [r1, #0]
 800ca0a:	1b5b      	subs	r3, r3, r5
 800ca0c:	d418      	bmi.n	800ca40 <_malloc_r+0x8c>
 800ca0e:	2b0b      	cmp	r3, #11
 800ca10:	d90f      	bls.n	800ca32 <_malloc_r+0x7e>
 800ca12:	600b      	str	r3, [r1, #0]
 800ca14:	50cd      	str	r5, [r1, r3]
 800ca16:	18cc      	adds	r4, r1, r3
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 f836 	bl	800ca8a <__malloc_unlock>
 800ca1e:	f104 000b 	add.w	r0, r4, #11
 800ca22:	1d23      	adds	r3, r4, #4
 800ca24:	f020 0007 	bic.w	r0, r0, #7
 800ca28:	1ac3      	subs	r3, r0, r3
 800ca2a:	d0d3      	beq.n	800c9d4 <_malloc_r+0x20>
 800ca2c:	425a      	negs	r2, r3
 800ca2e:	50e2      	str	r2, [r4, r3]
 800ca30:	e7d0      	b.n	800c9d4 <_malloc_r+0x20>
 800ca32:	428c      	cmp	r4, r1
 800ca34:	684b      	ldr	r3, [r1, #4]
 800ca36:	bf16      	itet	ne
 800ca38:	6063      	strne	r3, [r4, #4]
 800ca3a:	6013      	streq	r3, [r2, #0]
 800ca3c:	460c      	movne	r4, r1
 800ca3e:	e7eb      	b.n	800ca18 <_malloc_r+0x64>
 800ca40:	460c      	mov	r4, r1
 800ca42:	6849      	ldr	r1, [r1, #4]
 800ca44:	e7cc      	b.n	800c9e0 <_malloc_r+0x2c>
 800ca46:	1cc4      	adds	r4, r0, #3
 800ca48:	f024 0403 	bic.w	r4, r4, #3
 800ca4c:	42a0      	cmp	r0, r4
 800ca4e:	d005      	beq.n	800ca5c <_malloc_r+0xa8>
 800ca50:	1a21      	subs	r1, r4, r0
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f808 	bl	800ca68 <_sbrk_r>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d0cf      	beq.n	800c9fc <_malloc_r+0x48>
 800ca5c:	6025      	str	r5, [r4, #0]
 800ca5e:	e7db      	b.n	800ca18 <_malloc_r+0x64>
 800ca60:	20000de0 	.word	0x20000de0
 800ca64:	20000de4 	.word	0x20000de4

0800ca68 <_sbrk_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4c06      	ldr	r4, [pc, #24]	; (800ca84 <_sbrk_r+0x1c>)
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4605      	mov	r5, r0
 800ca70:	4608      	mov	r0, r1
 800ca72:	6023      	str	r3, [r4, #0]
 800ca74:	f7ff faf6 	bl	800c064 <_sbrk>
 800ca78:	1c43      	adds	r3, r0, #1
 800ca7a:	d102      	bne.n	800ca82 <_sbrk_r+0x1a>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	b103      	cbz	r3, 800ca82 <_sbrk_r+0x1a>
 800ca80:	602b      	str	r3, [r5, #0]
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	200017d4 	.word	0x200017d4

0800ca88 <__malloc_lock>:
 800ca88:	4770      	bx	lr

0800ca8a <__malloc_unlock>:
 800ca8a:	4770      	bx	lr

0800ca8c <_init>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr

0800ca98 <_fini>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr
