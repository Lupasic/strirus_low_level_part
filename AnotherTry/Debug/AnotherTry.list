
AnotherTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000090  08009d98  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  08009d98  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242c9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b7f  00000000  00000000  00044389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d0  00000000  00000000  00048f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  0004a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ca93  00000000  00000000  0004be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001939f  00000000  00000000  000788fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8b77  00000000  00000000  00091c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018a811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  0018a88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c94 	.word	0x08009c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009c94 	.word	0x08009c94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_Init+0x3c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <HAL_Init+0x3c>)
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 f95c 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f80f 	bl	8000508 <HAL_InitTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	e001      	b.n	80004fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f6:	f008 fe59 	bl	80091ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_InitTick+0x6c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_InitTick+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000528:	fbb1 f3f3 	udiv	r3, r1, r3
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f968 	bl	8000806 <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10f      	bne.n	800055c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d809      	bhi.n	8000556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 f932 	bl	80007b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_InitTick+0x70>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e007      	b.n	8000566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e004      	b.n	8000566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e001      	b.n	8000566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_IncTick+0x1c>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <HAL_IncTick+0x1c>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	200000c4 	.word	0x200000c4
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d004      	beq.n	80005dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_Delay+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4413      	add	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005dc:	bf00      	nop
 80005de:	f7ff ffdf 	bl	80005a0 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8f7      	bhi.n	80005de <HAL_Delay+0x26>
  {
  }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff29 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff3e 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff31 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b02      	cmp	r3, #2
 8000834:	d005      	beq.n	8000842 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2204      	movs	r2, #4
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e029      	b.n	8000896 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 020e 	bic.w	r2, r2, #14
 8000850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 0201 	bic.w	r2, r2, #1
 8000860:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f003 021c 	and.w	r2, r3, #28
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2201      	movs	r2, #1
 800087a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	4798      	blx	r3
    }
  }
  return status;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e17f      	b.n	8000bb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8171 	beq.w	8000baa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d003      	beq.n	80008d8 <HAL_GPIO_Init+0x38>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b12      	cmp	r3, #18
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	6939      	ldr	r1, [r7, #16]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d00b      	beq.n	8000974 <HAL_GPIO_Init+0xd4>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000968:	2b11      	cmp	r3, #17
 800096a:	d003      	beq.n	8000974 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b12      	cmp	r3, #18
 8000972:	d130      	bne.n	80009d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009aa:	2201      	movs	r2, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 0201 	and.w	r2, r3, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d118      	bne.n	8000a14 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	f003 0201 	and.w	r2, r3, #1
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80ac 	beq.w	8000baa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <HAL_GPIO_Init+0x32c>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a5d      	ldr	r2, [pc, #372]	; (8000bcc <HAL_GPIO_Init+0x32c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <HAL_GPIO_Init+0x32c>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a6a:	4a59      	ldr	r2, [pc, #356]	; (8000bd0 <HAL_GPIO_Init+0x330>)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3302      	adds	r3, #2
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a94:	d025      	beq.n	8000ae2 <HAL_GPIO_Init+0x242>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a4e      	ldr	r2, [pc, #312]	; (8000bd4 <HAL_GPIO_Init+0x334>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d01f      	beq.n	8000ade <HAL_GPIO_Init+0x23e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	; (8000bd8 <HAL_GPIO_Init+0x338>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d019      	beq.n	8000ada <HAL_GPIO_Init+0x23a>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_GPIO_Init+0x33c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x236>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4b      	ldr	r2, [pc, #300]	; (8000be0 <HAL_GPIO_Init+0x340>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_GPIO_Init+0x232>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <HAL_GPIO_Init+0x344>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d007      	beq.n	8000ace <HAL_GPIO_Init+0x22e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <HAL_GPIO_Init+0x348>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_GPIO_Init+0x22a>
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000aca:	2307      	movs	r3, #7
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x244>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af4:	4936      	ldr	r1, [pc, #216]	; (8000bd0 <HAL_GPIO_Init+0x330>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x34c>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f47f ae78 	bne.w	80008b0 <HAL_GPIO_Init+0x10>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48001000 	.word	0x48001000
 8000be4:	48001400 	.word	0x48001400
 8000be8:	48001800 	.word	0x48001800
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b08f      	sub	sp, #60	; 0x3c
 8000c24:	af0a      	add	r7, sp, #40	; 0x28
 8000c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e054      	b.n	8000cdc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f008 fc4d 	bl	80094ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 f87a 	bl	8005d6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	687e      	ldr	r6, [r7, #4]
 8000c7e:	466d      	mov	r5, sp
 8000c80:	f106 0410 	add.w	r4, r6, #16
 8000c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c94:	1d33      	adds	r3, r6, #4
 8000c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c98:	6838      	ldr	r0, [r7, #0]
 8000c9a:	f005 f803 	bl	8005ca4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 f871 	bl	8005d8c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	687e      	ldr	r6, [r7, #4]
 8000cb2:	466d      	mov	r5, sp
 8000cb4:	f106 0410 	add.w	r4, r6, #16
 8000cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cc8:	1d33      	adds	r3, r6, #4
 8000cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ccc:	6838      	ldr	r0, [r7, #0]
 8000cce:	f005 f97f 	bl	8005fd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af04      	add	r7, sp, #16
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	70fb      	strb	r3, [r7, #3]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70bb      	strb	r3, [r7, #2]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_HCD_HC_Init+0x28>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e07f      	b.n	8000e0c <HAL_HCD_HC_Init+0x128>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	333d      	adds	r3, #61	; 0x3d
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3338      	adds	r3, #56	; 0x38
 8000d38:	787a      	ldrb	r2, [r7, #1]
 8000d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3340      	adds	r3, #64	; 0x40
 8000d4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d4e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3339      	adds	r3, #57	; 0x39
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	333f      	adds	r3, #63	; 0x3f
 8000d74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d7a:	78fa      	ldrb	r2, [r7, #3]
 8000d7c:	78bb      	ldrb	r3, [r7, #2]
 8000d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d82:	b2d8      	uxtb	r0, r3
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	440b      	add	r3, r1
 8000d90:	333a      	adds	r3, #58	; 0x3a
 8000d92:	4602      	mov	r2, r0
 8000d94:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	da0a      	bge.n	8000db4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d9e:	78fa      	ldrb	r2, [r7, #3]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	333b      	adds	r3, #59	; 0x3b
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e009      	b.n	8000dc8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000db4:	78fa      	ldrb	r2, [r7, #3]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	333b      	adds	r3, #59	; 0x3b
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	333c      	adds	r3, #60	; 0x3c
 8000dd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ddc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	787c      	ldrb	r4, [r7, #1]
 8000de4:	78ba      	ldrb	r2, [r7, #2]
 8000de6:	78f9      	ldrb	r1, [r7, #3]
 8000de8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	4623      	mov	r3, r4
 8000dfa:	f005 fa2d 	bl	8006258 <USB_HC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d101      	bne.n	8000e32 <HAL_HCD_HC_Halt+0x1e>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e00f      	b.n	8000e52 <HAL_HCD_HC_Halt+0x3e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fc0b 	bl	800665e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70bb      	strb	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	333b      	adds	r3, #59	; 0x3b
 8000e86:	78ba      	ldrb	r2, [r7, #2]
 8000e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	333f      	adds	r3, #63	; 0x3f
 8000e9a:	787a      	ldrb	r2, [r7, #1]
 8000e9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e009      	b.n	8000ece <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f200 80d6 	bhi.w	8001082 <HAL_HCD_HC_SubmitRequest+0x226>
 8000ed6:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <HAL_HCD_HC_SubmitRequest+0x80>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	0800106d 	.word	0x0800106d
 8000ee4:	08000f59 	.word	0x08000f59
 8000ee8:	08000fe3 	.word	0x08000fe3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eec:	7c3b      	ldrb	r3, [r7, #16]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80c9 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80c5 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3351      	adds	r3, #81	; 0x51
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3351      	adds	r3, #81	; 0x51
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3342      	adds	r3, #66	; 0x42
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f40:	e0a1      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3342      	adds	r3, #66	; 0x42
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
      break;
 8000f56:	e096      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d120      	bne.n	8000fa0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3351      	adds	r3, #81	; 0x51
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f88:	e07e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e073      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3350      	adds	r3, #80	; 0x50
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10a      	bne.n	8000fcc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3342      	adds	r3, #66	; 0x42
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
      break;
 8000fca:	e05d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3342      	adds	r3, #66	; 0x42
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
      break;
 8000fe0:	e052      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d120      	bne.n	800102a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3351      	adds	r3, #81	; 0x51
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001012:	e039      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
      break;
 8001028:	e02e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800102a:	78fa      	ldrb	r2, [r7, #3]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3342      	adds	r3, #66	; 0x42
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
      break;
 8001054:	e018      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3342      	adds	r3, #66	; 0x42
 8001066:	2202      	movs	r2, #2
 8001068:	701a      	strb	r2, [r3, #0]
      break;
 800106a:	e00d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3342      	adds	r3, #66	; 0x42
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
      break;
 8001080:	e002      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001086:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3344      	adds	r3, #68	; 0x44
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	8b39      	ldrh	r1, [r7, #24]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4403      	add	r3, r0
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	335c      	adds	r3, #92	; 0x5c
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	334c      	adds	r3, #76	; 0x4c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010d8:	78fa      	ldrb	r2, [r7, #3]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3339      	adds	r3, #57	; 0x39
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	335d      	adds	r3, #93	; 0x5d
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	3338      	adds	r3, #56	; 0x38
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f005 f991 	bl	800643c <USB_HC_StartXfer>
 800111a:	4603      	mov	r3, r0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f004 ff05 	bl	8005f4a <USB_GetMode>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	f040 80f1 	bne.w	800132a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fee9 	bl	8005f24 <USB_ReadInterrupts>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80e7 	beq.w	8001328 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fee0 	bl	8005f24 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800116e:	d104      	bne.n	800117a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001178:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fed0 	bl	8005f24 <USB_ReadInterrupts>
 8001184:	4603      	mov	r3, r0
 8001186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800118e:	d104      	bne.n	800119a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001198:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fec0 	bl	8005f24 <USB_ReadInterrupts>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011ae:	d104      	bne.n	80011ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 feb0 	bl	8005f24 <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d103      	bne.n	80011d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fea2 	bl	8005f24 <USB_ReadInterrupts>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011ea:	d117      	bne.n	800121c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80011fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80011fe:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f008 f9f5 	bl	80095f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f004 ff5d 	bl	80060cc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800121a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fe7f 	bl	8005f24 <USB_ReadInterrupts>
 8001226:	4603      	mov	r3, r0
 8001228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d102      	bne.n	8001238 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 f884 	bl	8002340 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fe71 	bl	8005f24 <USB_ReadInterrupts>
 8001242:	4603      	mov	r3, r0
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b08      	cmp	r3, #8
 800124a:	d106      	bne.n	800125a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f008 f9b3 	bl	80095b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2208      	movs	r2, #8
 8001258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fe60 	bl	8005f24 <USB_ReadInterrupts>
 8001264:	4603      	mov	r3, r0
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800126e:	d138      	bne.n	80012e2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f005 f9e1 	bl	800663c <USB_HC_ReadInterrupt>
 800127a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e025      	b.n	80012ce <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d018      	beq.n	80012c8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ac:	d106      	bne.n	80012bc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8cf 	bl	8001458 <HCD_HC_IN_IRQHandler>
 80012ba:	e005      	b.n	80012c8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fc3b 	bl	8001b3e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3d4      	bcc.n	8001282 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fe1c 	bl	8005f24 <USB_ReadInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d101      	bne.n	80012fa <HAL_HCD_IRQHandler+0x1d6>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_HCD_IRQHandler+0x1d8>
 80012fa:	2300      	movs	r3, #0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d014      	beq.n	800132a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0210 	bic.w	r2, r2, #16
 800130e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 ff69 	bl	80021e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0210 	orr.w	r2, r2, #16
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	e000      	b.n	800132a <HAL_HCD_IRQHandler+0x206>
      return;
 8001328:	bf00      	nop
    }
  }
}
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_HCD_Start+0x16>
 8001342:	2302      	movs	r3, #2
 8001344:	e013      	b.n	800136e <HAL_HCD_Start+0x3e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fcf8 	bl	8005d48 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f004 ff18 	bl	8006194 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_HCD_Stop+0x16>
 8001388:	2302      	movs	r3, #2
 800138a:	e00d      	b.n	80013a8 <HAL_HCD_Stop+0x32>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f005 fa5f 	bl	800685c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 febf 	bl	8006140 <USB_ResetPort>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	335c      	adds	r3, #92	; 0x5c
 80013e8:	781b      	ldrb	r3, [r3, #0]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	334c      	adds	r3, #76	; 0x4c
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f004 ff01 	bl	8006234 <USB_GetCurrentFrame>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fedc 	bl	8006206 <USB_GetHostSpeed>
 800144e:	4603      	mov	r3, r0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4413      	add	r3, r2
 800147a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b04      	cmp	r3, #4
 8001486:	d119      	bne.n	80014bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4413      	add	r3, r2
 8001490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001494:	461a      	mov	r2, r3
 8001496:	2304      	movs	r3, #4
 8001498:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	0151      	lsls	r1, r2, #5
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	440a      	add	r2, r1
 80014b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	60d3      	str	r3, [r2, #12]
 80014ba:	e095      	b.n	80015e8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d109      	bne.n	80014e6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014de:	461a      	mov	r2, r3
 80014e0:	2320      	movs	r3, #32
 80014e2:	6093      	str	r3, [r2, #8]
 80014e4:	e080      	b.n	80015e8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d134      	bne.n	8001566 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4413      	add	r3, r2
 8001504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	0151      	lsls	r1, r2, #5
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	440a      	add	r2, r1
 8001512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	335d      	adds	r3, #93	; 0x5d
 800152c:	2205      	movs	r2, #5
 800152e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153c:	461a      	mov	r2, r3
 800153e:	2310      	movs	r3, #16
 8001540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154e:	461a      	mov	r2, r3
 8001550:	2308      	movs	r3, #8
 8001552:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f005 f87d 	bl	800665e <USB_HC_Halt>
 8001564:	e040      	b.n	80015e8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d134      	bne.n	80015e8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	0151      	lsls	r1, r2, #5
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	440a      	add	r2, r1
 8001594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 f858 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ba:	461a      	mov	r2, r3
 80015bc:	2310      	movs	r3, #16
 80015be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	335d      	adds	r3, #93	; 0x5d
 80015d0:	2208      	movs	r2, #8
 80015d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e0:	461a      	mov	r2, r3
 80015e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fe:	d122      	bne.n	8001646 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4413      	add	r3, r2
 8001608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	440a      	add	r2, r1
 8001616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f005 f817 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4413      	add	r3, r2
 8001638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800163c:	461a      	mov	r2, r3
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001644:	e277      	b.n	8001b36 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4413      	add	r3, r2
 800164e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	f040 80a1 	bne.w	80017a0 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	335d      	adds	r3, #93	; 0x5d
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	3358      	adds	r3, #88	; 0x58
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	461a      	mov	r2, r3
 8001694:	2301      	movs	r3, #1
 8001696:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	333f      	adds	r3, #63	; 0x3f
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333f      	adds	r3, #63	; 0x3f
 80016be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d121      	bne.n	8001708 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 ffb5 	bl	800665e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001700:	461a      	mov	r2, r3
 8001702:	2310      	movs	r3, #16
 8001704:	6093      	str	r3, [r2, #8]
 8001706:	e034      	b.n	8001772 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	333f      	adds	r3, #63	; 0x3f
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d129      	bne.n	8001772 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	0151      	lsls	r1, r2, #5
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	440a      	add	r2, r1
 8001734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800173c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	335c      	adds	r3, #92	; 0x5c
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	335c      	adds	r3, #92	; 0x5c
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4601      	mov	r1, r0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f007 ff4d 	bl	800960c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3350      	adds	r3, #80	; 0x50
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f083 0301 	eor.w	r3, r3, #1
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3350      	adds	r3, #80	; 0x50
 800179a:	4602      	mov	r2, r0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	e1ca      	b.n	8001b36 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 80f1 	bne.w	800199a <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	0151      	lsls	r1, r2, #5
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	440a      	add	r2, r1
 80017ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017d2:	f023 0302 	bic.w	r3, r3, #2
 80017d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	335d      	adds	r3, #93	; 0x5d
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d10a      	bne.n	8001804 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	335c      	adds	r3, #92	; 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e0b0      	b.n	8001966 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	335d      	adds	r3, #93	; 0x5d
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10a      	bne.n	8001830 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	335c      	adds	r3, #92	; 0x5c
 800182a:	2205      	movs	r2, #5
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e09a      	b.n	8001966 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	335d      	adds	r3, #93	; 0x5d
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d00a      	beq.n	800185c <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	335d      	adds	r3, #93	; 0x5d
 8001856:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001858:	2b08      	cmp	r3, #8
 800185a:	d156      	bne.n	800190a <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	3358      	adds	r3, #88	; 0x58
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1c59      	adds	r1, r3, #1
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4403      	add	r3, r0
 800187e:	3358      	adds	r3, #88	; 0x58
 8001880:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3358      	adds	r3, #88	; 0x58
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d914      	bls.n	80018c2 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3358      	adds	r3, #88	; 0x58
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	335c      	adds	r3, #92	; 0x5c
 80018bc:	2204      	movs	r2, #4
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e009      	b.n	80018d6 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	335c      	adds	r3, #92	; 0x5c
 80018d2:	2202      	movs	r2, #2
 80018d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001902:	461a      	mov	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02d      	b.n	8001966 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	335d      	adds	r3, #93	; 0x5d
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d122      	bne.n	8001966 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	335c      	adds	r3, #92	; 0x5c
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800194a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	461a      	mov	r2, r3
 8001974:	2302      	movs	r3, #2
 8001976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	b2d8      	uxtb	r0, r3
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	335c      	adds	r3, #92	; 0x5c
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4601      	mov	r1, r0
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f007 fe3a 	bl	800960c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001998:	e0cd      	b.n	8001b36 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d13e      	bne.n	8001a2e <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	0151      	lsls	r1, r2, #5
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	440a      	add	r2, r1
 80019c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	3358      	adds	r3, #88	; 0x58
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	1c59      	adds	r1, r3, #1
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4403      	add	r3, r0
 80019f2:	3358      	adds	r3, #88	; 0x58
 80019f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	335d      	adds	r3, #93	; 0x5d
 8001a06:	2206      	movs	r2, #6
 8001a08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 fe22 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a26:	461a      	mov	r2, r3
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	6093      	str	r3, [r2, #8]
}
 8001a2c:	e083      	b.n	8001b36 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d178      	bne.n	8001b36 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	333f      	adds	r3, #63	; 0x3f
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d122      	bne.n	8001aa0 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3358      	adds	r3, #88	; 0x58
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fde0 	bl	800665e <USB_HC_Halt>
 8001a9e:	e041      	b.n	8001b24 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	333f      	adds	r3, #63	; 0x3f
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	333f      	adds	r3, #63	; 0x3f
 8001ac6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d12b      	bne.n	8001b24 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3358      	adds	r3, #88	; 0x58
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	335d      	adds	r3, #93	; 0x5d
 8001af0:	2203      	movs	r2, #3
 8001af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	0151      	lsls	r1, r2, #5
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	440a      	add	r2, r1
 8001b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fd9d 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	015a      	lsls	r2, r3, #5
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b30:	461a      	mov	r2, r3
 8001b32:	2310      	movs	r3, #16
 8001b34:	6093      	str	r3, [r2, #8]
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d119      	bne.n	8001ba2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	0151      	lsls	r1, r2, #5
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	440a      	add	r2, r1
 8001b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001ba0:	e31e      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d141      	bne.n	8001c3c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	333d      	adds	r3, #61	; 0x3d
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	f040 82ff 	bne.w	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	333d      	adds	r3, #61	; 0x3d
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	335c      	adds	r3, #92	; 0x5c
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	0151      	lsls	r1, r2, #5
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	440a      	add	r2, r1
 8001c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fd12 	bl	800665e <USB_HC_Halt>
}
 8001c3a:	e2d1      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d13f      	bne.n	8001cd2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	335d      	adds	r3, #93	; 0x5d
 8001c62:	2204      	movs	r2, #4
 8001c64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	333d      	adds	r3, #61	; 0x3d
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	3358      	adds	r3, #88	; 0x58
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	0151      	lsls	r1, r2, #5
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	440a      	add	r2, r1
 8001ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 fcd0 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	6093      	str	r3, [r2, #8]
}
 8001cd0:	e286      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d122      	bne.n	8001d30 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	0151      	lsls	r1, r2, #5
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	440a      	add	r2, r1
 8001d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fca2 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	461a      	mov	r2, r3
 8001d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2c:	6093      	str	r3, [r2, #8]
}
 8001d2e:	e257      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d135      	bne.n	8001db2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3358      	adds	r3, #88	; 0x58
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	0151      	lsls	r1, r2, #5
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	440a      	add	r2, r1
 8001d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fc6a 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	461a      	mov	r2, r3
 8001d98:	2301      	movs	r3, #1
 8001d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	335d      	adds	r3, #93	; 0x5d
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
}
 8001db0:	e216      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d12b      	bne.n	8001e20 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	0151      	lsls	r1, r2, #5
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	440a      	add	r2, r1
 8001df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 fc2a 	bl	800665e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	335d      	adds	r3, #93	; 0x5d
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	701a      	strb	r2, [r3, #0]
}
 8001e1e:	e1df      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d135      	bne.n	8001ea2 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3358      	adds	r3, #88	; 0x58
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	335d      	adds	r3, #93	; 0x5d
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	0151      	lsls	r1, r2, #5
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	440a      	add	r2, r1
 8001e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 fbe8 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	6093      	str	r3, [r2, #8]
}
 8001ea0:	e19e      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d12b      	bne.n	8001f10 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	0151      	lsls	r1, r2, #5
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	440a      	add	r2, r1
 8001ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 fbbb 	bl	800665e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	335d      	adds	r3, #93	; 0x5d
 8001ef8:	2206      	movs	r2, #6
 8001efa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	6093      	str	r3, [r2, #8]
}
 8001f0e:	e167      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d135      	bne.n	8001f94 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0151      	lsls	r1, r2, #5
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fb83 	bl	800665e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2310      	movs	r3, #16
 8001f68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	461a      	mov	r2, r3
 8001f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	335d      	adds	r3, #93	; 0x5d
 8001f8e:	2208      	movs	r2, #8
 8001f90:	701a      	strb	r2, [r3, #0]
}
 8001f92:	e125      	b.n	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	f040 811a 	bne.w	80021e0 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	0151      	lsls	r1, r2, #5
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc6:	f023 0302 	bic.w	r3, r3, #2
 8001fca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	335d      	adds	r3, #93	; 0x5d
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d137      	bne.n	8002052 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	335c      	adds	r3, #92	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	333f      	adds	r3, #63	; 0x3f
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d00b      	beq.n	8002024 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	333f      	adds	r3, #63	; 0x3f
 800201c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800201e:	2b03      	cmp	r3, #3
 8002020:	f040 80c5 	bne.w	80021ae <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3351      	adds	r3, #81	; 0x51
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2d8      	uxtb	r0, r3
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3351      	adds	r3, #81	; 0x51
 800204c:	4602      	mov	r2, r0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e0ad      	b.n	80021ae <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	335d      	adds	r3, #93	; 0x5d
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d10a      	bne.n	800207e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	335c      	adds	r3, #92	; 0x5c
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e097      	b.n	80021ae <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	335d      	adds	r3, #93	; 0x5d
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d10a      	bne.n	80020aa <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	335c      	adds	r3, #92	; 0x5c
 80020a4:	2202      	movs	r2, #2
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e081      	b.n	80021ae <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10a      	bne.n	80020d6 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2205      	movs	r2, #5
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e06b      	b.n	80021ae <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d00a      	beq.n	8002102 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335d      	adds	r3, #93	; 0x5d
 80020fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d155      	bne.n	80021ae <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3358      	adds	r3, #88	; 0x58
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c59      	adds	r1, r3, #1
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4403      	add	r3, r0
 8002124:	3358      	adds	r3, #88	; 0x58
 8002126:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	3358      	adds	r3, #88	; 0x58
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d914      	bls.n	8002168 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	3358      	adds	r3, #88	; 0x58
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	335c      	adds	r3, #92	; 0x5c
 8002162:	2204      	movs	r2, #4
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e009      	b.n	800217c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	2202      	movs	r2, #2
 800217a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4601      	mov	r1, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f007 fa16 	bl	800960c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	0c5b      	lsrs	r3, r3, #17
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d003      	beq.n	800222c <HCD_RXQLVL_IRQHandler+0x44>
 8002224:	2b05      	cmp	r3, #5
 8002226:	f000 8082 	beq.w	800232e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800222a:	e083      	b.n	8002334 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07f      	beq.n	8002332 <HCD_RXQLVL_IRQHandler+0x14a>
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3344      	adds	r3, #68	; 0x44
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d074      	beq.n	8002332 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3344      	adds	r3, #68	; 0x44
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	b292      	uxth	r2, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f003 fe35 	bl	8005ed2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3344      	adds	r3, #68	; 0x44
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	18d1      	adds	r1, r2, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4403      	add	r3, r0
 800228c:	3344      	adds	r3, #68	; 0x44
 800228e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	334c      	adds	r3, #76	; 0x4c
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	18d1      	adds	r1, r2, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4403      	add	r3, r0
 80022b4:	334c      	adds	r3, #76	; 0x4c
 80022b6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HCD_RXQLVL_IRQHandler+0x154>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d031      	beq.n	8002332 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2d8      	uxtb	r0, r3
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	3350      	adds	r3, #80	; 0x50
 8002328:	4602      	mov	r2, r0
 800232a:	701a      	strb	r2, [r3, #0]
      break;
 800232c:	e001      	b.n	8002332 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002332:	bf00      	nop
  }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	1ff80000 	.word	0x1ff80000

08002340 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800236c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d113      	bne.n	80023a0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10a      	bne.n	8002398 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002390:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f007 f91e 	bl	80095d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d147      	bne.n	800243a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d129      	bne.n	8002410 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d113      	bne.n	80023ec <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ce:	d106      	bne.n	80023de <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fe78 	bl	80060cc <USB_InitFSLSPClkSel>
 80023dc:	e011      	b.n	8002402 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fe71 	bl	80060cc <USB_InitFSLSPClkSel>
 80023ea:	e00a      	b.n	8002402 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023fa:	461a      	mov	r2, r3
 80023fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002400:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f007 f910 	bl	8009628 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f007 f8e3 	bl	80095d4 <HAL_HCD_Connect_Callback>
 800240e:	e014      	b.n	800243a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f007 f917 	bl	8009644 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002424:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002428:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b20      	cmp	r3, #32
 8002442:	d103      	bne.n	800244c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f043 0320 	orr.w	r3, r3, #32
 800244a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e081      	b.n	8002576 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f006 f9f4 	bl	8008874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e006      	b.n	80024e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d104      	bne.n	80024fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	ea42 0103 	orr.w	r1, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	021a      	lsls	r2, r3, #8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69d9      	ldr	r1, [r3, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b20      	cmp	r3, #32
 8002592:	d138      	bne.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800259e:	2302      	movs	r3, #2
 80025a0:	e032      	b.n	8002608 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2224      	movs	r2, #36	; 0x24
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	d139      	bne.n	800269e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002634:	2302      	movs	r3, #2
 8002636:	e033      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002666:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0af      	b.n	800281e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f006 f97a 	bl	80089cc <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e00a      	b.n	800270c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3304      	adds	r3, #4
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	d9f1      	bls.n	80026f6 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_LCD_Init+0x17c>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6851      	ldr	r1, [r2, #4]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	69d2      	ldr	r2, [r2, #28]
 8002746:	4311      	orrs	r1, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6a12      	ldr	r2, [r2, #32]
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6992      	ldr	r2, [r2, #24]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	430b      	orrs	r3, r1
 8002760:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f862 	bl	800282c <LCD_WaitForSynchro>
 8002768:	4603      	mov	r3, r0
 800276a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_LCD_Init+0xca>
  {
    return status;
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	e053      	b.n	800281e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027ae:	f7fd fef7 	bl	80005a0 <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80027b4:	e00c      	b.n	80027d0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80027b6:	f7fd fef3 	bl	80005a0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	d904      	bls.n	80027d0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2208      	movs	r2, #8
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e026      	b.n	800281e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d1eb      	bne.n	80027b6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027de:	f7fd fedf 	bl	80005a0 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80027e4:	e00c      	b.n	8002800 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80027e6:	f7fd fedb 	bl	80005a0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f4:	d904      	bls.n	8002800 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2210      	movs	r2, #16
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e00e      	b.n	800281e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b10      	cmp	r3, #16
 800280c:	d1eb      	bne.n	80027e6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	fc00000e 	.word	0xfc00000e

0800282c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002834:	f7fd feb4 	bl	80005a0 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800283a:	e00c      	b.n	8002856 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800283c:	f7fd feb0 	bl	80005a0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284a:	d904      	bls.n	8002856 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e007      	b.n	8002866 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d1eb      	bne.n	800283c <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <HAL_PWREx_GetVoltageRange+0x18>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289a:	d130      	bne.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a8:	d038      	beq.n	800291c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2232      	movs	r2, #50	; 0x32
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d0:	e002      	b.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e4:	d102      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f2      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f8:	d110      	bne.n	800291c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e00f      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d007      	beq.n	800291c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000
 8002930:	20000028 	.word	0x20000028
 8002934:	431bde83 	.word	0x431bde83

08002938 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PWREx_EnableVddUSB+0x1c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002946:	6053      	str	r3, [r2, #4]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7fd fe1e 	bl	80005a0 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e06f      	b.n	8002a50 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_QSPI_Init+0x28>
 800297c:	2302      	movs	r3, #2
 800297e:	e067      	b.n	8002a50 <HAL_QSPI_Init+0xf8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f006 fa1f 	bl	8008de0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80029a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f858 	bl	8002a5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	021a      	lsls	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2120      	movs	r1, #32
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f850 	bl	8002a78 <QSPI_WaitFlagStateUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80029dc:	7afb      	ldrb	r3, [r7, #11]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d131      	bne.n	8002a46 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	f023 0310 	bic.w	r3, r3, #16
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6852      	ldr	r2, [r2, #4]
 80029f4:	0611      	lsls	r1, r2, #24
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_QSPI_Init+0x100>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6912      	ldr	r2, [r2, #16]
 8002a12:	0411      	lsls	r1, r2, #16
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6952      	ldr	r2, [r2, #20]
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6992      	ldr	r2, [r2, #24]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	ffe0f8fe 	.word	0xffe0f8fe

08002a5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a88:	e01a      	b.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d016      	beq.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fd fd85 	bl	80005a0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00e      	b.n	8002ade <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1d6      	bne.n	8002a8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e39d      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	4ba4      	ldr	r3, [pc, #656]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b04:	4ba1      	ldr	r3, [pc, #644]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80e1 	beq.w	8002cde <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4a>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f040 8088 	bne.w	8002c3a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 8084 	bne.w	8002c3a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b32:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e375      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_RCC_OscConfig+0x7c>
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b62:	e005      	b.n	8002b70 <HAL_RCC_OscConfig+0x88>
 8002b64:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d223      	bcs.n	8002bbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fd19 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e356      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b88:	4b80      	ldr	r3, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7f      	ldr	r2, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	497a      	ldr	r1, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba6:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	4975      	ldr	r1, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
 8002bba:	e022      	b.n	8002c02 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbc:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	496d      	ldr	r1, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4968      	ldr	r1, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fcdc 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e319      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c02:	f000 fc03 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x2a8>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1e:	4a5d      	ldr	r2, [pc, #372]	; (8002d94 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c22:	4b5d      	ldr	r3, [pc, #372]	; (8002d98 <HAL_RCC_OscConfig+0x2b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc6e 	bl	8000508 <HAL_InitTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d052      	beq.n	8002cdc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	e2fd      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d032      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c42:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a51      	ldr	r2, [pc, #324]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fd fca7 	bl	80005a0 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fd fca3 	bl	80005a0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e2e6      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c74:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a44      	ldr	r2, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c7a:	f043 0308 	orr.w	r3, r3, #8
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	493f      	ldr	r1, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	493a      	ldr	r1, [pc, #232]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e01a      	b.n	8002cde <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fc74 	bl	80005a0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cbc:	f7fd fc70 	bl	80005a0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e2b3      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x1d4>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d074      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x214>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d10e      	bne.n	8002d14 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d064      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2ea>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d160      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e290      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x244>
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e01d      	b.n	8002d68 <HAL_RCC_OscConfig+0x280>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x268>
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x280>
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01c      	beq.n	8002daa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fd fc16 	bl	80005a0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d76:	e011      	b.n	8002d9c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fd fc12 	bl	80005a0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d90a      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e255      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08009cb0 	.word	0x08009cb0
 8002d94:	20000028 	.word	0x20000028
 8002d98:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9c:	4bae      	ldr	r3, [pc, #696]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0e7      	beq.n	8002d78 <HAL_RCC_OscConfig+0x290>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fd fbf9 	bl	80005a0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db2:	f7fd fbf5 	bl	80005a0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e238      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc4:	4ba4      	ldr	r3, [pc, #656]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2ca>
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d060      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x30a>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d119      	bne.n	8002e20 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d116      	bne.n	8002e20 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df2:	4b99      	ldr	r3, [pc, #612]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x322>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e215      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b93      	ldr	r3, [pc, #588]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	498f      	ldr	r1, [pc, #572]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1e:	e040      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e28:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a8a      	ldr	r2, [pc, #552]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fd fbb4 	bl	80005a0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fbb0 	bl	80005a0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1f3      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4e:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	497b      	ldr	r1, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
 8002e6e:	e018      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e70:	4b79      	ldr	r3, [pc, #484]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a78      	ldr	r2, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fd fb90 	bl	80005a0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e84:	f7fd fb8c 	bl	80005a0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1cf      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e96:	4b70      	ldr	r3, [pc, #448]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fb6b 	bl	80005a0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fd fb67 	bl	80005a0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1aa      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee0:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ef      	beq.n	8002ece <HAL_RCC_OscConfig+0x3e6>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fd fb4e 	bl	80005a0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fd fb4a 	bl	80005a0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e18d      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ef      	bne.n	8002f08 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a5 	beq.w	8003080 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
 8002f52:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_RCC_OscConfig+0x574>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x574>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3a      	ldr	r2, [pc, #232]	; (800305c <HAL_RCC_OscConfig+0x574>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fb11 	bl	80005a0 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fd fb0d 	bl	80005a0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e150      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_OscConfig+0x574>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d108      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d2>
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb8:	e024      	b.n	8003004 <HAL_RCC_OscConfig+0x51c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d110      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4fc>
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x51c>
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d016      	beq.n	800303a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fd fac8 	bl	80005a0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fd fac4 	bl	80005a0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e105      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x570>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ed      	beq.n	8003014 <HAL_RCC_OscConfig+0x52c>
 8003038:	e019      	b.n	800306e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fd fab1 	bl	80005a0 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	e00e      	b.n	8003060 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fd faad 	bl	80005a0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d905      	bls.n	8003060 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0ee      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003060:	4b77      	ldr	r3, [pc, #476]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e9      	bne.n	8003042 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	4a71      	ldr	r2, [pc, #452]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80d5 	beq.w	8003234 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	f000 808e 	beq.w	80031ae <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	2b02      	cmp	r3, #2
 8003098:	d15b      	bne.n	8003152 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b69      	ldr	r3, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a68      	ldr	r2, [pc, #416]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fd fa7b 	bl	80005a0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fd fa77 	bl	80005a0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0ba      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	4b5f      	ldr	r3, [pc, #380]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_RCC_OscConfig+0x75c>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030dc:	3a01      	subs	r2, #1
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e6:	0212      	lsls	r2, r2, #8
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0552      	lsls	r2, r2, #21
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0652      	lsls	r2, r2, #25
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003106:	0912      	lsrs	r2, r2, #4
 8003108:	0452      	lsls	r2, r2, #17
 800310a:	430a      	orrs	r2, r1
 800310c:	494c      	ldr	r1, [pc, #304]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 800310e:	4313      	orrs	r3, r2
 8003110:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003128:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fd fa39 	bl	80005a0 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fd fa35 	bl	80005a0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e078      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x64a>
 8003150:	e070      	b.n	8003234 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 800317c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fd fa0b 	bl	80005a0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fd fa07 	bl	80005a0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e04a      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x6a6>
 80031ac:	e042      	b.n	8003234 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03d      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_RCC_OscConfig+0x758>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d130      	bne.n	8003230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	3b01      	subs	r3, #1
 80031da:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d127      	bne.n	8003230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d11f      	bne.n	8003230 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031fa:	2a07      	cmp	r2, #7
 80031fc:	bf14      	ite	ne
 80031fe:	2201      	movne	r2, #1
 8003200:	2200      	moveq	r2, #0
 8003202:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	3b01      	subs	r3, #1
 8003216:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d109      	bne.n	8003230 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4961      	ldr	r1, [pc, #388]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04c      	beq.n	8003332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e09e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e092      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e086      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e07e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	493f      	ldr	r1, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fd f94d 	bl	80005a0 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fd f949 	bl	80005a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e066      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 020c 	and.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	492c      	ldr	r1, [pc, #176]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d210      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	4924      	ldr	r1, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e036      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4918      	ldr	r1, [pc, #96]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033be:	f000 f825 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa21 f303 	lsr.w	r3, r1, r3
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f890 	bl	8000508 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ec:	7afb      	ldrb	r3, [r7, #11]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	08009cb0 	.word	0x08009cb0
 8003404:	20000028 	.word	0x20000028
 8003408:	20000000 	.word	0x20000000

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d121      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11e      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e004      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 8003492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d133      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	617b      	str	r3, [r7, #20]
      break;
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	3301      	adds	r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	fb02 f203 	mul.w	r2, r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0e5b      	lsrs	r3, r3, #25
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003502:	69bb      	ldr	r3, [r7, #24]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3724      	adds	r7, #36	; 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40021000 	.word	0x40021000
 8003514:	08009cc8 	.word	0x08009cc8
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000028 	.word	0x20000028

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4601      	mov	r1, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	08009cc0 	.word	0x08009cc0

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003568:	f7ff ffda 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800356c:	4601      	mov	r1, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0adb      	lsrs	r3, r3, #11
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	08009cc0 	.word	0x08009cc0

08003590 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_EnableCSS+0x1c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_RCC_EnableCSS+0x1c>)
 800359a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff f952 	bl	8002870 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
 80035ce:	e014      	b.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e8:	f7ff f942 	bl	8002870 <HAL_PWREx_GetVoltageRange>
 80035ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d10b      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d919      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2ba0      	cmp	r3, #160	; 0xa0
 800360c:	d902      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e013      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e010      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d902      	bls.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e00a      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d102      	bne.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e004      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d101      	bne.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003638:	2301      	movs	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 0207 	bic.w	r2, r3, #7
 8003644:	4909      	ldr	r1, [pc, #36]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2300      	movs	r3, #0
 800367e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03f      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003694:	d01c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369a:	d802      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80036a0:	e01f      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80036a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ac:	d01c      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80036ae:	e018      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b0:	4b85      	ldr	r3, [pc, #532]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a84      	ldr	r2, [pc, #528]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036bc:	e015      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ff31 	bl	800452c <RCCEx_PLLSAI1_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3320      	adds	r3, #32
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 f818 	bl	800470c <RCCEx_PLLSAI2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	74fb      	strb	r3, [r7, #19]
      break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80036e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f0:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036fe:	4972      	ldr	r1, [pc, #456]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003706:	e001      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003720:	d01c      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003726:	d802      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800372c:	e01f      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800372e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003732:	d003      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003738:	d01c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800373a:	e018      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800373c:	4b62      	ldr	r3, [pc, #392]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a61      	ldr	r2, [pc, #388]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003748:	e015      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 feeb 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800375a:	e00c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3320      	adds	r3, #32
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f000 ffd2 	bl	800470c <RCCEx_PLLSAI2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800376c:	e003      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	74fb      	strb	r3, [r7, #19]
      break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377c:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378a:	494f      	ldr	r1, [pc, #316]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003792:	e001      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a0 	beq.w	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e8:	f7fc feda 	bl	80005a0 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ee:	e009      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fc fed6 	bl	80005a0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d902      	bls.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	74fb      	strb	r3, [r7, #19]
        break;
 8003802:	e005      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ef      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d15c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003820:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	d019      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fc fe95 	bl	80005a0 <HAL_GetTick>
 8003876:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003878:	e00b      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fc fe91 	bl	80005a0 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d902      	bls.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	74fb      	strb	r3, [r7, #19]
            break;
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ec      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	4904      	ldr	r1, [pc, #16]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038be:	e009      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d4:	7c7b      	ldrb	r3, [r7, #17]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b9e      	ldr	r3, [pc, #632]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4a9d      	ldr	r2, [pc, #628]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f2:	4b98      	ldr	r3, [pc, #608]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f023 0203 	bic.w	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	4994      	ldr	r1, [pc, #592]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003914:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f023 020c 	bic.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	498c      	ldr	r1, [pc, #560]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003936:	4b87      	ldr	r3, [pc, #540]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4983      	ldr	r1, [pc, #524]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003958:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	497b      	ldr	r1, [pc, #492]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800397a:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	4972      	ldr	r1, [pc, #456]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800399c:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	496a      	ldr	r1, [pc, #424]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039be:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	4961      	ldr	r1, [pc, #388]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e0:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	4959      	ldr	r1, [pc, #356]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a02:	4b54      	ldr	r3, [pc, #336]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	4950      	ldr	r1, [pc, #320]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	4948      	ldr	r1, [pc, #288]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a46:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	493f      	ldr	r1, [pc, #252]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d028      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a76:	4937      	ldr	r1, [pc, #220]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a88:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a92:	60d3      	str	r3, [r2, #12]
 8003a94:	e011      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd40 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	491f      	ldr	r1, [pc, #124]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af0:	60d3      	str	r3, [r2, #12]
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fd11 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02b      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a02      	ldr	r2, [pc, #8]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4e:	60d3      	str	r3, [r2, #12]
 8003b50:	e014      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fcdf 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02f      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	4928      	ldr	r1, [pc, #160]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2102      	movs	r1, #2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fcbc 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d014      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	74bb      	strb	r3, [r7, #18]
 8003bc2:	e011      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3320      	adds	r3, #32
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd99 	bl	800470c <RCCEx_PLLSAI2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c02:	490d      	ldr	r1, [pc, #52]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c26:	4904      	ldr	r1, [pc, #16]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4e:	d137      	bne.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c50:	4bb8      	ldr	r3, [pc, #736]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d014      	beq.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c68:	d01e      	beq.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8003c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003c70:	f000 bc53 	b.w	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c74:	4baf      	ldr	r3, [pc, #700]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	f040 8446 	bne.w	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8003c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c88:	61fb      	str	r3, [r7, #28]
      break;
 8003c8a:	f000 bc41 	b.w	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c8e:	4ba9      	ldr	r3, [pc, #676]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f040 843b 	bne.w	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8003c9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003ca2:	61fb      	str	r3, [r7, #28]
      break;
 8003ca4:	f000 bc36 	b.w	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ca8:	4ba2      	ldr	r3, [pc, #648]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb4:	f040 8430 	bne.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8003cb8:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003cba:	61fb      	str	r3, [r7, #28]
      break;
 8003cbc:	f000 bc2c 	b.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc0:	4b9c      	ldr	r3, [pc, #624]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d023      	beq.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d02e      	beq.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d139      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003cd8:	4b96      	ldr	r3, [pc, #600]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d116      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003ce4:	4b93      	ldr	r3, [pc, #588]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8003cf0:	4b90      	ldr	r3, [pc, #576]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	e005      	b.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003cfc:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	4a8c      	ldr	r2, [pc, #560]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
      break;
 8003d16:	e01c      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d18:	4b86      	ldr	r3, [pc, #536]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d102      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8003d26:	4b86      	ldr	r3, [pc, #536]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d2a:	e012      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
      break;
 8003d30:	e00f      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d32:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8003d40:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003d42:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d44:	e005      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
      break;
 8003d50:	bf00      	nop
    }

    switch(PeriphClk)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	f000 8337 	beq.w	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d825      	bhi.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	f000 81df 	beq.w	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d80f      	bhi.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f000 8128 	beq.w	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d803      	bhi.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f000 80ec 	beq.w	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d7c:	e3cd      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	f000 8169 	beq.w	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f000 819a 	beq.w	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8003d8a:	e3c6      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	f000 82b3 	beq.w	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d803      	bhi.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f000 81fd 	beq.w	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8003d9c:	e3bd      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	f000 82cd 	beq.w	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da8:	f000 82ec 	beq.w	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8003dac:	e3b5      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db2:	f000 822d 	beq.w	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d811      	bhi.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d021      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d804      	bhi.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	f000 833e 	beq.w	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8003dd0:	e3a3      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d021      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003dde:	e39c      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	f000 8277 	beq.w	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d804      	bhi.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df2:	f000 8371 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8003df6:	e390      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dfc:	d011      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003dfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e02:	d00e      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003e04:	e389      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003e06:	69b9      	ldr	r1, [r7, #24]
 8003e08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e0c:	f000 fd58 	bl	80048c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e10:	61f8      	str	r0, [r7, #28]
      break;
 8003e12:	e382      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e1a:	f000 fd51 	bl	80048c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e1e:	61f8      	str	r0, [r7, #28]
      break;
 8003e20:	e37b      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003e22:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003e2c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e34:	d023      	beq.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8003e36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e40:	d04a      	beq.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8003e42:	e086      	b.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e44:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d17b      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	e005      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	4a31      	ldr	r2, [pc, #196]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61fb      	str	r3, [r7, #28]
          break;
 8003e7c:	e064      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e8a:	d15f      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e8c:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e98:	d158      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	fb02 f203 	mul.w	r2, r2, r3
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	3301      	adds	r3, #1
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0d5b      	lsrs	r3, r3, #21
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	61fb      	str	r3, [r7, #28]
          break;
 8003ed6:	e039      	b.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee4:	d134      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef2:	d12d      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efe:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	fb02 f203 	mul.w	r2, r2, r3
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	3301      	adds	r3, #1
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	0d5b      	lsrs	r3, r3, #21
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	3301      	adds	r3, #1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	61fb      	str	r3, [r7, #28]
          break;
 8003f30:	e00e      	b.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	0003d090 	.word	0x0003d090
 8003f3c:	08009cc8 	.word	0x08009cc8
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200
          break;
 8003f48:	bf00      	nop
 8003f4a:	e2e6      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f4c:	bf00      	nop
 8003f4e:	e2e4      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f50:	bf00      	nop
        break;
 8003f52:	e2e2      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f54:	4bac      	ldr	r3, [pc, #688]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d827      	bhi.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f85 	.word	0x08003f85
 8003f74:	08003f8d 	.word	0x08003f8d
 8003f78:	08003fa1 	.word	0x08003fa1
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7ff faf2 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8003f80:	61f8      	str	r0, [r7, #28]
          break;
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f84:	f7ff fa42 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8003f88:	61f8      	str	r0, [r7, #28]
          break;
 8003f8a:	e019      	b.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f8c:	4b9e      	ldr	r3, [pc, #632]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d10f      	bne.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8003f9a:	4b9c      	ldr	r3, [pc, #624]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003f9c:	61fb      	str	r3, [r7, #28]
          break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fa0:	4b99      	ldr	r3, [pc, #612]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d107      	bne.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8003fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb2:	61fb      	str	r3, [r7, #28]
          break;
 8003fb4:	e003      	b.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8003fb6:	bf00      	nop
 8003fb8:	e2af      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003fba:	bf00      	nop
 8003fbc:	e2ad      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003fbe:	bf00      	nop
        break;
 8003fc0:	e2ab      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003fc2:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d83a      	bhi.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	0800404b 	.word	0x0800404b
 8003fe4:	0800404b 	.word	0x0800404b
 8003fe8:	0800404b 	.word	0x0800404b
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	0800404b 	.word	0x0800404b
 8003ff4:	0800404b 	.word	0x0800404b
 8003ff8:	0800404b 	.word	0x0800404b
 8003ffc:	08004021 	.word	0x08004021
 8004000:	0800404b 	.word	0x0800404b
 8004004:	0800404b 	.word	0x0800404b
 8004008:	0800404b 	.word	0x0800404b
 800400c:	08004035 	.word	0x08004035
          frequency = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff fa92 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004014:	61f8      	str	r0, [r7, #28]
          break;
 8004016:	e01d      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8004018:	f7ff f9f8 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800401c:	61f8      	str	r0, [r7, #28]
          break;
 800401e:	e019      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004020:	4b79      	ldr	r3, [pc, #484]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d10f      	bne.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800402e:	4b77      	ldr	r3, [pc, #476]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004030:	61fb      	str	r3, [r7, #28]
          break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004034:	4b74      	ldr	r3, [pc, #464]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
          break;
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800404a:	bf00      	nop
 800404c:	e265      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800404e:	bf00      	nop
 8004050:	e263      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004052:	bf00      	nop
        break;
 8004054:	e261      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004060:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b10      	cmp	r3, #16
 8004066:	d00d      	beq.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004068:	2b10      	cmp	r3, #16
 800406a:	d802      	bhi.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004070:	e024      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004072:	2b20      	cmp	r3, #32
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004076:	2b30      	cmp	r3, #48	; 0x30
 8004078:	d012      	beq.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800407a:	e01f      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff fa5c 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004080:	61f8      	str	r0, [r7, #28]
          break;
 8004082:	e01b      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004084:	f7ff f9c2 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004088:	61f8      	str	r0, [r7, #28]
          break;
 800408a:	e017      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d10d      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800409c:	61fb      	str	r3, [r7, #28]
          break;
 800409e:	e00a      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d105      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
          break;
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80040b6:	bf00      	nop
 80040b8:	e22f      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80040ba:	bf00      	nop
        break;
 80040bc:	e22d      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80040be:	4b52      	ldr	r3, [pc, #328]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040c8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d00d      	beq.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d802      	bhi.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80040d8:	e024      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80040de:	2bc0      	cmp	r3, #192	; 0xc0
 80040e0:	d012      	beq.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80040e2:	e01f      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff fa28 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80040e8:	61f8      	str	r0, [r7, #28]
          break;
 80040ea:	e01b      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80040ec:	f7ff f98e 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80040f0:	61f8      	str	r0, [r7, #28]
          break;
 80040f2:	e017      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040f4:	4b44      	ldr	r3, [pc, #272]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d10d      	bne.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8004102:	4b42      	ldr	r3, [pc, #264]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004104:	61fb      	str	r3, [r7, #28]
          break;
 8004106:	e00a      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d105      	bne.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411a:	61fb      	str	r3, [r7, #28]
          break;
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800411e:	bf00      	nop
 8004120:	e1fb      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004122:	bf00      	nop
        break;
 8004124:	e1f9      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004130:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d010      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d802      	bhi.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004144:	e026      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8004146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414a:	d00b      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800414c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004150:	d012      	beq.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8004152:	e01f      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004154:	f7ff f9f0 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004158:	61f8      	str	r0, [r7, #28]
          break;
 800415a:	e01b      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 800415c:	f7ff f956 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004160:	61f8      	str	r0, [r7, #28]
          break;
 8004162:	e017      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d10d      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004174:	61fb      	str	r3, [r7, #28]
          break;
 8004176:	e00a      	b.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418a:	61fb      	str	r3, [r7, #28]
          break;
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800418e:	bf00      	nop
 8004190:	e1c3      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004192:	bf00      	nop
        break;
 8004194:	e1c1      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d010      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d802      	bhi.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 80041b4:	e026      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 80041b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ba:	d00b      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80041bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c0:	d012      	beq.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 80041c2:	e01f      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7ff f9b8 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
          break;
 80041ca:	e01b      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 80041cc:	f7ff f91e 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80041d0:	61f8      	str	r0, [r7, #28]
          break;
 80041d2:	e017      	b.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d10d      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80041e4:	61fb      	str	r3, [r7, #28]
          break;
 80041e6:	e00a      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d105      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	61fb      	str	r3, [r7, #28]
          break;
 80041fc:	e001      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80041fe:	bf00      	nop
 8004200:	e18b      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004202:	bf00      	nop
        break;
 8004204:	e189      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004210:	4bae      	ldr	r3, [pc, #696]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004222:	d02f      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004228:	d003      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800422a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422e:	d004      	beq.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8004230:	e050      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8004232:	f7ff f8eb 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004236:	61f8      	str	r0, [r7, #28]
          break;
 8004238:	e04c      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800423a:	4ba4      	ldr	r3, [pc, #656]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d043      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004246:	4ba1      	ldr	r3, [pc, #644]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004250:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	fb02 f203 	mul.w	r2, r2, r3
 800425a:	4b9c      	ldr	r3, [pc, #624]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	3301      	adds	r3, #1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800426c:	4b97      	ldr	r3, [pc, #604]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	0e5b      	lsrs	r3, r3, #25
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	3301      	adds	r3, #1
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	61fb      	str	r3, [r7, #28]
          break;
 8004282:	e024      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004284:	4b91      	ldr	r3, [pc, #580]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004290:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	fb02 f203 	mul.w	r2, r2, r3
 80042a4:	4b89      	ldr	r3, [pc, #548]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	3301      	adds	r3, #1
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80042b6:	4b85      	ldr	r3, [pc, #532]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	0e5b      	lsrs	r3, r3, #25
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	3301      	adds	r3, #1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	61fb      	str	r3, [r7, #28]
          break;
 80042cc:	e001      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 80042ce:	bf00      	nop
 80042d0:	e123      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80042d2:	bf00      	nop
        break;
 80042d4:	e121      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042d6:	4b7d      	ldr	r3, [pc, #500]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e0:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff f93c 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 80042ec:	61f8      	str	r0, [r7, #28]
        break;
 80042ee:	e114      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f0:	f7ff f88c 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80042f4:	61f8      	str	r0, [r7, #28]
        break;
 80042f6:	e110      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80042f8:	4b74      	ldr	r3, [pc, #464]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004302:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d009      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800430c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d000      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004316:	e011      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004318:	f7ff f90e 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800431c:	61f8      	str	r0, [r7, #28]
          break;
 800431e:	e00d      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004320:	f7ff f874 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8004324:	61f8      	str	r0, [r7, #28]
          break;
 8004326:	e009      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004328:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d101      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004336:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004338:	61fb      	str	r3, [r7, #28]
          break;
 800433a:	bf00      	nop
        break;
 800433c:	e0ed      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004348:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004350:	d009      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d000      	beq.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800435c:	e011      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 800435e:	f7ff f8eb 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004362:	61f8      	str	r0, [r7, #28]
          break;
 8004364:	e00d      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004366:	f7ff f851 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800436a:	61f8      	str	r0, [r7, #28]
          break;
 800436c:	e009      	b.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d101      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 800437c:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800437e:	61fb      	str	r3, [r7, #28]
          break;
 8004380:	bf00      	nop
        break;
 8004382:	e0ca      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004384:	4b51      	ldr	r3, [pc, #324]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800438e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d000      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80043a2:	e011      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7ff f8c8 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
          break;
 80043aa:	e00d      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 80043ac:	f7ff f82e 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80043b0:	61f8      	str	r0, [r7, #28]
          break;
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043b4:	4b45      	ldr	r3, [pc, #276]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d101      	bne.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 80043c2:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80043c4:	61fb      	str	r3, [r7, #28]
          break;
 80043c6:	bf00      	nop
        break;
 80043c8:	e0a7      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043ca:	4b40      	ldr	r3, [pc, #256]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80043de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043e2:	d802      	bhi.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 80043e8:	e02f      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 80043ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ee:	d012      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80043f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043f4:	d019      	beq.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80043f6:	e028      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7ff f89e 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
          break;
 80043fe:	e024      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d118      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 800440e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004412:	61fb      	str	r3, [r7, #28]
          break;
 8004414:	e014      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004416:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d10f      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004426:	61fb      	str	r3, [r7, #28]
          break;
 8004428:	e00c      	b.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800442a:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d107      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443c:	61fb      	str	r3, [r7, #28]
          break;
 800443e:	e003      	b.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004440:	bf00      	nop
 8004442:	e06a      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004444:	bf00      	nop
 8004446:	e068      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004448:	bf00      	nop
        break;
 800444a:	e066      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004456:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445e:	d010      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004464:	d802      	bhi.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 800446a:	e034      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 800446c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004470:	d012      	beq.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004476:	d019      	beq.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004478:	e02d      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800447a:	f7ff f85d 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800447e:	61f8      	str	r0, [r7, #28]
          break;
 8004480:	e029      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d118      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8004490:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004494:	61fb      	str	r3, [r7, #28]
          break;
 8004496:	e014      	b.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a4:	d10f      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80044a8:	61fb      	str	r3, [r7, #28]
          break;
 80044aa:	e00c      	b.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	61fb      	str	r3, [r7, #28]
          break;
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 80044c2:	bf00      	nop
 80044c4:	e029      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80044c6:	bf00      	nop
 80044c8:	e027      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	00f42400 	.word	0x00f42400
          break;
 80044d4:	bf00      	nop
        break;
 80044d6:	e020      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044e2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d004      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 80044f0:	e00d      	b.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7ff f821 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80044f6:	61f8      	str	r0, [r7, #28]
          break;
 80044f8:	e009      	b.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d101      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 800450a:	61fb      	str	r3, [r7, #28]
          break;
 800450c:	bf00      	nop
        break;
 800450e:	e004      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004518:	bf00      	nop
    }
  }

  return(frequency);
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	00f42400 	.word	0x00f42400

0800452c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800453a:	4b73      	ldr	r3, [pc, #460]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d018      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004546:	4b70      	ldr	r3, [pc, #448]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0203 	and.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d10d      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
       ||
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
       ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d044      	beq.n	80045fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e041      	b.n	80045fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d00c      	beq.n	800459a <RCCEx_PLLSAI1_Config+0x6e>
 8004580:	2b03      	cmp	r3, #3
 8004582:	d013      	beq.n	80045ac <RCCEx_PLLSAI1_Config+0x80>
 8004584:	2b01      	cmp	r3, #1
 8004586:	d120      	bne.n	80045ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11d      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004598:	e01a      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045aa:	e013      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045ac:	4b56      	ldr	r3, [pc, #344]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045c8:	e006      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
      break;
 80045ce:	e004      	b.n	80045da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80045d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045e0:	4b49      	ldr	r3, [pc, #292]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	430b      	orrs	r3, r1
 80045f6:	4944      	ldr	r1, [pc, #272]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d17d      	bne.n	80046fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800460c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460e:	f7fb ffc7 	bl	80005a0 <HAL_GetTick>
 8004612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004614:	e009      	b.n	800462a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004616:	f7fb ffc3 	bl	80005a0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d902      	bls.n	800462a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	73fb      	strb	r3, [r7, #15]
        break;
 8004628:	e005      	b.n	8004636 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ef      	bne.n	8004616 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d160      	bne.n	80046fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d111      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004642:	4b31      	ldr	r3, [pc, #196]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800464a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	0211      	lsls	r1, r2, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68d2      	ldr	r2, [r2, #12]
 8004658:	0912      	lsrs	r2, r2, #4
 800465a:	0452      	lsls	r2, r2, #17
 800465c:	430a      	orrs	r2, r1
 800465e:	492a      	ldr	r1, [pc, #168]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	610b      	str	r3, [r1, #16]
 8004664:	e027      	b.n	80046b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d112      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004674:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6892      	ldr	r2, [r2, #8]
 800467c:	0211      	lsls	r1, r2, #8
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6912      	ldr	r2, [r2, #16]
 8004682:	0852      	lsrs	r2, r2, #1
 8004684:	3a01      	subs	r2, #1
 8004686:	0552      	lsls	r2, r2, #21
 8004688:	430a      	orrs	r2, r1
 800468a:	491f      	ldr	r1, [pc, #124]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
 8004690:	e011      	b.n	80046b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800469a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	0211      	lsls	r1, r2, #8
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6952      	ldr	r2, [r2, #20]
 80046a8:	0852      	lsrs	r2, r2, #1
 80046aa:	3a01      	subs	r2, #1
 80046ac:	0652      	lsls	r2, r2, #25
 80046ae:	430a      	orrs	r2, r1
 80046b0:	4915      	ldr	r1, [pc, #84]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fb ff6d 	bl	80005a0 <HAL_GetTick>
 80046c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c8:	e009      	b.n	80046de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ca:	f7fb ff69 	bl	80005a0 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d902      	bls.n	80046de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	73fb      	strb	r3, [r7, #15]
          break;
 80046dc:	e005      	b.n	80046ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ef      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4903      	ldr	r1, [pc, #12]	; (8004708 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000

0800470c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800471a:	4b68      	ldr	r3, [pc, #416]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d018      	beq.n	8004758 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
       ||
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800473e:	4b5f      	ldr	r3, [pc, #380]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
       ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d044      	beq.n	80047dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	e041      	b.n	80047dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d00c      	beq.n	800477a <RCCEx_PLLSAI2_Config+0x6e>
 8004760:	2b03      	cmp	r3, #3
 8004762:	d013      	beq.n	800478c <RCCEx_PLLSAI2_Config+0x80>
 8004764:	2b01      	cmp	r3, #1
 8004766:	d120      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004768:	4b54      	ldr	r3, [pc, #336]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d11d      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004778:	e01a      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800477a:	4b50      	ldr	r3, [pc, #320]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478a:	e013      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478c:	4b4b      	ldr	r3, [pc, #300]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10f      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004798:	4b48      	ldr	r3, [pc, #288]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047a8:	e006      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      break;
 80047ae:	e004      	b.n	80047ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80047b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	430b      	orrs	r3, r1
 80047d6:	4939      	ldr	r1, [pc, #228]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d167      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a35      	ldr	r2, [pc, #212]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ee:	f7fb fed7 	bl	80005a0 <HAL_GetTick>
 80047f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f4:	e009      	b.n	800480a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047f6:	f7fb fed3 	bl	80005a0 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d902      	bls.n	800480a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	73fb      	strb	r3, [r7, #15]
        break;
 8004808:	e005      	b.n	8004816 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1ef      	bne.n	80047f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d14a      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d111      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004822:	4b26      	ldr	r3, [pc, #152]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6892      	ldr	r2, [r2, #8]
 8004832:	0211      	lsls	r1, r2, #8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68d2      	ldr	r2, [r2, #12]
 8004838:	0912      	lsrs	r2, r2, #4
 800483a:	0452      	lsls	r2, r2, #17
 800483c:	430a      	orrs	r2, r1
 800483e:	491f      	ldr	r1, [pc, #124]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	614b      	str	r3, [r1, #20]
 8004844:	e011      	b.n	800486a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800484e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	0211      	lsls	r1, r2, #8
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6912      	ldr	r2, [r2, #16]
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
 8004860:	0652      	lsls	r2, r2, #25
 8004862:	430a      	orrs	r2, r1
 8004864:	4915      	ldr	r1, [pc, #84]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fb fe93 	bl	80005a0 <HAL_GetTick>
 800487a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800487c:	e009      	b.n	8004892 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800487e:	f7fb fe8f 	bl	80005a0 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	73fb      	strb	r3, [r7, #15]
          break;
 8004890:	e005      	b.n	800489e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000

080048c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048dc:	d10c      	bne.n	80048f8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80048de:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048f0:	d112      	bne.n	8004918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048f2:	4b5e      	ldr	r3, [pc, #376]	; (8004a6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e00f      	b.n	8004918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d10b      	bne.n	8004918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004900:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800490a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004912:	d101      	bne.n	8004918 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004914:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8004916:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 809c 	bne.w	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800492a:	d003      	beq.n	8004934 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004932:	d12d      	bne.n	8004990 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 808b 	beq.w	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	3301      	adds	r3, #1
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004956:	4b44      	ldr	r3, [pc, #272]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004960:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004968:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8004974:	2311      	movs	r3, #17
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e001      	b.n	800497e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 800497a:	2307      	movs	r3, #7
 800497c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	fb02 f203 	mul.w	r2, r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800498e:	e063      	b.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12c      	bne.n	80049f0 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d05a      	beq.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	3301      	adds	r3, #1
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80049d4:	2311      	movs	r3, #17
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e001      	b.n	80049de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80049da:	2307      	movs	r3, #7
 80049dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	fb02 f203 	mul.w	r2, r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e033      	b.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d003      	beq.n	8004a00 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049fe:	d12b      	bne.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d025      	beq.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a0c:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	3301      	adds	r3, #1
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8004a3e:	2311      	movs	r3, #17
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e001      	b.n	8004a48 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8004a44:	2307      	movs	r3, #7
 8004a46:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	fb02 f203 	mul.w	r2, r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004a58:	69fb      	ldr	r3, [r7, #28]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3724      	adds	r7, #36	; 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	001fff68 	.word	0x001fff68

08004a70 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e14a      	b.n	8004d18 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f004 fa8e 	bl	8008fb8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f94d 	bl	8004d3c <SAI_Disable>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e135      	b.n	8004d18 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d007      	beq.n	8004acc <HAL_SAI_Init+0x5c>
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d302      	bcc.n	8004ac6 <HAL_SAI_Init+0x56>
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d006      	beq.n	8004ad2 <HAL_SAI_Init+0x62>
 8004ac4:	e008      	b.n	8004ad8 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
      break;
 8004aca:	e008      	b.n	8004ade <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004acc:	2310      	movs	r3, #16
 8004ace:	61fb      	str	r3, [r7, #28]
      break;
 8004ad0:	e005      	b.n	8004ade <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	61fb      	str	r3, [r7, #28]
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
      break;
 8004adc:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d81d      	bhi.n	8004b22 <HAL_SAI_Init+0xb2>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <HAL_SAI_Init+0x7c>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b03 	.word	0x08004b03
 8004af4:	08004b0b 	.word	0x08004b0b
 8004af8:	08004b13 	.word	0x08004b13
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
      break;
 8004b00:	e012      	b.n	8004b28 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b06:	617b      	str	r3, [r7, #20]
      break;
 8004b08:	e00e      	b.n	8004b28 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b0e:	617b      	str	r3, [r7, #20]
      break;
 8004b10:	e00a      	b.n	8004b28 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b16:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
      break;
 8004b20:	e002      	b.n	8004b28 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
      break;
 8004b26:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a7c      	ldr	r2, [pc, #496]	; (8004d20 <HAL_SAI_Init+0x2b0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_SAI_Init+0xcc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a7b      	ldr	r2, [pc, #492]	; (8004d24 <HAL_SAI_Init+0x2b4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d103      	bne.n	8004b44 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004b3c:	4a7a      	ldr	r2, [pc, #488]	; (8004d28 <HAL_SAI_Init+0x2b8>)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e002      	b.n	8004b4a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004b44:	4a79      	ldr	r2, [pc, #484]	; (8004d2c <HAL_SAI_Init+0x2bc>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d038      	beq.n	8004bc4 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a72      	ldr	r2, [pc, #456]	; (8004d20 <HAL_SAI_Init+0x2b0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_SAI_Init+0xf6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <HAL_SAI_Init+0x2b4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d105      	bne.n	8004b72 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b6a:	f7ff f867 	bl	8003c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b6e:	6138      	str	r0, [r7, #16]
 8004b70:	e004      	b.n	8004b7c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b76:	f7ff f861 	bl	8003c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b7a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	025b      	lsls	r3, r3, #9
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <HAL_SAI_Init+0x2c0>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <HAL_SAI_Init+0x2c0>)
 8004ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8004baa:	08da      	lsrs	r2, r3, #3
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	1aca      	subs	r2, r1, r3
 8004bb6:	2a08      	cmp	r2, #8
 8004bb8:	d904      	bls.n	8004bc4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_SAI_Init+0x164>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d109      	bne.n	8004be8 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_SAI_Init+0x170>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e001      	b.n	8004be4 <HAL_SAI_Init+0x174>
 8004be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e008      	b.n	8004bfa <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <HAL_SAI_Init+0x186>
 8004bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf4:	e000      	b.n	8004bf8 <HAL_SAI_Init+0x188>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_SAI_Init+0x2c4>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c1e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	431a      	orrs	r2, r3
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004c32:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c3e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	051b      	lsls	r3, r3, #20
 8004c46:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004c5e:	f023 030f 	bic.w	r3, r3, #15
 8004c62:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_SAI_Init+0x2c8>)
 8004c8e:	400b      	ands	r3, r1
 8004c90:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ca2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004ca8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004cae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004cb8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68d9      	ldr	r1, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004cd0:	400b      	ands	r3, r1
 8004cd2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40015404 	.word	0x40015404
 8004d24:	40015424 	.word	0x40015424
 8004d28:	40015400 	.word	0x40015400
 8004d2c:	40015800 	.word	0x40015800
 8004d30:	cccccccd 	.word	0xcccccccd
 8004d34:	ff05c010 	.word	0xff05c010
 8004d38:	fff88000 	.word	0xfff88000

08004d3c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004d3c:	b490      	push	{r4, r7}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <SAI_Disable+0x60>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <SAI_Disable+0x64>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0b1b      	lsrs	r3, r3, #12
 8004d50:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d64:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d10a      	bne.n	8004d80 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7e:	e007      	b.n	8004d90 <SAI_Disable+0x54>
    }
    count--;
 8004d80:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ea      	bne.n	8004d66 <SAI_Disable+0x2a>

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc90      	pop	{r4, r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000028 	.word	0x20000028
 8004da0:	95cbec1b 	.word	0x95cbec1b

08004da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07c      	b.n	8004eb0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f004 f9a7 	bl	8009124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df6:	d902      	bls.n	8004dfe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e002      	b.n	8004e04 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e0c:	d007      	beq.n	8004e1e <HAL_SPI_Init+0x7a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e16:	d002      	beq.n	8004e1e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e2e:	d903      	bls.n	8004e38 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
 8004e36:	e002      	b.n	8004e3e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	ea42 0103 	orr.w	r1, r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0204 	and.w	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e040      	b.n	8004f4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f004 fa5e 	bl	800939c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa04 	bl	8005304 <UART_SetConfig>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e022      	b.n	8004f4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fd40 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fdc7 	bl	8005ad8 <UART_CheckIdleState>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	f040 8081 	bne.w	8005070 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_UART_Transmit+0x26>
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e079      	b.n	8005072 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Transmit+0x38>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e072      	b.n	8005072 <HAL_UART_Transmit+0x11e>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fb fafe 	bl	80005a0 <HAL_GetTick>
 8004fa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	88fa      	ldrh	r2, [r7, #6]
 8004faa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	d108      	bne.n	8004fd2 <HAL_UART_Transmit+0x7e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	e003      	b.n	8004fda <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fda:	e02d      	b.n	8005038 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fdbb 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e03d      	b.n	8005072 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	881a      	ldrh	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005008:	b292      	uxth	r2, r2
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	3302      	adds	r3, #2
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	e008      	b.n	8005026 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	b292      	uxth	r2, r2
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3301      	adds	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1cb      	bne.n	8004fdc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fd87 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e009      	b.n	8005072 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80ff 	beq.w	80052c6 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
      }
      return;
 80050d0:	e0f9      	b.n	80052c6 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80c1 	beq.w	800525c <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80b6 	beq.w	800525c <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00e      	beq.n	8005118 <HAL_UART_IRQHandler+0x9c>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00e      	beq.n	8005140 <HAL_UART_IRQHandler+0xc4>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2202      	movs	r2, #2
 8005132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005138:	f043 0204 	orr.w	r2, r3, #4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <HAL_UART_IRQHandler+0xec>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2204      	movs	r2, #4
 800515a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005160:	f043 0202 	orr.w	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005192:	f043 0208 	orr.w	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8093 	beq.w	80052ca <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d004      	beq.n	80051e6 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d031      	beq.n	800524a <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fd03 	bl	8005bf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d123      	bne.n	8005242 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005208:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <HAL_UART_IRQHandler+0x25c>)
 8005218:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb fafd 	bl	800081e <HAL_DMA_Abort_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00e      	b.n	8005258 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f858 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00a      	b.n	8005258 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f854 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e006      	b.n	8005258 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f850 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005256:	e038      	b.n	80052ca <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	bf00      	nop
    return;
 800525a:	e036      	b.n	80052ca <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <HAL_UART_IRQHandler+0x206>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fd08 	bl	8005c90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005280:	e026      	b.n	80052d0 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
    }
    return;
 80052a6:	e012      	b.n	80052ce <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <HAL_UART_IRQHandler+0x254>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fcce 	bl	8005c5e <UART_EndTransmit_IT>
    return;
 80052c2:	bf00      	nop
 80052c4:	e004      	b.n	80052d0 <HAL_UART_IRQHandler+0x254>
      return;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <HAL_UART_IRQHandler+0x254>
    return;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_UART_IRQHandler+0x254>
    return;
 80052ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08005c33 	.word	0x08005c33

080052dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005308:	b088      	sub	sp, #32
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4bac      	ldr	r3, [pc, #688]	; (80055ec <UART_SetConfig+0x2e8>)
 800533a:	4013      	ands	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	430b      	orrs	r3, r1
 8005344:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4aa2      	ldr	r2, [pc, #648]	; (80055f0 <UART_SetConfig+0x2ec>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	4313      	orrs	r3, r2
 8005374:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a99      	ldr	r2, [pc, #612]	; (80055f4 <UART_SetConfig+0x2f0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d121      	bne.n	80053d8 <UART_SetConfig+0xd4>
 8005394:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <UART_SetConfig+0x2f4>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d816      	bhi.n	80053d0 <UART_SetConfig+0xcc>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0xa4>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053bf 	.word	0x080053bf
 80053b4:	080053cb 	.word	0x080053cb
 80053b8:	2301      	movs	r3, #1
 80053ba:	76fb      	strb	r3, [r7, #27]
 80053bc:	e0e8      	b.n	8005590 <UART_SetConfig+0x28c>
 80053be:	2302      	movs	r3, #2
 80053c0:	76fb      	strb	r3, [r7, #27]
 80053c2:	e0e5      	b.n	8005590 <UART_SetConfig+0x28c>
 80053c4:	2304      	movs	r3, #4
 80053c6:	76fb      	strb	r3, [r7, #27]
 80053c8:	e0e2      	b.n	8005590 <UART_SetConfig+0x28c>
 80053ca:	2308      	movs	r3, #8
 80053cc:	76fb      	strb	r3, [r7, #27]
 80053ce:	e0df      	b.n	8005590 <UART_SetConfig+0x28c>
 80053d0:	2310      	movs	r3, #16
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	bf00      	nop
 80053d6:	e0db      	b.n	8005590 <UART_SetConfig+0x28c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a87      	ldr	r2, [pc, #540]	; (80055fc <UART_SetConfig+0x2f8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d134      	bne.n	800544c <UART_SetConfig+0x148>
 80053e2:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <UART_SetConfig+0x2f4>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d829      	bhi.n	8005444 <UART_SetConfig+0x140>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xf4>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005439 	.word	0x08005439
 800540c:	08005445 	.word	0x08005445
 8005410:	08005445 	.word	0x08005445
 8005414:	08005445 	.word	0x08005445
 8005418:	08005433 	.word	0x08005433
 800541c:	08005445 	.word	0x08005445
 8005420:	08005445 	.word	0x08005445
 8005424:	08005445 	.word	0x08005445
 8005428:	0800543f 	.word	0x0800543f
 800542c:	2300      	movs	r3, #0
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	e0ae      	b.n	8005590 <UART_SetConfig+0x28c>
 8005432:	2302      	movs	r3, #2
 8005434:	76fb      	strb	r3, [r7, #27]
 8005436:	e0ab      	b.n	8005590 <UART_SetConfig+0x28c>
 8005438:	2304      	movs	r3, #4
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	e0a8      	b.n	8005590 <UART_SetConfig+0x28c>
 800543e:	2308      	movs	r3, #8
 8005440:	76fb      	strb	r3, [r7, #27]
 8005442:	e0a5      	b.n	8005590 <UART_SetConfig+0x28c>
 8005444:	2310      	movs	r3, #16
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	bf00      	nop
 800544a:	e0a1      	b.n	8005590 <UART_SetConfig+0x28c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6b      	ldr	r2, [pc, #428]	; (8005600 <UART_SetConfig+0x2fc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d120      	bne.n	8005498 <UART_SetConfig+0x194>
 8005456:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <UART_SetConfig+0x2f4>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005460:	2b10      	cmp	r3, #16
 8005462:	d00f      	beq.n	8005484 <UART_SetConfig+0x180>
 8005464:	2b10      	cmp	r3, #16
 8005466:	d802      	bhi.n	800546e <UART_SetConfig+0x16a>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <UART_SetConfig+0x174>
 800546c:	e010      	b.n	8005490 <UART_SetConfig+0x18c>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d005      	beq.n	800547e <UART_SetConfig+0x17a>
 8005472:	2b30      	cmp	r3, #48	; 0x30
 8005474:	d009      	beq.n	800548a <UART_SetConfig+0x186>
 8005476:	e00b      	b.n	8005490 <UART_SetConfig+0x18c>
 8005478:	2300      	movs	r3, #0
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	e088      	b.n	8005590 <UART_SetConfig+0x28c>
 800547e:	2302      	movs	r3, #2
 8005480:	76fb      	strb	r3, [r7, #27]
 8005482:	e085      	b.n	8005590 <UART_SetConfig+0x28c>
 8005484:	2304      	movs	r3, #4
 8005486:	76fb      	strb	r3, [r7, #27]
 8005488:	e082      	b.n	8005590 <UART_SetConfig+0x28c>
 800548a:	2308      	movs	r3, #8
 800548c:	76fb      	strb	r3, [r7, #27]
 800548e:	e07f      	b.n	8005590 <UART_SetConfig+0x28c>
 8005490:	2310      	movs	r3, #16
 8005492:	76fb      	strb	r3, [r7, #27]
 8005494:	bf00      	nop
 8005496:	e07b      	b.n	8005590 <UART_SetConfig+0x28c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a59      	ldr	r2, [pc, #356]	; (8005604 <UART_SetConfig+0x300>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d120      	bne.n	80054e4 <UART_SetConfig+0x1e0>
 80054a2:	4b55      	ldr	r3, [pc, #340]	; (80055f8 <UART_SetConfig+0x2f4>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d00f      	beq.n	80054d0 <UART_SetConfig+0x1cc>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d802      	bhi.n	80054ba <UART_SetConfig+0x1b6>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <UART_SetConfig+0x1c0>
 80054b8:	e010      	b.n	80054dc <UART_SetConfig+0x1d8>
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d005      	beq.n	80054ca <UART_SetConfig+0x1c6>
 80054be:	2bc0      	cmp	r3, #192	; 0xc0
 80054c0:	d009      	beq.n	80054d6 <UART_SetConfig+0x1d2>
 80054c2:	e00b      	b.n	80054dc <UART_SetConfig+0x1d8>
 80054c4:	2300      	movs	r3, #0
 80054c6:	76fb      	strb	r3, [r7, #27]
 80054c8:	e062      	b.n	8005590 <UART_SetConfig+0x28c>
 80054ca:	2302      	movs	r3, #2
 80054cc:	76fb      	strb	r3, [r7, #27]
 80054ce:	e05f      	b.n	8005590 <UART_SetConfig+0x28c>
 80054d0:	2304      	movs	r3, #4
 80054d2:	76fb      	strb	r3, [r7, #27]
 80054d4:	e05c      	b.n	8005590 <UART_SetConfig+0x28c>
 80054d6:	2308      	movs	r3, #8
 80054d8:	76fb      	strb	r3, [r7, #27]
 80054da:	e059      	b.n	8005590 <UART_SetConfig+0x28c>
 80054dc:	2310      	movs	r3, #16
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	bf00      	nop
 80054e2:	e055      	b.n	8005590 <UART_SetConfig+0x28c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a47      	ldr	r2, [pc, #284]	; (8005608 <UART_SetConfig+0x304>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d124      	bne.n	8005538 <UART_SetConfig+0x234>
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <UART_SetConfig+0x2f4>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fc:	d012      	beq.n	8005524 <UART_SetConfig+0x220>
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d802      	bhi.n	800550a <UART_SetConfig+0x206>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <UART_SetConfig+0x214>
 8005508:	e012      	b.n	8005530 <UART_SetConfig+0x22c>
 800550a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550e:	d006      	beq.n	800551e <UART_SetConfig+0x21a>
 8005510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005514:	d009      	beq.n	800552a <UART_SetConfig+0x226>
 8005516:	e00b      	b.n	8005530 <UART_SetConfig+0x22c>
 8005518:	2300      	movs	r3, #0
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	e038      	b.n	8005590 <UART_SetConfig+0x28c>
 800551e:	2302      	movs	r3, #2
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e035      	b.n	8005590 <UART_SetConfig+0x28c>
 8005524:	2304      	movs	r3, #4
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	e032      	b.n	8005590 <UART_SetConfig+0x28c>
 800552a:	2308      	movs	r3, #8
 800552c:	76fb      	strb	r3, [r7, #27]
 800552e:	e02f      	b.n	8005590 <UART_SetConfig+0x28c>
 8005530:	2310      	movs	r3, #16
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	bf00      	nop
 8005536:	e02b      	b.n	8005590 <UART_SetConfig+0x28c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2c      	ldr	r2, [pc, #176]	; (80055f0 <UART_SetConfig+0x2ec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d124      	bne.n	800558c <UART_SetConfig+0x288>
 8005542:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <UART_SetConfig+0x2f4>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005550:	d012      	beq.n	8005578 <UART_SetConfig+0x274>
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d802      	bhi.n	800555e <UART_SetConfig+0x25a>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <UART_SetConfig+0x268>
 800555c:	e012      	b.n	8005584 <UART_SetConfig+0x280>
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d006      	beq.n	8005572 <UART_SetConfig+0x26e>
 8005564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005568:	d009      	beq.n	800557e <UART_SetConfig+0x27a>
 800556a:	e00b      	b.n	8005584 <UART_SetConfig+0x280>
 800556c:	2300      	movs	r3, #0
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	e00e      	b.n	8005590 <UART_SetConfig+0x28c>
 8005572:	2302      	movs	r3, #2
 8005574:	76fb      	strb	r3, [r7, #27]
 8005576:	e00b      	b.n	8005590 <UART_SetConfig+0x28c>
 8005578:	2304      	movs	r3, #4
 800557a:	76fb      	strb	r3, [r7, #27]
 800557c:	e008      	b.n	8005590 <UART_SetConfig+0x28c>
 800557e:	2308      	movs	r3, #8
 8005580:	76fb      	strb	r3, [r7, #27]
 8005582:	e005      	b.n	8005590 <UART_SetConfig+0x28c>
 8005584:	2310      	movs	r3, #16
 8005586:	76fb      	strb	r3, [r7, #27]
 8005588:	bf00      	nop
 800558a:	e001      	b.n	8005590 <UART_SetConfig+0x28c>
 800558c:	2310      	movs	r3, #16
 800558e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <UART_SetConfig+0x2ec>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 80fa 	bne.w	8005790 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559c:	7efb      	ldrb	r3, [r7, #27]
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d836      	bhi.n	8005610 <UART_SetConfig+0x30c>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0x2a4>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	08005611 	.word	0x08005611
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	08005611 	.word	0x08005611
 80055b8:	080055db 	.word	0x080055db
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005611 	.word	0x08005611
 80055c8:	080055e3 	.word	0x080055e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80055cc:	f7fd ffb4 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80055d0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055d2:	e020      	b.n	8005616 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80055d4:	4b0d      	ldr	r3, [pc, #52]	; (800560c <UART_SetConfig+0x308>)
 80055d6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055d8:	e01d      	b.n	8005616 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80055da:	f7fd ff17 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80055de:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055e0:	e019      	b.n	8005616 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80055e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055e8:	e015      	b.n	8005616 <UART_SetConfig+0x312>
 80055ea:	bf00      	nop
 80055ec:	efff69f3 	.word	0xefff69f3
 80055f0:	40008000 	.word	0x40008000
 80055f4:	40013800 	.word	0x40013800
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40004400 	.word	0x40004400
 8005600:	40004800 	.word	0x40004800
 8005604:	40004c00 	.word	0x40004c00
 8005608:	40005000 	.word	0x40005000
 800560c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	74fb      	strb	r3, [r7, #19]
        break;
 8005614:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 81ac 	beq.w	8005976 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	429a      	cmp	r2, r3
 800562c:	d305      	bcc.n	800563a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d902      	bls.n	8005640 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	74fb      	strb	r3, [r7, #19]
 800563e:	e19a      	b.n	8005976 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8005640:	7efb      	ldrb	r3, [r7, #27]
 8005642:	2b08      	cmp	r3, #8
 8005644:	f200 8091 	bhi.w	800576a <UART_SetConfig+0x466>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x34c>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005675 	.word	0x08005675
 8005654:	0800576b 	.word	0x0800576b
 8005658:	080056c1 	.word	0x080056c1
 800565c:	0800576b 	.word	0x0800576b
 8005660:	080056f5 	.word	0x080056f5
 8005664:	0800576b 	.word	0x0800576b
 8005668:	0800576b 	.word	0x0800576b
 800566c:	0800576b 	.word	0x0800576b
 8005670:	08005741 	.word	0x08005741
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005674:	f7fd ff60 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8005678:	4603      	mov	r3, r0
 800567a:	4619      	mov	r1, r3
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	f04f 0400 	mov.w	r4, #0
 8005688:	0214      	lsls	r4, r2, #8
 800568a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800568e:	020b      	lsls	r3, r1, #8
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6852      	ldr	r2, [r2, #4]
 8005694:	0852      	lsrs	r2, r2, #1
 8005696:	4611      	mov	r1, r2
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	eb13 0b01 	adds.w	fp, r3, r1
 80056a0:	eb44 0c02 	adc.w	ip, r4, r2
 80056a4:	4658      	mov	r0, fp
 80056a6:	4661      	mov	r1, ip
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	461a      	mov	r2, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	f7fa fd88 	bl	80001c8 <__aeabi_uldivmod>
 80056b8:	4603      	mov	r3, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80056be:	e057      	b.n	8005770 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	f04f 0400 	mov.w	r4, #0
 80056ca:	49b1      	ldr	r1, [pc, #708]	; (8005990 <UART_SetConfig+0x68c>)
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	eb13 0b01 	adds.w	fp, r3, r1
 80056d4:	eb44 0c02 	adc.w	ip, r4, r2
 80056d8:	4658      	mov	r0, fp
 80056da:	4661      	mov	r1, ip
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	f7fa fd6e 	bl	80001c8 <__aeabi_uldivmod>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80056f2:	e03d      	b.n	8005770 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80056f4:	f7fd fe8a 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80056f8:	4603      	mov	r3, r0
 80056fa:	4619      	mov	r1, r3
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	f04f 0400 	mov.w	r4, #0
 8005708:	0214      	lsls	r4, r2, #8
 800570a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800570e:	020b      	lsls	r3, r1, #8
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6852      	ldr	r2, [r2, #4]
 8005714:	0852      	lsrs	r2, r2, #1
 8005716:	4611      	mov	r1, r2
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	eb13 0b01 	adds.w	fp, r3, r1
 8005720:	eb44 0c02 	adc.w	ip, r4, r2
 8005724:	4658      	mov	r0, fp
 8005726:	4661      	mov	r1, ip
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	461a      	mov	r2, r3
 8005732:	4623      	mov	r3, r4
 8005734:	f7fa fd48 	bl	80001c8 <__aeabi_uldivmod>
 8005738:	4603      	mov	r3, r0
 800573a:	460c      	mov	r4, r1
 800573c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800573e:	e017      	b.n	8005770 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800574e:	f144 0100 	adc.w	r1, r4, #0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f04f 0400 	mov.w	r4, #0
 800575a:	461a      	mov	r2, r3
 800575c:	4623      	mov	r3, r4
 800575e:	f7fa fd33 	bl	80001c8 <__aeabi_uldivmod>
 8005762:	4603      	mov	r3, r0
 8005764:	460c      	mov	r4, r1
 8005766:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005768:	e002      	b.n	8005770 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	74fb      	strb	r3, [r7, #19]
            break;
 800576e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005776:	d308      	bcc.n	800578a <UART_SetConfig+0x486>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577e:	d204      	bcs.n	800578a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	e0f5      	b.n	8005976 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	74fb      	strb	r3, [r7, #19]
 800578e:	e0f2      	b.n	8005976 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005798:	d17f      	bne.n	800589a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800579a:	7efb      	ldrb	r3, [r7, #27]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d85c      	bhi.n	800585a <UART_SetConfig+0x556>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x4a4>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	08005809 	.word	0x08005809
 80057b4:	0800585b 	.word	0x0800585b
 80057b8:	08005825 	.word	0x08005825
 80057bc:	0800585b 	.word	0x0800585b
 80057c0:	0800585b 	.word	0x0800585b
 80057c4:	0800585b 	.word	0x0800585b
 80057c8:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057cc:	f7fd feb4 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80057d0:	4603      	mov	r3, r0
 80057d2:	005a      	lsls	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057e8:	e03a      	b.n	8005860 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057ea:	f7fd febb 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 80057ee:	4603      	mov	r3, r0
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005806:	e02b      	b.n	8005860 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005812:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	fbb3 f3f2 	udiv	r3, r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005822:	e01d      	b.n	8005860 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005824:	f7fd fdf2 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005828:	4603      	mov	r3, r0
 800582a:	005a      	lsls	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	441a      	add	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	b29b      	uxth	r3, r3
 800583e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005840:	e00e      	b.n	8005860 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	b29b      	uxth	r3, r3
 8005856:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005858:	e002      	b.n	8005860 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	74fb      	strb	r3, [r7, #19]
        break;
 800585e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d916      	bls.n	8005894 <UART_SetConfig+0x590>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d212      	bcs.n	8005894 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f023 030f 	bic.w	r3, r3, #15
 8005876:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	b29b      	uxth	r3, r3
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	b29a      	uxth	r2, r3
 8005884:	897b      	ldrh	r3, [r7, #10]
 8005886:	4313      	orrs	r3, r2
 8005888:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	897a      	ldrh	r2, [r7, #10]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e070      	b.n	8005976 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	74fb      	strb	r3, [r7, #19]
 8005898:	e06d      	b.n	8005976 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800589a:	7efb      	ldrb	r3, [r7, #27]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d859      	bhi.n	8005954 <UART_SetConfig+0x650>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0x5a4>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058e9 	.word	0x080058e9
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005955 	.word	0x08005955
 80058b8:	08005921 	.word	0x08005921
 80058bc:	08005955 	.word	0x08005955
 80058c0:	08005955 	.word	0x08005955
 80058c4:	08005955 	.word	0x08005955
 80058c8:	0800593d 	.word	0x0800593d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058cc:	f7fd fe34 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058e6:	e038      	b.n	800595a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058e8:	f7fd fe3c 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005902:	e02a      	b.n	800595a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800590e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	fbb3 f3f2 	udiv	r3, r3, r2
 800591a:	b29b      	uxth	r3, r3
 800591c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800591e:	e01c      	b.n	800595a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005920:	f7fd fd74 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800593a:	e00e      	b.n	800595a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005952:	e002      	b.n	800595a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	74fb      	strb	r3, [r7, #19]
        break;
 8005958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d908      	bls.n	8005972 <UART_SetConfig+0x66e>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005966:	d204      	bcs.n	8005972 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	60da      	str	r2, [r3, #12]
 8005970:	e001      	b.n	8005976 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005982:	7cfb      	ldrb	r3, [r7, #19]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800598e:	bf00      	nop
 8005990:	f4240000 	.word	0xf4240000

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fa fd5b 	bl	80005a0 <HAL_GetTick>
 8005aea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d10e      	bne.n	8005b18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f82a 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e020      	b.n	8005b5a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d10e      	bne.n	8005b44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f814 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e00a      	b.n	8005b5a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b72:	e02a      	b.n	8005bca <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d026      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7c:	f7fa fd10 	bl	80005a0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11b      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ba0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e00f      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d0c5      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fb4d 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fb2a 	bl	80052dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	f107 001c 	add.w	r0, r7, #28
 8005cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d122      	bne.n	8005d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d105      	bne.n	8005cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f936 	bl	8005f68 <USB_CoreReset>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	e01a      	b.n	8005d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f92a 	bl	8005f68 <USB_CoreReset>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
 8005d2a:	e005      	b.n	8005d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr

08005d48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d106      	bne.n	8005db8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	e00b      	b.n	8005dd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e001      	b.n	8005dd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e003      	b.n	8005dd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005dd0:	2032      	movs	r0, #50	; 0x32
 8005dd2:	f7fa fbf1 	bl	80005b8 <HAL_Delay>

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <USB_FlushTxFifo+0x48>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e006      	b.n	8005e1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d0f0      	beq.n	8005dfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	00030d40 	.word	0x00030d40

08005e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <USB_FlushRxFifo+0x40>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d901      	bls.n	8005e50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d0f0      	beq.n	8005e3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	00030d40 	.word	0x00030d40

08005e70 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	460b      	mov	r3, r1
 8005e80:	71fb      	strb	r3, [r7, #7]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005e8e:	88bb      	ldrh	r3, [r7, #4]
 8005e90:	3303      	adds	r3, #3
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e00f      	b.n	8005ebc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	031a      	lsls	r2, r3, #12
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3eb      	bcc.n	8005e9c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b089      	sub	sp, #36	; 0x24
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	3303      	adds	r3, #3
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e00b      	b.n	8005f0e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3304      	adds	r3, #4
 8005f06:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d3ef      	bcc.n	8005ef6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3724      	adds	r7, #36	; 0x24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0301 	and.w	r3, r3, #1
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <USB_CoreReset+0x64>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e01b      	b.n	8005fbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	daf2      	bge.n	8005f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f043 0201 	orr.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <USB_CoreReset+0x64>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e006      	b.n	8005fbe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d0f0      	beq.n	8005f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	00030d40 	.word	0x00030d40

08005fd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 001c 	add.w	r0, r7, #28
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800601e:	2110      	movs	r1, #16
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fedd 	bl	8005de0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff00 	bl	8005e2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e015      	b.n	800605e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 33ff 	mov.w	r3, #4294967295
 8006044:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	461a      	mov	r2, r3
 8006054:	2300      	movs	r3, #0
 8006056:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3e5      	bcc.n	8006032 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006066:	2101      	movs	r1, #1
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f893 	bl	8006194 <USB_DriveVbus>

  HAL_Delay(200U);
 800606e:	20c8      	movs	r0, #200	; 0xc8
 8006070:	f7fa faa2 	bl	80005b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2280      	movs	r2, #128	; 0x80
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <USB_HostInit+0xf0>)
 800608c:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <USB_HostInit+0xf4>)
 8006092:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f043 0210 	orr.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <USB_HostInit+0xf8>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ba:	b004      	add	sp, #16
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	00600080 	.word	0x00600080
 80060c4:	004000e0 	.word	0x004000e0
 80060c8:	a3200008 	.word	0xa3200008

080060cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006104:	4313      	orrs	r3, r2
 8006106:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006114:	461a      	mov	r2, r3
 8006116:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800611a:	6053      	str	r3, [r2, #4]
 800611c:	e009      	b.n	8006132 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d106      	bne.n	8006132 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612a:	461a      	mov	r2, r3
 800612c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006130:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006160:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800616a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006170:	2064      	movs	r0, #100	; 0x64
 8006172:	f7fa fa21 	bl	80005b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800617e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006182:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006184:	200a      	movs	r0, #10
 8006186:	f7fa fa17 	bl	80005b8 <HAL_Delay>

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <USB_DriveVbus+0x44>
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d106      	bne.n	80061d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d109      	bne.n	80061f8 <USB_DriveVbus+0x64>
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	0c5b      	lsrs	r3, r3, #17
 8006224:	f003 0303 	and.w	r3, r3, #3
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	b29b      	uxth	r3, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	4608      	mov	r0, r1
 8006262:	4611      	mov	r1, r2
 8006264:	461a      	mov	r2, r3
 8006266:	4603      	mov	r3, r0
 8006268:	70fb      	strb	r3, [r7, #3]
 800626a:	460b      	mov	r3, r1
 800626c:	70bb      	strb	r3, [r7, #2]
 800626e:	4613      	mov	r3, r2
 8006270:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	461a      	mov	r2, r3
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800628e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006292:	2b03      	cmp	r3, #3
 8006294:	d867      	bhi.n	8006366 <USB_HC_Init+0x10e>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <USB_HC_Init+0x44>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	08006329 	.word	0x08006329
 80062a4:	080062ad 	.word	0x080062ad
 80062a8:	080062eb 	.word	0x080062eb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	461a      	mov	r2, r3
 80062ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80062be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da51      	bge.n	800636c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062e8:	e040      	b.n	800636c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	461a      	mov	r2, r3
 80062f8:	f240 639d 	movw	r3, #1693	; 0x69d
 80062fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006302:	2b00      	cmp	r3, #0
 8006304:	da34      	bge.n	8006370 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	440a      	add	r2, r1
 800631c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006324:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006326:	e023      	b.n	8006370 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	461a      	mov	r2, r3
 8006336:	f240 2325 	movw	r3, #549	; 0x225
 800633a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800633c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da17      	bge.n	8006374 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006362:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006364:	e006      	b.n	8006374 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
      break;
 800636a:	e004      	b.n	8006376 <USB_HC_Init+0x11e>
      break;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <USB_HC_Init+0x11e>
      break;
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <USB_HC_Init+0x11e>
      break;
 8006374:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f303 	lsl.w	r3, r1, r3
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006390:	4313      	orrs	r3, r2
 8006392:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da03      	bge.n	80063b0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	e001      	b.n	80063b4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80063b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d103      	bne.n	80063c4 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e001      	b.n	80063c8 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063c8:	787b      	ldrb	r3, [r7, #1]
 80063ca:	059b      	lsls	r3, r3, #22
 80063cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063d0:	78bb      	ldrb	r3, [r7, #2]
 80063d2:	02db      	lsls	r3, r3, #11
 80063d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063de:	049b      	lsls	r3, r3, #18
 80063e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	0159      	lsls	r1, r3, #5
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	440b      	add	r3, r1
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006404:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006406:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800640a:	2b03      	cmp	r3, #3
 800640c:	d10f      	bne.n	800642e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006454:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d018      	beq.n	8006490 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	8912      	ldrh	r2, [r2, #8]
 8006466:	4413      	add	r3, r2
 8006468:	3b01      	subs	r3, #1
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	8912      	ldrh	r2, [r2, #8]
 800646e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006472:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006474:	8bfa      	ldrh	r2, [r7, #30]
 8006476:	8a7b      	ldrh	r3, [r7, #18]
 8006478:	429a      	cmp	r2, r3
 800647a:	d90b      	bls.n	8006494 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800647c:	8a7b      	ldrh	r3, [r7, #18]
 800647e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006480:	8bfb      	ldrh	r3, [r7, #30]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	8912      	ldrh	r2, [r2, #8]
 8006486:	fb02 f203 	mul.w	r2, r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	e001      	b.n	8006494 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006490:	2301      	movs	r3, #1
 8006492:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	78db      	ldrb	r3, [r3, #3]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800649c:	8bfb      	ldrh	r3, [r7, #30]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	8912      	ldrh	r2, [r2, #8]
 80064a2:	fb02 f203 	mul.w	r2, r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064b2:	8bfb      	ldrh	r3, [r7, #30]
 80064b4:	04d9      	lsls	r1, r3, #19
 80064b6:	4b5f      	ldr	r3, [pc, #380]	; (8006634 <USB_HC_StartXfer+0x1f8>)
 80064b8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ba:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	7a9b      	ldrb	r3, [r3, #10]
 80064c0:	075b      	lsls	r3, r3, #29
 80064c2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	0148      	lsls	r0, r1, #5
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	4401      	add	r1, r0
 80064ce:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064d2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064d4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	440a      	add	r2, r1
 8006504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006508:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800650c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	7c7b      	ldrb	r3, [r7, #17]
 800651e:	075b      	lsls	r3, r3, #29
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	0148      	lsls	r0, r1, #5
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	4401      	add	r1, r0
 8006528:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a3e      	ldr	r2, [pc, #248]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006540:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006542:	4b3d      	ldr	r3, [pc, #244]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800654a:	4a3b      	ldr	r2, [pc, #236]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 800654c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	78db      	ldrb	r3, [r3, #3]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006556:	4b38      	ldr	r3, [pc, #224]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	4a36      	ldr	r2, [pc, #216]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e005      	b.n	8006570 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006564:	4b34      	ldr	r3, [pc, #208]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656c:	4a32      	ldr	r2, [pc, #200]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 800656e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006570:	4b31      	ldr	r3, [pc, #196]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006578:	4a2f      	ldr	r2, [pc, #188]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 800657a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	461a      	mov	r2, r3
 800658a:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <USB_HC_StartXfer+0x1fc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d148      	bne.n	800662a <USB_HC_StartXfer+0x1ee>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d044      	beq.n	800662a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	79db      	ldrb	r3, [r3, #7]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d831      	bhi.n	800660c <USB_HC_StartXfer+0x1d0>
 80065a8:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <USB_HC_StartXfer+0x174>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065e5 	.word	0x080065e5
 80065b8:	080065c1 	.word	0x080065c1
 80065bc:	080065e5 	.word	0x080065e5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	3303      	adds	r3, #3
 80065c6:	089b      	lsrs	r3, r3, #2
 80065c8:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065ca:	89fa      	ldrh	r2, [r7, #14]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d91c      	bls.n	8006610 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	619a      	str	r2, [r3, #24]
          }
          break;
 80065e2:	e015      	b.n	8006610 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	3303      	adds	r3, #3
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065ee:	89fa      	ldrh	r2, [r7, #14]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d90a      	bls.n	8006614 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]
          }
          break;
 800660a:	e003      	b.n	8006614 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800660c:	bf00      	nop
 800660e:	e002      	b.n	8006616 <USB_HC_StartXfer+0x1da>
          break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <USB_HC_StartXfer+0x1da>
          break;
 8006614:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68d9      	ldr	r1, [r3, #12]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	785a      	ldrb	r2, [r3, #1]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	b29b      	uxth	r3, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fc23 	bl	8005e70 <USB_WritePacket>
    }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	1ff80000 	.word	0x1ff80000
 8006638:	200000ac 	.word	0x200000ac

0800663c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	b29b      	uxth	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	0c9b      	lsrs	r3, r3, #18
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <USB_HC_Halt+0x3a>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d16c      	bne.n	8006772 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d143      	bne.n	800674c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	440a      	add	r2, r1
 800671a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006722:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3301      	adds	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006730:	d81d      	bhi.n	800676e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006748:	d0ec      	beq.n	8006724 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800674a:	e080      	b.n	800684e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	440a      	add	r2, r1
 8006762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800676a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800676c:	e06f      	b.n	800684e <USB_HC_Halt+0x1f0>
          break;
 800676e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006770:	e06d      	b.n	800684e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	440a      	add	r2, r1
 8006788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006790:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d143      	bne.n	800682a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006800:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680e:	d81d      	bhi.n	800684c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006826:	d0ec      	beq.n	8006802 <USB_HC_Halt+0x1a4>
 8006828:	e011      	b.n	800684e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	440a      	add	r2, r1
 8006840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e000      	b.n	800684e <USB_HC_Halt+0x1f0>
          break;
 800684c:	bf00      	nop
    }
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fa7c 	bl	8005d6a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006872:	2110      	movs	r1, #16
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fab3 	bl	8005de0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fad6 	bl	8005e2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	e01f      	b.n	80068c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800689c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	3301      	adds	r3, #1
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	d9dc      	bls.n	8006886 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e034      	b.n	800693c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006906:	461a      	mov	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	3301      	adds	r3, #1
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006918:	d80c      	bhi.n	8006934 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006930:	d0ec      	beq.n	800690c <USB_StopHost+0xb0>
 8006932:	e000      	b.n	8006936 <USB_StopHost+0xda>
        break;
 8006934:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3301      	adds	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0f      	cmp	r3, #15
 8006940:	d9c7      	bls.n	80068d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006948:	461a      	mov	r2, r3
 800694a:	f04f 33ff 	mov.w	r3, #4294967295
 800694e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff f9f5 	bl	8005d48 <USB_EnableGlobalInt>

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b089      	sub	sp, #36	; 0x24
 800696c:	af04      	add	r7, sp, #16
 800696e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006970:	2302      	movs	r3, #2
 8006972:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006974:	2301      	movs	r3, #1
 8006976:	2202      	movs	r2, #2
 8006978:	2102      	movs	r1, #2
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fc3a 	bl	80071f4 <USBH_FindInterface>
 8006980:	4603      	mov	r3, r0
 8006982:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	f000 812a 	beq.w	8006be0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc13 	bl	80071bc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800699c:	2050      	movs	r0, #80	; 0x50
 800699e:	f003 f8a7 	bl	8009af0 <malloc>
 80069a2:	4603      	mov	r3, r0
 80069a4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	211a      	movs	r1, #26
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da15      	bge.n	80069f4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	211a      	movs	r1, #26
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	211a      	movs	r1, #26
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fd21 	bl	8008442 <USBH_AllocPipe>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	7819      	ldrb	r1, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	7858      	ldrb	r0, [r3, #1]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	8952      	ldrh	r2, [r2, #10]
 8006a20:	9202      	str	r2, [sp, #8]
 8006a22:	2203      	movs	r2, #3
 8006a24:	9201      	str	r2, [sp, #4]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	4623      	mov	r3, r4
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fcd9 	bl	80083e4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f002 ff7e 	bl	800993c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006a40:	2300      	movs	r3, #0
 8006a42:	2200      	movs	r2, #0
 8006a44:	210a      	movs	r1, #10
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fbd4 	bl	80071f4 <USBH_FindInterface>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2bff      	cmp	r3, #255	; 0xff
 8006a54:	f000 80c4 	beq.w	8006be0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	211a      	movs	r1, #26
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	da16      	bge.n	8006a9e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	211a      	movs	r1, #26
 8006a76:	fb01 f303 	mul.w	r3, r1, r3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	211a      	movs	r1, #26
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006a96:	881a      	ldrh	r2, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	835a      	strh	r2, [r3, #26]
 8006a9c:	e015      	b.n	8006aca <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	211a      	movs	r1, #26
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	211a      	movs	r1, #26
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	211a      	movs	r1, #26
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da16      	bge.n	8006b10 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	211a      	movs	r1, #26
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	835a      	strh	r2, [r3, #26]
 8006b0e:	e015      	b.n	8006b3c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	211a      	movs	r1, #26
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	211a      	movs	r1, #26
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	7b9b      	ldrb	r3, [r3, #14]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fc7d 	bl	8008442 <USBH_AllocPipe>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	7bdb      	ldrb	r3, [r3, #15]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fc73 	bl	8008442 <USBH_AllocPipe>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	7b59      	ldrb	r1, [r3, #13]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	7b98      	ldrb	r0, [r3, #14]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	8b12      	ldrh	r2, [r2, #24]
 8006b7c:	9202      	str	r2, [sp, #8]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	9201      	str	r2, [sp, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4623      	mov	r3, r4
 8006b86:	4602      	mov	r2, r0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fc2b 	bl	80083e4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7b19      	ldrb	r1, [r3, #12]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	7bd8      	ldrb	r0, [r3, #15]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	8b52      	ldrh	r2, [r2, #26]
 8006ba6:	9202      	str	r2, [sp, #8]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	9201      	str	r2, [sp, #4]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4623      	mov	r3, r4
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fc16 	bl	80083e4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	7b5b      	ldrb	r3, [r3, #13]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f002 feb7 	bl	800993c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	7b1b      	ldrb	r3, [r3, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f002 feb0 	bl	800993c <USBH_LL_SetToggle>
      status = USBH_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd90      	pop	{r4, r7, pc}

08006bea <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fc09 	bl	8008422 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fc31 	bl	800847e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	7b1b      	ldrb	r3, [r3, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	7b1b      	ldrb	r3, [r3, #12]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fbf6 	bl	8008422 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	7b1b      	ldrb	r3, [r3, #12]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fc1e 	bl	800847e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7b5b      	ldrb	r3, [r3, #13]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7b5b      	ldrb	r3, [r3, #13]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fbe3 	bl	8008422 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	7b5b      	ldrb	r3, [r3, #13]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fc0b 	bl	800847e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f002 ff3c 	bl	8009b00 <free>
    phost->pActiveClass->pData = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c8e:	2200      	movs	r2, #0
 8006c90:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3340      	adds	r3, #64	; 0x40
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8b2 	bl	8006e22 <GetLineCoding>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cce:	2102      	movs	r1, #2
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
  }
  return status;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d877      	bhi.n	8006df4 <USBH_CDC_Process+0x114>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBH_CDC_Process+0x2c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d21 	.word	0x08006d21
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	08006d57 	.word	0x08006d57
 8006d18:	08006dcb 	.word	0x08006dcb
 8006d1c:	08006dd9 	.word	0x08006dd9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
    break;
 8006d24:	e06d      	b.n	8006e02 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f897 	bl	8006e60 <SetLineCoding>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006d44:	e058      	b.n	8006df8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d055      	beq.n	8006df8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006d54:	e050      	b.n	8006df8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3340      	adds	r3, #64	; 0x40
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f860 	bl	8006e22 <GetLineCoding>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d126      	bne.n	8006dba <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d13b      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d133      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d12b      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dac:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d124      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f95a 	bl	800706c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006db8:	e020      	b.n	8006dfc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d01d      	beq.n	8006dfc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006dc8:	e018      	b.n	8006dfc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f867 	bl	8006e9e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8dc 	bl	8006f8e <CDC_ProcessReception>
    break;
 8006dd6:	e014      	b.n	8006e02 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fece 	bl	8007b7c <USBH_ClrFeature>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006df2:	e005      	b.n	8006e00 <USBH_CDC_Process+0x120>

  default:
    break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <USBH_CDC_Process+0x122>
    break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <USBH_CDC_Process+0x122>
    break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <USBH_CDC_Process+0x122>
    break;
 8006e00:	bf00      	nop

  }

  return status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	22a1      	movs	r2, #161	; 0xa1
 8006e30:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2207      	movs	r2, #7
 8006e48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f873 	bl	8007f3c <USBH_CtlReq>
 8006e56:	4603      	mov	r3, r0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2207      	movs	r2, #7
 8006e86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f854 	bl	8007f3c <USBH_CtlReq>
 8006e94:	4603      	mov	r3, r0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d002      	beq.n	8006ec4 <CDC_ProcessTransmission+0x26>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d025      	beq.n	8006f0e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006ec2:	e060      	b.n	8006f86 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	8b12      	ldrh	r2, [r2, #24]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d90c      	bls.n	8006eea <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8b1a      	ldrh	r2, [r3, #24]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	7b58      	ldrb	r0, [r3, #13]
 8006edc:	2301      	movs	r3, #1
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fa3b 	bl	800835e <USBH_BulkSendData>
 8006ee8:	e00c      	b.n	8006f04 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	7b58      	ldrb	r0, [r3, #13]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4603      	mov	r3, r0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fa2d 	bl	800835e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006f0c:	e03b      	b.n	8006f86 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	7b5b      	ldrb	r3, [r3, #13]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f002 fce7 	bl	80098e8 <USBH_LL_GetURBState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	8b12      	ldrh	r2, [r2, #24]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d90e      	bls.n	8006f4e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	8b12      	ldrh	r2, [r2, #24]
 8006f38:	1a9a      	subs	r2, r3, r2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	8b12      	ldrh	r2, [r2, #24]
 8006f46:	441a      	add	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	61da      	str	r2, [r3, #28]
 8006f4c:	e002      	b.n	8006f54 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006f64:	e00e      	b.n	8006f84 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f868 	bl	8007044 <USBH_CDC_TransmitCallback>
    break;
 8006f74:	e006      	b.n	8006f84 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d103      	bne.n	8006f84 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006f84:	bf00      	nop
  }
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d002      	beq.n	8006fb4 <CDC_ProcessReception+0x26>
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d00e      	beq.n	8006fd0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006fb2:	e043      	b.n	800703c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a19      	ldr	r1, [r3, #32]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	8b5a      	ldrh	r2, [r3, #26]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f9f1 	bl	80083a8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006fce:	e035      	b.n	800703c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f002 fc86 	bl	80098e8 <USBH_LL_GetURBState>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d129      	bne.n	800703a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	7b1b      	ldrb	r3, [r3, #12]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 fbe9 	bl	80097c4 <USBH_LL_GetLastXferSize>
 8006ff2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d016      	beq.n	800702c <CDC_ProcessReception+0x9e>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	8b5b      	ldrh	r3, [r3, #26]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4293      	cmp	r3, r2
 8007008:	d910      	bls.n	800702c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	441a      	add	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2203      	movs	r2, #3
 8007026:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800702a:	e006      	b.n	800703a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f80f 	bl	8007058 <USBH_CDC_ReceiveCallback>
    break;
 800703a:	bf00      	nop
  }
}
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007094:	2302      	movs	r3, #2
 8007096:	e019      	b.n	80070cc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f80f 	bl	80070d4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f002 facb 	bl	8009660 <USBH_LL_Init>

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80070e0:	e008      	b.n	80070f4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	32e0      	adds	r2, #224	; 0xe0
 80070e8:	2100      	movs	r1, #0
 80070ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b0e      	cmp	r3, #14
 80070f8:	d9f3      	bls.n	80070e2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e009      	b.n	8007114 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800711a:	d3f1      	bcc.n	8007100 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2240      	movs	r2, #64	; 0x40
 8007140:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d017      	beq.n	80071aa <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10f      	bne.n	80071a4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	33dc      	adds	r3, #220	; 0xdc
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	e004      	b.n	80071ae <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	73fb      	strb	r3, [r7, #15]
 80071a8:	e001      	b.n	80071ae <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071aa:	2302      	movs	r3, #2
 80071ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d204      	bcs.n	80071e2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80071e0:	e001      	b.n	80071e6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80071e2:	2302      	movs	r3, #2
 80071e4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	461a      	mov	r2, r3
 8007202:	4603      	mov	r3, r0
 8007204:	70fb      	strb	r3, [r7, #3]
 8007206:	460b      	mov	r3, r1
 8007208:	70bb      	strb	r3, [r7, #2]
 800720a:	4613      	mov	r3, r2
 800720c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007212:	2300      	movs	r3, #0
 8007214:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800721c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800721e:	e025      	b.n	800726c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	221a      	movs	r2, #26
 8007224:	fb02 f303 	mul.w	r3, r2, r3
 8007228:	3308      	adds	r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	3302      	adds	r3, #2
 8007230:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	795b      	ldrb	r3, [r3, #5]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	429a      	cmp	r2, r3
 800723a:	d002      	beq.n	8007242 <USBH_FindInterface+0x4e>
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	2bff      	cmp	r3, #255	; 0xff
 8007240:	d111      	bne.n	8007266 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007246:	78ba      	ldrb	r2, [r7, #2]
 8007248:	429a      	cmp	r2, r3
 800724a:	d002      	beq.n	8007252 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800724c:	78bb      	ldrb	r3, [r7, #2]
 800724e:	2bff      	cmp	r3, #255	; 0xff
 8007250:	d109      	bne.n	8007266 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007256:	787a      	ldrb	r2, [r7, #1]
 8007258:	429a      	cmp	r2, r3
 800725a:	d002      	beq.n	8007262 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800725c:	787b      	ldrb	r3, [r7, #1]
 800725e:	2bff      	cmp	r3, #255	; 0xff
 8007260:	d101      	bne.n	8007266 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	e006      	b.n	8007274 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	3301      	adds	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d9d6      	bls.n	8007220 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007272:	23ff      	movs	r3, #255	; 0xff
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 fa25 	bl	80096d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f002 fb3c 	bl	800990e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 faec 	bl	800788e <USBH_IsPortEnabled>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10c      	bne.n	80072d6 <USBH_Process+0x36>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d002      	beq.n	80072d6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2203      	movs	r2, #3
 80072d4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b0b      	cmp	r3, #11
 80072de:	f200 814c 	bhi.w	800757a <USBH_Process+0x2da>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <USBH_Process+0x48>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	08007319 	.word	0x08007319
 80072ec:	0800733b 	.word	0x0800733b
 80072f0:	0800734f 	.word	0x0800734f
 80072f4:	08007555 	.word	0x08007555
 80072f8:	0800757b 	.word	0x0800757b
 80072fc:	080073dd 	.word	0x080073dd
 8007300:	0800750b 	.word	0x0800750b
 8007304:	0800740d 	.word	0x0800740d
 8007308:	0800742d 	.word	0x0800742d
 800730c:	0800744d 	.word	0x0800744d
 8007310:	0800747b 	.word	0x0800747b
 8007314:	0800753d 	.word	0x0800753d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 812c 	beq.w	800757e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800732c:	20c8      	movs	r0, #200	; 0xc8
 800732e:	f002 fb38 	bl	80099a2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f002 fa2b 	bl	800978e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007338:	e121      	b.n	800757e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 811e 	bne.w	8007582 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800734c:	e119      	b.n	8007582 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800734e:	2064      	movs	r0, #100	; 0x64
 8007350:	f002 fb27 	bl	80099a2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f002 f9f5 	bl	8009744 <USBH_LL_GetSpeed>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2205      	movs	r2, #5
 8007368:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800736a:	2100      	movs	r1, #0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f868 	bl	8008442 <USBH_AllocPipe>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f860 	bl	8008442 <USBH_AllocPipe>
 8007382:	4603      	mov	r3, r0
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7919      	ldrb	r1, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800739e:	b292      	uxth	r2, r2
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4603      	mov	r3, r0
 80073aa:	2280      	movs	r2, #128	; 0x80
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 f819 	bl	80083e4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7959      	ldrb	r1, [r3, #5]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80073c6:	b292      	uxth	r2, r2
 80073c8:	9202      	str	r2, [sp, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	9201      	str	r2, [sp, #4]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4603      	mov	r3, r0
 80073d2:	2200      	movs	r2, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f805 	bl	80083e4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80073da:	e0e3      	b.n	80075a4 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8e7 	bl	80075b0 <USBH_HandleEnum>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 80ce 	bne.w	8007586 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d103      	bne.n	8007404 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2208      	movs	r2, #8
 8007400:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007402:	e0c0      	b.n	8007586 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2207      	movs	r2, #7
 8007408:	701a      	strb	r2, [r3, #0]
    break;
 800740a:	e0bc      	b.n	8007586 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80b9 	beq.w	800758a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800741e:	2101      	movs	r1, #1
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2208      	movs	r2, #8
 8007428:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800742a:	e0ae      	b.n	800758a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007432:	b29b      	uxth	r3, r3
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb59 	bl	8007aee <USBH_SetCfg>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 80a5 	bne.w	800758e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2209      	movs	r2, #9
 8007448:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800744a:	e0a0      	b.n	800758e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00b      	beq.n	8007472 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fb69 	bl	8007b34 <USBH_SetFeature>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 8094 	bne.w	8007592 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220a      	movs	r2, #10
 800746e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007470:	e08f      	b.n	8007592 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220a      	movs	r2, #10
 8007476:	701a      	strb	r2, [r3, #0]
    break;
 8007478:	e08b      	b.n	8007592 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8088 	beq.w	8007596 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
 8007492:	e017      	b.n	80074c4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	33dc      	adds	r3, #220	; 0xdc
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	791a      	ldrb	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d108      	bne.n	80074be <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	33dc      	adds	r3, #220	; 0xdc
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	3301      	adds	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0e4      	beq.n	8007494 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2206      	movs	r2, #6
 80074ea:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074f2:	2103      	movs	r1, #3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80074f8:	e04d      	b.n	8007596 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	220d      	movs	r2, #13
 80074fe:	701a      	strb	r2, [r3, #0]
    break;
 8007500:	e049      	b.n	8007596 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220d      	movs	r2, #13
 8007506:	701a      	strb	r2, [r3, #0]
    break;
 8007508:	e045      	b.n	8007596 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00f      	beq.n	8007534 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d136      	bne.n	800759a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	220b      	movs	r2, #11
 8007530:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007532:	e032      	b.n	800759a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	220d      	movs	r2, #13
 8007538:	701a      	strb	r2, [r3, #0]
    break;
 800753a:	e02e      	b.n	800759a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02b      	beq.n	800759e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
    }
    break;
 8007552:	e024      	b.n	800759e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fdbd 	bl	80070d4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01e      	beq.n	80075a2 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007578:	e013      	b.n	80075a2 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800757a:	bf00      	nop
 800757c:	e012      	b.n	80075a4 <USBH_Process+0x304>
    break;
 800757e:	bf00      	nop
 8007580:	e010      	b.n	80075a4 <USBH_Process+0x304>
    break;
 8007582:	bf00      	nop
 8007584:	e00e      	b.n	80075a4 <USBH_Process+0x304>
    break;
 8007586:	bf00      	nop
 8007588:	e00c      	b.n	80075a4 <USBH_Process+0x304>
    break;
 800758a:	bf00      	nop
 800758c:	e00a      	b.n	80075a4 <USBH_Process+0x304>
    break;
 800758e:	bf00      	nop
 8007590:	e008      	b.n	80075a4 <USBH_Process+0x304>
    break;
 8007592:	bf00      	nop
 8007594:	e006      	b.n	80075a4 <USBH_Process+0x304>
    break;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <USBH_Process+0x304>
    break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <USBH_Process+0x304>
    break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <USBH_Process+0x304>
    break;
 80075a2:	bf00      	nop
  }
 return USBH_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop

080075b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b07      	cmp	r3, #7
 80075c2:	f200 80f8 	bhi.w	80077b6 <USBH_HandleEnum+0x206>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <USBH_HandleEnum+0x1c>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075ed 	.word	0x080075ed
 80075d0:	0800765f 	.word	0x0800765f
 80075d4:	08007677 	.word	0x08007677
 80075d8:	080076ed 	.word	0x080076ed
 80075dc:	08007703 	.word	0x08007703
 80075e0:	0800771f 	.word	0x0800771f
 80075e4:	08007753 	.word	0x08007753
 80075e8:	08007787 	.word	0x08007787
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80075ec:	2108      	movs	r1, #8
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9ad 	bl	800794e <USBH_Get_DevDesc>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 80df 	bne.w	80077ba <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7919      	ldrb	r1, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007620:	b292      	uxth	r2, r2
 8007622:	9202      	str	r2, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	9201      	str	r2, [sp, #4]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4603      	mov	r3, r0
 800762c:	2280      	movs	r2, #128	; 0x80
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fed8 	bl	80083e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7959      	ldrb	r1, [r3, #5]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007648:	b292      	uxth	r2, r2
 800764a:	9202      	str	r2, [sp, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	9201      	str	r2, [sp, #4]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4603      	mov	r3, r0
 8007654:	2200      	movs	r2, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fec4 	bl	80083e4 <USBH_OpenPipe>

    }
    break;
 800765c:	e0ad      	b.n	80077ba <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800765e:	2112      	movs	r1, #18
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f974 	bl	800794e <USBH_Get_DevDesc>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f040 80a8 	bne.w	80077be <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007674:	e0a3      	b.n	80077be <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007676:	2101      	movs	r1, #1
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa14 	bl	8007aa6 <USBH_SetAddress>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 809e 	bne.w	80077c2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007686:	2002      	movs	r0, #2
 8007688:	f002 f98b 	bl	80099a2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2203      	movs	r2, #3
 8007698:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	7919      	ldrb	r1, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80076ae:	b292      	uxth	r2, r2
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	9201      	str	r2, [sp, #4]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4603      	mov	r3, r0
 80076ba:	2280      	movs	r2, #128	; 0x80
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fe91 	bl	80083e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7959      	ldrb	r1, [r3, #5]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80076d6:	b292      	uxth	r2, r2
 80076d8:	9202      	str	r2, [sp, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	9201      	str	r2, [sp, #4]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4603      	mov	r3, r0
 80076e2:	2200      	movs	r2, #0
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fe7d 	bl	80083e4 <USBH_OpenPipe>
    }
    break;
 80076ea:	e06a      	b.n	80077c2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80076ec:	2109      	movs	r1, #9
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f955 	bl	800799e <USBH_Get_CfgDesc>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d165      	bne.n	80077c6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2204      	movs	r2, #4
 80076fe:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007700:	e061      	b.n	80077c6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f947 	bl	800799e <USBH_Get_CfgDesc>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d159      	bne.n	80077ca <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2205      	movs	r2, #5
 800771a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800771c:	e055      	b.n	80077ca <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007724:	2b00      	cmp	r3, #0
 8007726:	d010      	beq.n	800774a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007734:	23ff      	movs	r3, #255	; 0xff
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f955 	bl	80079e6 <USBH_Get_StringDesc>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d145      	bne.n	80077ce <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2206      	movs	r2, #6
 8007746:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007748:	e041      	b.n	80077ce <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2206      	movs	r2, #6
 800774e:	705a      	strb	r2, [r3, #1]
    break;
 8007750:	e03d      	b.n	80077ce <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007758:	2b00      	cmp	r3, #0
 800775a:	d010      	beq.n	800777e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f93b 	bl	80079e6 <USBH_Get_StringDesc>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d12d      	bne.n	80077d2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2207      	movs	r2, #7
 800777a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800777c:	e029      	b.n	80077d2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2207      	movs	r2, #7
 8007782:	705a      	strb	r2, [r3, #1]
    break;
 8007784:	e025      	b.n	80077d2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00f      	beq.n	80077b0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800779c:	23ff      	movs	r3, #255	; 0xff
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f921 	bl	80079e6 <USBH_Get_StringDesc>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d115      	bne.n	80077d6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80077ae:	e012      	b.n	80077d6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
    break;
 80077b4:	e00f      	b.n	80077d6 <USBH_HandleEnum+0x226>

  default:
    break;
 80077b6:	bf00      	nop
 80077b8:	e00e      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077ba:	bf00      	nop
 80077bc:	e00c      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077be:	bf00      	nop
 80077c0:	e00a      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077c2:	bf00      	nop
 80077c4:	e008      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077c6:	bf00      	nop
 80077c8:	e006      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077ca:	bf00      	nop
 80077cc:	e004      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <USBH_HandleEnum+0x228>
    break;
 80077d6:	bf00      	nop
  }
  return Status;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f804 	bl	8007826 <USBH_HandleSof>
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b0b      	cmp	r3, #11
 8007836:	d10a      	bne.n	800784e <USBH_HandleSof+0x28>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
  }
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007866:	bf00      	nop
}
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007882:	bf00      	nop
}
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10f      	bne.n	80078da <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00e      	beq.n	80078ea <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078d2:	2104      	movs	r1, #4
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
 80078d8:	e007      	b.n	80078ea <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d102      	bne.n	80078ea <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 ff06 	bl	800970e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fdb8 	bl	800847e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fdb2 	bl	800847e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007932:	2105      	movs	r1, #5
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fecd 	bl	80096d8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2203      	movs	r2, #3
 8007942:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af02      	add	r7, sp, #8
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b29b      	uxth	r3, r3
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4613      	mov	r3, r2
 8007968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796c:	2100      	movs	r1, #0
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f864 	bl	8007a3c <USBH_GetDescriptor>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	b292      	uxth	r2, r2
 800798e:	4619      	mov	r1, r3
 8007990:	f000 f918 	bl	8007bc4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af02      	add	r7, sp, #8
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	331c      	adds	r3, #28
 80079ae:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ba:	2100      	movs	r1, #0
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f83d 	bl	8007a3c <USBH_GetDescriptor>
 80079c2:	4603      	mov	r3, r0
 80079c4:	72fb      	strb	r3, [r7, #11]
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d107      	bne.n	80079dc <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80079d2:	887a      	ldrh	r2, [r7, #2]
 80079d4:	68f9      	ldr	r1, [r7, #12]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f964 	bl	8007ca4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b088      	sub	sp, #32
 80079ea:	af02      	add	r7, sp, #8
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	72fb      	strb	r3, [r7, #11]
 80079f6:	4613      	mov	r3, r2
 80079f8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a02:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007a0a:	893b      	ldrh	r3, [r7, #8]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	2100      	movs	r1, #0
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f812 	bl	8007a3c <USBH_GetDescriptor>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d107      	bne.n	8007a32 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a28:	893a      	ldrh	r2, [r7, #8]
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fa37 	bl	8007ea0 <USBH_ParseStringDesc>
  }
  return status;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	607b      	str	r3, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	72fb      	strb	r3, [r7, #11]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d11c      	bne.n	8007a90 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2206      	movs	r2, #6
 8007a66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	893a      	ldrh	r2, [r7, #8]
 8007a6c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a6e:	893b      	ldrh	r3, [r7, #8]
 8007a70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a78:	d104      	bne.n	8007a84 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f240 4209 	movw	r2, #1033	; 0x409
 8007a80:	829a      	strh	r2, [r3, #20]
 8007a82:	e002      	b.n	8007a8a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8b3a      	ldrh	r2, [r7, #24]
 8007a8e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007a90:	8b3b      	ldrh	r3, [r7, #24]
 8007a92:	461a      	mov	r2, r3
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fa50 	bl	8007f3c <USBH_CtlReq>
 8007a9c:	4603      	mov	r3, r0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	789b      	ldrb	r3, [r3, #2]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d10f      	bne.n	8007ada <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa2c 	bl	8007f3c <USBH_CtlReq>
 8007ae4:	4603      	mov	r3, r0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	789b      	ldrb	r3, [r3, #2]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d10e      	bne.n	8007b20 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	887a      	ldrh	r2, [r7, #2]
 8007b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fa09 	bl	8007f3c <USBH_CtlReq>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10f      	bne.n	8007b68 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2203      	movs	r2, #3
 8007b52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9e5 	bl	8007f3c <USBH_CtlReq>
 8007b72:	4603      	mov	r3, r0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	789b      	ldrb	r3, [r3, #2]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10f      	bne.n	8007bb0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9c1 	bl	8007f3c <USBH_CtlReq>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	785a      	ldrb	r2, [r3, #1]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3302      	adds	r3, #2
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	3303      	adds	r3, #3
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	791a      	ldrb	r2, [r3, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	795a      	ldrb	r2, [r3, #5]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	799a      	ldrb	r2, [r3, #6]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	79da      	ldrb	r2, [r3, #7]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d939      	bls.n	8007c98 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3308      	adds	r3, #8
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3309      	adds	r3, #9
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	330a      	adds	r3, #10
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	330b      	adds	r3, #11
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4313      	orrs	r3, r2
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	330d      	adds	r3, #13
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	7b9a      	ldrb	r2, [r3, #14]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	7bda      	ldrb	r2, [r3, #15]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	7c1a      	ldrb	r2, [r3, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	7c5a      	ldrb	r2, [r3, #17]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	745a      	strb	r2, [r3, #17]
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	785a      	ldrb	r2, [r3, #1]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	3302      	adds	r3, #2
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	3303      	adds	r3, #3
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	4313      	orrs	r3, r2
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	791a      	ldrb	r2, [r3, #4]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	795a      	ldrb	r2, [r3, #5]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	799a      	ldrb	r2, [r3, #6]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	79da      	ldrb	r2, [r3, #7]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	7a1a      	ldrb	r2, [r3, #8]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	d95f      	bls.n	8007de0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007d20:	2309      	movs	r3, #9
 8007d22:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d28:	e051      	b.n	8007dce <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d2a:	f107 0316 	add.w	r3, r7, #22
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d32:	f000 f8e8 	bl	8007f06 <USBH_GetNextDesc>
 8007d36:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d146      	bne.n	8007dce <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d44:	221a      	movs	r2, #26
 8007d46:	fb02 f303 	mul.w	r3, r2, r3
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	3302      	adds	r3, #2
 8007d52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d56:	69f8      	ldr	r0, [r7, #28]
 8007d58:	f000 f846 	bl	8007de8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d66:	e022      	b.n	8007dae <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007d68:	f107 0316 	add.w	r3, r7, #22
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d70:	f000 f8c9 	bl	8007f06 <USBH_GetNextDesc>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d117      	bne.n	8007dae <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d86:	3201      	adds	r2, #1
 8007d88:	00d2      	lsls	r2, r2, #3
 8007d8a:	211a      	movs	r1, #26
 8007d8c:	fb01 f303 	mul.w	r3, r1, r3
 8007d90:	4413      	add	r3, r2
 8007d92:	3308      	adds	r3, #8
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	3304      	adds	r3, #4
 8007d9a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d9e:	69b8      	ldr	r0, [r7, #24]
 8007da0:	f000 f851 	bl	8007e46 <USBH_ParseEPDesc>
            ep_ix++;
 8007da4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007da8:	3301      	adds	r3, #1
 8007daa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d204      	bcs.n	8007dc4 <USBH_ParseCfgDesc+0x120>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	885a      	ldrh	r2, [r3, #2]
 8007dbe:	8afb      	ldrh	r3, [r7, #22]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d8d1      	bhi.n	8007d68 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dc8:	3301      	adds	r3, #1
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d804      	bhi.n	8007de0 <USBH_ParseCfgDesc+0x13c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	885a      	ldrh	r2, [r3, #2]
 8007dda:	8afb      	ldrh	r3, [r7, #22]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d8a4      	bhi.n	8007d2a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007de0:	bf00      	nop
 8007de2:	3728      	adds	r7, #40	; 0x28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	785a      	ldrb	r2, [r3, #1]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	789a      	ldrb	r2, [r3, #2]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	78da      	ldrb	r2, [r3, #3]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	791a      	ldrb	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	795a      	ldrb	r2, [r3, #5]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	799a      	ldrb	r2, [r3, #6]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	79da      	ldrb	r2, [r3, #7]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	7a1a      	ldrb	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	721a      	strb	r2, [r3, #8]
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785a      	ldrb	r2, [r3, #1]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	789a      	ldrb	r2, [r3, #2]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	78da      	ldrb	r2, [r3, #3]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3304      	adds	r3, #4
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	3305      	adds	r3, #5
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	799a      	ldrb	r2, [r3, #6]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	719a      	strb	r2, [r3, #6]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d120      	bne.n	8007efa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	1e9a      	subs	r2, r3, #2
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	bf28      	it	cs
 8007ec4:	4613      	movcs	r3, r2
 8007ec6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3302      	adds	r3, #2
 8007ecc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	82fb      	strh	r3, [r7, #22]
 8007ed2:	e00b      	b.n	8007eec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ed4:	8afb      	ldrh	r3, [r7, #22]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ee6:	8afb      	ldrh	r3, [r7, #22]
 8007ee8:	3302      	adds	r3, #2
 8007eea:	82fb      	strh	r3, [r7, #22]
 8007eec:	8afa      	ldrh	r2, [r7, #22]
 8007eee:	8abb      	ldrh	r3, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d3ef      	bcc.n	8007ed4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
  }
}
 8007efa:	bf00      	nop
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	881a      	ldrh	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4413      	add	r3, r2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	789b      	ldrb	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d002      	beq.n	8007f5c <USBH_CtlReq+0x20>
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d00f      	beq.n	8007f7a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007f5a:	e034      	b.n	8007fc6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2202      	movs	r2, #2
 8007f72:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
    break;
 8007f78:	e025      	b.n	8007fc6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f828 	bl	8007fd0 <USBH_HandleControl>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d108      	bne.n	8007f9c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
    break;
 8007f9a:	e013      	b.n	8007fc4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d108      	bne.n	8007fb4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	75fb      	strb	r3, [r7, #23]
    break;
 8007fb2:	e007      	b.n	8007fc4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d104      	bne.n	8007fc4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	75fb      	strb	r3, [r7, #23]
    break;
 8007fc4:	bf00      	nop
  }
  return status;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7e1b      	ldrb	r3, [r3, #24]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	2b0a      	cmp	r3, #10
 8007fe8:	f200 814c 	bhi.w	8008284 <USBH_HandleControl+0x2b4>
 8007fec:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <USBH_HandleControl+0x24>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008021 	.word	0x08008021
 8007ff8:	0800803b 	.word	0x0800803b
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	080080cb 	.word	0x080080cb
 8008004:	08008103 	.word	0x08008103
 8008008:	0800812f 	.word	0x0800812f
 800800c:	08008181 	.word	0x08008181
 8008010:	080081a3 	.word	0x080081a3
 8008014:	080081df 	.word	0x080081df
 8008018:	08008207 	.word	0x08008207
 800801c:	08008245 	.word	0x08008245
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 0110 	add.w	r1, r3, #16
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	795b      	ldrb	r3, [r3, #5]
 800802a:	461a      	mov	r2, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f939 	bl	80082a4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	761a      	strb	r2, [r3, #24]
    break;
 8008038:	e12f      	b.n	800829a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 fc51 	bl	80098e8 <USBH_LL_GetURBState>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d11e      	bne.n	800808e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008058:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8adb      	ldrh	r3, [r3, #22]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008062:	7b7b      	ldrb	r3, [r7, #13]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d103      	bne.n	8008070 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2203      	movs	r2, #3
 800806c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800806e:	e10b      	b.n	8008288 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2205      	movs	r2, #5
 8008074:	761a      	strb	r2, [r3, #24]
    break;
 8008076:	e107      	b.n	8008288 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008078:	7b7b      	ldrb	r3, [r7, #13]
 800807a:	2b80      	cmp	r3, #128	; 0x80
 800807c:	d103      	bne.n	8008086 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2209      	movs	r2, #9
 8008082:	761a      	strb	r2, [r3, #24]
    break;
 8008084:	e100      	b.n	8008288 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2207      	movs	r2, #7
 800808a:	761a      	strb	r2, [r3, #24]
    break;
 800808c:	e0fc      	b.n	8008288 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b04      	cmp	r3, #4
 8008092:	d003      	beq.n	800809c <USBH_HandleControl+0xcc>
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b02      	cmp	r3, #2
 8008098:	f040 80f6 	bne.w	8008288 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	220b      	movs	r2, #11
 80080a0:	761a      	strb	r2, [r3, #24]
    break;
 80080a2:	e0f1      	b.n	8008288 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6899      	ldr	r1, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	899a      	ldrh	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	791b      	ldrb	r3, [r3, #4]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f930 	bl	8008322 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2204      	movs	r2, #4
 80080c6:	761a      	strb	r2, [r3, #24]
    break;
 80080c8:	e0e7      	b.n	800829a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	791b      	ldrb	r3, [r3, #4]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fc09 	bl	80098e8 <USBH_LL_GetURBState>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d102      	bne.n	80080e6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2209      	movs	r2, #9
 80080e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	2b05      	cmp	r3, #5
 80080ea:	d102      	bne.n	80080f2 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80080ec:	2303      	movs	r3, #3
 80080ee:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80080f0:	e0cc      	b.n	800828c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	f040 80c9 	bne.w	800828c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	220b      	movs	r2, #11
 80080fe:	761a      	strb	r2, [r3, #24]
    break;
 8008100:	e0c4      	b.n	800828c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6899      	ldr	r1, [r3, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	899a      	ldrh	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7958      	ldrb	r0, [r3, #5]
 800810e:	2301      	movs	r3, #1
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	4603      	mov	r3, r0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f8df 	bl	80082d8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008120:	b29a      	uxth	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2206      	movs	r2, #6
 800812a:	761a      	strb	r2, [r3, #24]
    break;
 800812c:	e0b5      	b.n	800829a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	795b      	ldrb	r3, [r3, #5]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fbd7 	bl	80098e8 <USBH_LL_GetURBState>
 800813a:	4603      	mov	r3, r0
 800813c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d103      	bne.n	800814c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2207      	movs	r2, #7
 8008148:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800814a:	e0a1      	b.n	8008290 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b05      	cmp	r3, #5
 8008150:	d105      	bne.n	800815e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	220c      	movs	r2, #12
 8008156:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008158:	2303      	movs	r3, #3
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	e098      	b.n	8008290 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d103      	bne.n	800816c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2205      	movs	r2, #5
 8008168:	761a      	strb	r2, [r3, #24]
    break;
 800816a:	e091      	b.n	8008290 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b04      	cmp	r3, #4
 8008170:	f040 808e 	bne.w	8008290 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	220b      	movs	r2, #11
 8008178:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800817a:	2302      	movs	r3, #2
 800817c:	73fb      	strb	r3, [r7, #15]
    break;
 800817e:	e087      	b.n	8008290 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8ca 	bl	8008322 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2208      	movs	r2, #8
 800819e:	761a      	strb	r2, [r3, #24]

    break;
 80081a0:	e07b      	b.n	800829a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	791b      	ldrb	r3, [r3, #4]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fb9d 	bl	80098e8 <USBH_LL_GetURBState>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d105      	bne.n	80081c4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	220d      	movs	r2, #13
 80081bc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80081c2:	e067      	b.n	8008294 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d103      	bne.n	80081d2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	220b      	movs	r2, #11
 80081ce:	761a      	strb	r2, [r3, #24]
    break;
 80081d0:	e060      	b.n	8008294 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d15d      	bne.n	8008294 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	e05a      	b.n	8008294 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	795a      	ldrb	r2, [r3, #5]
 80081e2:	2301      	movs	r3, #1
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f873 	bl	80082d8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220a      	movs	r2, #10
 8008202:	761a      	strb	r2, [r3, #24]
    break;
 8008204:	e049      	b.n	800829a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fb6b 	bl	80098e8 <USBH_LL_GetURBState>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d105      	bne.n	8008228 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220d      	movs	r2, #13
 8008224:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8008226:	e037      	b.n	8008298 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2209      	movs	r2, #9
 8008232:	761a      	strb	r2, [r3, #24]
    break;
 8008234:	e030      	b.n	8008298 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d12d      	bne.n	8008298 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	220b      	movs	r2, #11
 8008240:	761a      	strb	r2, [r3, #24]
    break;
 8008242:	e029      	b.n	8008298 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7e5b      	ldrb	r3, [r3, #25]
 8008248:	3301      	adds	r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	765a      	strb	r2, [r3, #25]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7e5b      	ldrb	r3, [r3, #25]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d809      	bhi.n	800826c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fa58 	bl	800970e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800826a:	e016      	b.n	800829a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008272:	2106      	movs	r1, #6
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800827e:	2302      	movs	r3, #2
 8008280:	73fb      	strb	r3, [r7, #15]
    break;
 8008282:	e00a      	b.n	800829a <USBH_HandleControl+0x2ca>

  default:
    break;
 8008284:	bf00      	nop
 8008286:	e008      	b.n	800829a <USBH_HandleControl+0x2ca>
    break;
 8008288:	bf00      	nop
 800828a:	e006      	b.n	800829a <USBH_HandleControl+0x2ca>
    break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <USBH_HandleControl+0x2ca>
    break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <USBH_HandleControl+0x2ca>
    break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <USBH_HandleControl+0x2ca>
    break;
 8008298:	bf00      	nop
  }
  return status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80082b2:	79f9      	ldrb	r1, [r7, #7]
 80082b4:	2300      	movs	r3, #0
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	2308      	movs	r3, #8
 80082ba:	9302      	str	r3, [sp, #8]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	2300      	movs	r3, #0
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f001 fadc 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af04      	add	r7, sp, #16
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4611      	mov	r1, r2
 80082e4:	461a      	mov	r2, r3
 80082e6:	460b      	mov	r3, r1
 80082e8:	80fb      	strh	r3, [r7, #6]
 80082ea:	4613      	mov	r3, r2
 80082ec:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80082fc:	7979      	ldrb	r1, [r7, #5]
 80082fe:	7e3b      	ldrb	r3, [r7, #24]
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	9302      	str	r3, [sp, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	2301      	movs	r3, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2300      	movs	r3, #0
 8008310:	2200      	movs	r2, #0
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f001 fab7 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b088      	sub	sp, #32
 8008326:	af04      	add	r7, sp, #16
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	4611      	mov	r1, r2
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	80fb      	strh	r3, [r7, #6]
 8008334:	4613      	mov	r3, r2
 8008336:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008338:	7979      	ldrb	r1, [r7, #5]
 800833a:	2300      	movs	r3, #0
 800833c:	9303      	str	r3, [sp, #12]
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	2301      	movs	r3, #1
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	2201      	movs	r2, #1
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f001 fa99 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008354:	2300      	movs	r3, #0

}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b088      	sub	sp, #32
 8008362:	af04      	add	r7, sp, #16
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	4611      	mov	r1, r2
 800836a:	461a      	mov	r2, r3
 800836c:	460b      	mov	r3, r1
 800836e:	80fb      	strh	r3, [r7, #6]
 8008370:	4613      	mov	r3, r2
 8008372:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008382:	7979      	ldrb	r1, [r7, #5]
 8008384:	7e3b      	ldrb	r3, [r7, #24]
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	9302      	str	r3, [sp, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	2301      	movs	r3, #1
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2302      	movs	r3, #2
 8008396:	2200      	movs	r2, #0
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f001 fa74 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af04      	add	r7, sp, #16
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4611      	mov	r1, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	460b      	mov	r3, r1
 80083b8:	80fb      	strh	r3, [r7, #6]
 80083ba:	4613      	mov	r3, r2
 80083bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80083be:	7979      	ldrb	r1, [r7, #5]
 80083c0:	2300      	movs	r3, #0
 80083c2:	9303      	str	r3, [sp, #12]
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	9302      	str	r3, [sp, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	2301      	movs	r3, #1
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	2302      	movs	r3, #2
 80083d2:	2201      	movs	r2, #1
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f001 fa56 	bl	8009886 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af04      	add	r7, sp, #16
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	4608      	mov	r0, r1
 80083ee:	4611      	mov	r1, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	70fb      	strb	r3, [r7, #3]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70bb      	strb	r3, [r7, #2]
 80083fa:	4613      	mov	r3, r2
 80083fc:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80083fe:	7878      	ldrb	r0, [r7, #1]
 8008400:	78ba      	ldrb	r2, [r7, #2]
 8008402:	78f9      	ldrb	r1, [r7, #3]
 8008404:	8b3b      	ldrh	r3, [r7, #24]
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	7d3b      	ldrb	r3, [r7, #20]
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	7c3b      	ldrb	r3, [r7, #16]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	4603      	mov	r3, r0
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 f9e9 	bl	80097ea <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008418:	2300      	movs	r3, #0

}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fa08 	bl	8009848 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008438:	2300      	movs	r3, #0

}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f831 	bl	80084b6 <USBH_GetFreePipe>
 8008454:	4603      	mov	r3, r0
 8008456:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800845e:	4293      	cmp	r3, r2
 8008460:	d007      	beq.n	8008472 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	89fa      	ldrh	r2, [r7, #14]
 8008466:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	32e0      	adds	r2, #224	; 0xe0
 800846e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008472:	89fb      	ldrh	r3, [r7, #14]
 8008474:	b2db      	uxtb	r3, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	2b0a      	cmp	r3, #10
 800848e:	d80b      	bhi.n	80084a8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	32e0      	adds	r2, #224	; 0xe0
 8008496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	32e0      	adds	r2, #224	; 0xe0
 80084a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
 80084c6:	e00e      	b.n	80084e6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32e0      	adds	r2, #224	; 0xe0
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	e007      	b.n	80084f0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	3301      	adds	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b0a      	cmp	r3, #10
 80084ea:	d9ed      	bls.n	80084c8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80084ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08c      	sub	sp, #48	; 0x30
 8008500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008502:	f107 031c 	add.w	r3, r7, #28
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	605a      	str	r2, [r3, #4]
 800850c:	609a      	str	r2, [r3, #8]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008512:	4b92      	ldr	r3, [pc, #584]	; (800875c <MX_GPIO_Init+0x260>)
 8008514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008516:	4a91      	ldr	r2, [pc, #580]	; (800875c <MX_GPIO_Init+0x260>)
 8008518:	f043 0310 	orr.w	r3, r3, #16
 800851c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800851e:	4b8f      	ldr	r3, [pc, #572]	; (800875c <MX_GPIO_Init+0x260>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	61bb      	str	r3, [r7, #24]
 8008528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800852a:	4b8c      	ldr	r3, [pc, #560]	; (800875c <MX_GPIO_Init+0x260>)
 800852c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852e:	4a8b      	ldr	r2, [pc, #556]	; (800875c <MX_GPIO_Init+0x260>)
 8008530:	f043 0304 	orr.w	r3, r3, #4
 8008534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008536:	4b89      	ldr	r3, [pc, #548]	; (800875c <MX_GPIO_Init+0x260>)
 8008538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008542:	4b86      	ldr	r3, [pc, #536]	; (800875c <MX_GPIO_Init+0x260>)
 8008544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008546:	4a85      	ldr	r2, [pc, #532]	; (800875c <MX_GPIO_Init+0x260>)
 8008548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800854e:	4b83      	ldr	r3, [pc, #524]	; (800875c <MX_GPIO_Init+0x260>)
 8008550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800855a:	4b80      	ldr	r3, [pc, #512]	; (800875c <MX_GPIO_Init+0x260>)
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	4a7f      	ldr	r2, [pc, #508]	; (800875c <MX_GPIO_Init+0x260>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008566:	4b7d      	ldr	r3, [pc, #500]	; (800875c <MX_GPIO_Init+0x260>)
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008572:	4b7a      	ldr	r3, [pc, #488]	; (800875c <MX_GPIO_Init+0x260>)
 8008574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008576:	4a79      	ldr	r2, [pc, #484]	; (800875c <MX_GPIO_Init+0x260>)
 8008578:	f043 0302 	orr.w	r3, r3, #2
 800857c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800857e:	4b77      	ldr	r3, [pc, #476]	; (800875c <MX_GPIO_Init+0x260>)
 8008580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	60bb      	str	r3, [r7, #8]
 8008588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800858a:	4b74      	ldr	r3, [pc, #464]	; (800875c <MX_GPIO_Init+0x260>)
 800858c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858e:	4a73      	ldr	r2, [pc, #460]	; (800875c <MX_GPIO_Init+0x260>)
 8008590:	f043 0308 	orr.w	r3, r3, #8
 8008594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008596:	4b71      	ldr	r3, [pc, #452]	; (800875c <MX_GPIO_Init+0x260>)
 8008598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	607b      	str	r3, [r7, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80085a2:	2200      	movs	r2, #0
 80085a4:	f240 1109 	movw	r1, #265	; 0x109
 80085a8:	486d      	ldr	r0, [pc, #436]	; (8008760 <MX_GPIO_Init+0x264>)
 80085aa:	f7f8 fb21 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80085ae:	2200      	movs	r2, #0
 80085b0:	210c      	movs	r1, #12
 80085b2:	486c      	ldr	r0, [pc, #432]	; (8008764 <MX_GPIO_Init+0x268>)
 80085b4:	f7f8 fb1c 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80085b8:	2201      	movs	r2, #1
 80085ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085be:	486a      	ldr	r0, [pc, #424]	; (8008768 <MX_GPIO_Init+0x26c>)
 80085c0:	f7f8 fb16 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80085c4:	2200      	movs	r2, #0
 80085c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085ca:	4867      	ldr	r0, [pc, #412]	; (8008768 <MX_GPIO_Init+0x26c>)
 80085cc:	f7f8 fb10 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80085d0:	2200      	movs	r2, #0
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	4865      	ldr	r0, [pc, #404]	; (800876c <MX_GPIO_Init+0x270>)
 80085d6:	f7f8 fb0b 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80085da:	2308      	movs	r3, #8
 80085dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085de:	2301      	movs	r3, #1
 80085e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085e6:	2302      	movs	r3, #2
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80085ea:	f107 031c 	add.w	r3, r7, #28
 80085ee:	4619      	mov	r1, r3
 80085f0:	485b      	ldr	r0, [pc, #364]	; (8008760 <MX_GPIO_Init+0x264>)
 80085f2:	f7f8 f955 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80085f6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80085fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80085fc:	4b5c      	ldr	r3, [pc, #368]	; (8008770 <MX_GPIO_Init+0x274>)
 80085fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008600:	2300      	movs	r3, #0
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008604:	f107 031c 	add.w	r3, r7, #28
 8008608:	4619      	mov	r1, r3
 800860a:	4857      	ldr	r0, [pc, #348]	; (8008768 <MX_GPIO_Init+0x26c>)
 800860c:	f7f8 f948 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8008610:	2307      	movs	r3, #7
 8008612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008614:	2300      	movs	r3, #0
 8008616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800861c:	f107 031c 	add.w	r3, r7, #28
 8008620:	4619      	mov	r1, r3
 8008622:	4851      	ldr	r0, [pc, #324]	; (8008768 <MX_GPIO_Init+0x26c>)
 8008624:	f7f8 f93c 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_DOWN_Pin;
 8008628:	2323      	movs	r3, #35	; 0x23
 800862a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800862c:	2300      	movs	r3, #0
 800862e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008630:	2302      	movs	r3, #2
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008634:	f107 031c 	add.w	r3, r7, #28
 8008638:	4619      	mov	r1, r3
 800863a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800863e:	f7f8 f92f 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8008642:	2310      	movs	r3, #16
 8008644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008646:	4b4a      	ldr	r3, [pc, #296]	; (8008770 <MX_GPIO_Init+0x274>)
 8008648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864a:	2300      	movs	r3, #0
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800864e:	f107 031c 	add.w	r3, r7, #28
 8008652:	4619      	mov	r1, r3
 8008654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008658:	f7f8 f922 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800865c:	2304      	movs	r3, #4
 800865e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008660:	2301      	movs	r3, #1
 8008662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008664:	2301      	movs	r3, #1
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008668:	2303      	movs	r3, #3
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800866c:	f107 031c 	add.w	r3, r7, #28
 8008670:	4619      	mov	r1, r3
 8008672:	483c      	ldr	r0, [pc, #240]	; (8008764 <MX_GPIO_Init+0x268>)
 8008674:	f7f8 f914 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8008678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800867c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800867e:	2301      	movs	r3, #1
 8008680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008682:	2301      	movs	r3, #1
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008686:	2303      	movs	r3, #3
 8008688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800868a:	f107 031c 	add.w	r3, r7, #28
 800868e:	4619      	mov	r1, r3
 8008690:	4833      	ldr	r0, [pc, #204]	; (8008760 <MX_GPIO_Init+0x264>)
 8008692:	f7f8 f905 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8008696:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800869a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800869c:	2301      	movs	r3, #1
 800869e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086a4:	2300      	movs	r3, #0
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086a8:	f107 031c 	add.w	r3, r7, #28
 80086ac:	4619      	mov	r1, r3
 80086ae:	482e      	ldr	r0, [pc, #184]	; (8008768 <MX_GPIO_Init+0x26c>)
 80086b0:	f7f8 f8f6 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80086b4:	2305      	movs	r3, #5
 80086b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80086b8:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <MX_GPIO_Init+0x274>)
 80086ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086c0:	f107 031c 	add.w	r3, r7, #28
 80086c4:	4619      	mov	r1, r3
 80086c6:	4829      	ldr	r0, [pc, #164]	; (800876c <MX_GPIO_Init+0x270>)
 80086c8:	f7f8 f8ea 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086d0:	2301      	movs	r3, #1
 80086d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086d8:	2303      	movs	r3, #3
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80086dc:	f107 031c 	add.w	r3, r7, #28
 80086e0:	4619      	mov	r1, r3
 80086e2:	4822      	ldr	r0, [pc, #136]	; (800876c <MX_GPIO_Init+0x270>)
 80086e4:	f7f8 f8dc 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80086e8:	2308      	movs	r3, #8
 80086ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ec:	2301      	movs	r3, #1
 80086ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f4:	2300      	movs	r3, #0
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80086f8:	f107 031c 	add.w	r3, r7, #28
 80086fc:	4619      	mov	r1, r3
 80086fe:	4819      	ldr	r0, [pc, #100]	; (8008764 <MX_GPIO_Init+0x268>)
 8008700:	f7f8 f8ce 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8008704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800870a:	4b19      	ldr	r3, [pc, #100]	; (8008770 <MX_GPIO_Init+0x274>)
 800870c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870e:	2300      	movs	r3, #0
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8008712:	f107 031c 	add.w	r3, r7, #28
 8008716:	4619      	mov	r1, r3
 8008718:	4812      	ldr	r0, [pc, #72]	; (8008764 <MX_GPIO_Init+0x268>)
 800871a:	f7f8 f8c1 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800871e:	2301      	movs	r3, #1
 8008720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008722:	2301      	movs	r3, #1
 8008724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008726:	2300      	movs	r3, #0
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800872a:	2300      	movs	r3, #0
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800872e:	f107 031c 	add.w	r3, r7, #28
 8008732:	4619      	mov	r1, r3
 8008734:	480a      	ldr	r0, [pc, #40]	; (8008760 <MX_GPIO_Init+0x264>)
 8008736:	f7f8 f8b3 	bl	80008a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 800873a:	2302      	movs	r3, #2
 800873c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <MX_GPIO_Init+0x274>)
 8008740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8008746:	f107 031c 	add.w	r3, r7, #28
 800874a:	4619      	mov	r1, r3
 800874c:	4804      	ldr	r0, [pc, #16]	; (8008760 <MX_GPIO_Init+0x264>)
 800874e:	f7f8 f8a7 	bl	80008a0 <HAL_GPIO_Init>

}
 8008752:	bf00      	nop
 8008754:	3730      	adds	r7, #48	; 0x30
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40021000 	.word	0x40021000
 8008760:	48001000 	.word	0x48001000
 8008764:	48000400 	.word	0x48000400
 8008768:	48000800 	.word	0x48000800
 800876c:	48000c00 	.word	0x48000c00
 8008770:	10120000 	.word	0x10120000

08008774 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <MX_I2C1_Init+0x74>)
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <MX_I2C1_Init+0x78>)
 800877c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800877e:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <MX_I2C1_Init+0x74>)
 8008780:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <MX_I2C1_Init+0x7c>)
 8008782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008784:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <MX_I2C1_Init+0x74>)
 8008786:	2200      	movs	r2, #0
 8008788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800878a:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <MX_I2C1_Init+0x74>)
 800878c:	2201      	movs	r2, #1
 800878e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008790:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <MX_I2C1_Init+0x74>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <MX_I2C1_Init+0x74>)
 8008798:	2200      	movs	r2, #0
 800879a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800879c:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <MX_I2C1_Init+0x74>)
 800879e:	2200      	movs	r2, #0
 80087a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80087a2:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <MX_I2C1_Init+0x74>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <MX_I2C1_Init+0x74>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80087ae:	480e      	ldr	r0, [pc, #56]	; (80087e8 <MX_I2C1_Init+0x74>)
 80087b0:	f7f9 fe56 	bl	8002460 <HAL_I2C_Init>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80087ba:	f000 fae3 	bl	8008d84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80087be:	2100      	movs	r1, #0
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <MX_I2C1_Init+0x74>)
 80087c2:	f7f9 fedc 	bl	800257e <HAL_I2CEx_ConfigAnalogFilter>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80087cc:	f000 fada 	bl	8008d84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80087d0:	2100      	movs	r1, #0
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <MX_I2C1_Init+0x74>)
 80087d4:	f7f9 ff1e 	bl	8002614 <HAL_I2CEx_ConfigDigitalFilter>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80087de:	f000 fad1 	bl	8008d84 <Error_Handler>
  }

}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200000c8 	.word	0x200000c8
 80087ec:	40005400 	.word	0x40005400
 80087f0:	00909beb 	.word	0x00909beb

080087f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80087f8:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <MX_I2C2_Init+0x74>)
 80087fa:	4a1c      	ldr	r2, [pc, #112]	; (800886c <MX_I2C2_Init+0x78>)
 80087fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 80087fe:	4b1a      	ldr	r3, [pc, #104]	; (8008868 <MX_I2C2_Init+0x74>)
 8008800:	4a1b      	ldr	r2, [pc, #108]	; (8008870 <MX_I2C2_Init+0x7c>)
 8008802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008804:	4b18      	ldr	r3, [pc, #96]	; (8008868 <MX_I2C2_Init+0x74>)
 8008806:	2200      	movs	r2, #0
 8008808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800880a:	4b17      	ldr	r3, [pc, #92]	; (8008868 <MX_I2C2_Init+0x74>)
 800880c:	2201      	movs	r2, #1
 800880e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008810:	4b15      	ldr	r3, [pc, #84]	; (8008868 <MX_I2C2_Init+0x74>)
 8008812:	2200      	movs	r2, #0
 8008814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008816:	4b14      	ldr	r3, [pc, #80]	; (8008868 <MX_I2C2_Init+0x74>)
 8008818:	2200      	movs	r2, #0
 800881a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800881c:	4b12      	ldr	r3, [pc, #72]	; (8008868 <MX_I2C2_Init+0x74>)
 800881e:	2200      	movs	r2, #0
 8008820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <MX_I2C2_Init+0x74>)
 8008824:	2200      	movs	r2, #0
 8008826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <MX_I2C2_Init+0x74>)
 800882a:	2200      	movs	r2, #0
 800882c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800882e:	480e      	ldr	r0, [pc, #56]	; (8008868 <MX_I2C2_Init+0x74>)
 8008830:	f7f9 fe16 	bl	8002460 <HAL_I2C_Init>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800883a:	f000 faa3 	bl	8008d84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800883e:	2100      	movs	r1, #0
 8008840:	4809      	ldr	r0, [pc, #36]	; (8008868 <MX_I2C2_Init+0x74>)
 8008842:	f7f9 fe9c 	bl	800257e <HAL_I2CEx_ConfigAnalogFilter>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800884c:	f000 fa9a 	bl	8008d84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008850:	2100      	movs	r1, #0
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <MX_I2C2_Init+0x74>)
 8008854:	f7f9 fede 	bl	8002614 <HAL_I2CEx_ConfigDigitalFilter>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800885e:	f000 fa91 	bl	8008d84 <Error_Handler>
  }

}
 8008862:	bf00      	nop
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000114 	.word	0x20000114
 800886c:	40005800 	.word	0x40005800
 8008870:	00909beb 	.word	0x00909beb

08008874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08c      	sub	sp, #48	; 0x30
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800887c:	f107 031c 	add.w	r3, r7, #28
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	605a      	str	r2, [r3, #4]
 8008886:	609a      	str	r2, [r3, #8]
 8008888:	60da      	str	r2, [r3, #12]
 800888a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2e      	ldr	r2, [pc, #184]	; (800894c <HAL_I2C_MspInit+0xd8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d128      	bne.n	80088e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008896:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 8008898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889a:	4a2d      	ldr	r2, [pc, #180]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 800889c:	f043 0302 	orr.w	r3, r3, #2
 80088a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088a2:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80088ae:	23c0      	movs	r3, #192	; 0xc0
 80088b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088b2:	2312      	movs	r3, #18
 80088b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088b6:	2301      	movs	r3, #1
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ba:	2303      	movs	r3, #3
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088be:	2304      	movs	r3, #4
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088c2:	f107 031c 	add.w	r3, r7, #28
 80088c6:	4619      	mov	r1, r3
 80088c8:	4822      	ldr	r0, [pc, #136]	; (8008954 <HAL_I2C_MspInit+0xe0>)
 80088ca:	f7f7 ffe9 	bl	80008a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d2:	4a1f      	ldr	r2, [pc, #124]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088d8:	6593      	str	r3, [r2, #88]	; 0x58
 80088da:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80088e6:	e02d      	b.n	8008944 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1a      	ldr	r2, [pc, #104]	; (8008958 <HAL_I2C_MspInit+0xe4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d128      	bne.n	8008944 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 8008900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800890a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800890e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008910:	2312      	movs	r3, #18
 8008912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008914:	2301      	movs	r3, #1
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008918:	2303      	movs	r3, #3
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800891c:	2304      	movs	r3, #4
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008920:	f107 031c 	add.w	r3, r7, #28
 8008924:	4619      	mov	r1, r3
 8008926:	480b      	ldr	r0, [pc, #44]	; (8008954 <HAL_I2C_MspInit+0xe0>)
 8008928:	f7f7 ffba 	bl	80008a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 800892e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008930:	4a07      	ldr	r2, [pc, #28]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 8008932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008936:	6593      	str	r3, [r2, #88]	; 0x58
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <HAL_I2C_MspInit+0xdc>)
 800893a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	68fb      	ldr	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	3730      	adds	r7, #48	; 0x30
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40005400 	.word	0x40005400
 8008950:	40021000 	.word	0x40021000
 8008954:	48000400 	.word	0x48000400
 8008958:	40005800 	.word	0x40005800

0800895c <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8008960:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <MX_LCD_Init+0x68>)
 8008962:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <MX_LCD_Init+0x6c>)
 8008964:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8008966:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <MX_LCD_Init+0x68>)
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <MX_LCD_Init+0x68>)
 800896e:	2200      	movs	r2, #0
 8008970:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <MX_LCD_Init+0x68>)
 8008974:	220c      	movs	r2, #12
 8008976:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <MX_LCD_Init+0x68>)
 800897a:	2200      	movs	r2, #0
 800897c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <MX_LCD_Init+0x68>)
 8008980:	2200      	movs	r2, #0
 8008982:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <MX_LCD_Init+0x68>)
 8008986:	2200      	movs	r2, #0
 8008988:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <MX_LCD_Init+0x68>)
 800898c:	2200      	movs	r2, #0
 800898e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <MX_LCD_Init+0x68>)
 8008992:	2200      	movs	r2, #0
 8008994:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <MX_LCD_Init+0x68>)
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <MX_LCD_Init+0x68>)
 800899e:	2200      	movs	r2, #0
 80089a0:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80089a2:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <MX_LCD_Init+0x68>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <MX_LCD_Init+0x68>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <MX_LCD_Init+0x68>)
 80089b0:	f7f9 fe7c 	bl	80026ac <HAL_LCD_Init>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80089ba:	f000 f9e3 	bl	8008d84 <Error_Handler>
  }

}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000160 	.word	0x20000160
 80089c8:	40002400 	.word	0x40002400

080089cc <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08c      	sub	sp, #48	; 0x30
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	f107 031c 	add.w	r3, r7, #28
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a44      	ldr	r2, [pc, #272]	; (8008afc <HAL_LCD_MspInit+0x130>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	f040 8081 	bne.w	8008af2 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80089f0:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f4:	4a42      	ldr	r2, [pc, #264]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 80089f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089fa:	6593      	str	r3, [r2, #88]	; 0x58
 80089fc:	4b40      	ldr	r3, [pc, #256]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a08:	4b3d      	ldr	r3, [pc, #244]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0c:	4a3c      	ldr	r2, [pc, #240]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a14:	4b3a      	ldr	r3, [pc, #232]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a20:	4b37      	ldr	r3, [pc, #220]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a24:	4a36      	ldr	r2, [pc, #216]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a2c:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3c:	4a30      	ldr	r2, [pc, #192]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a44:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a50:	4b2b      	ldr	r3, [pc, #172]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a54:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a56:	f043 0308 	orr.w	r3, r3, #8
 8008a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a5c:	4b28      	ldr	r3, [pc, #160]	; (8008b00 <HAL_LCD_MspInit+0x134>)
 8008a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8008a68:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8008a6c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a76:	2300      	movs	r3, #0
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8008a7a:	230b      	movs	r3, #11
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a7e:	f107 031c 	add.w	r3, r7, #28
 8008a82:	4619      	mov	r1, r3
 8008a84:	481f      	ldr	r0, [pc, #124]	; (8008b04 <HAL_LCD_MspInit+0x138>)
 8008a86:	f7f7 ff0b 	bl	80008a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8008a8a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8008a8e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a90:	2302      	movs	r3, #2
 8008a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8008a9c:	230b      	movs	r3, #11
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aa0:	f107 031c 	add.w	r3, r7, #28
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008aaa:	f7f7 fef9 	bl	80008a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8008aae:	f24f 2333 	movw	r3, #62003	; 0xf233
 8008ab2:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008abc:	2300      	movs	r3, #0
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8008ac0:	230b      	movs	r3, #11
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ac4:	f107 031c 	add.w	r3, r7, #28
 8008ac8:	4619      	mov	r1, r3
 8008aca:	480f      	ldr	r0, [pc, #60]	; (8008b08 <HAL_LCD_MspInit+0x13c>)
 8008acc:	f7f7 fee8 	bl	80008a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8008ad0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8008ad4:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8008ae2:	230b      	movs	r3, #11
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ae6:	f107 031c 	add.w	r3, r7, #28
 8008aea:	4619      	mov	r1, r3
 8008aec:	4807      	ldr	r0, [pc, #28]	; (8008b0c <HAL_LCD_MspInit+0x140>)
 8008aee:	f7f7 fed7 	bl	80008a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8008af2:	bf00      	nop
 8008af4:	3730      	adds	r7, #48	; 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	40002400 	.word	0x40002400
 8008b00:	40021000 	.word	0x40021000
 8008b04:	48000800 	.word	0x48000800
 8008b08:	48000400 	.word	0x48000400
 8008b0c:	48000c00 	.word	0x48000c00

08008b10 <crcusha>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned int crcusha (unsigned char *packet, int nBytes) {
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	82fb      	strh	r3, [r7, #22]
	for (int byte = 0; byte < nBytes; byte++) {
 8008b1e:	2300      	movs	r3, #0
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	e026      	b.n	8008b72 <crcusha+0x62>
	 crc = crc ^ ((unsigned int)packet[byte] << 8);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	4053      	eors	r3, r2
 8008b36:	82fb      	strh	r3, [r7, #22]
	 for (unsigned char bit = 0; bit < 8; bit++) {
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e013      	b.n	8008b66 <crcusha+0x56>
		 if (crc & 0x8000) {
 8008b3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da09      	bge.n	8008b5a <crcusha+0x4a>
			 crc = (crc << 1) ^ 0x1021;
 8008b46:	8afb      	ldrh	r3, [r7, #22]
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	b21b      	sxth	r3, r3
 8008b4c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8008b50:	f083 0301 	eor.w	r3, r3, #1
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	82fb      	strh	r3, [r7, #22]
 8008b58:	e002      	b.n	8008b60 <crcusha+0x50>
		 } else {
			 crc = crc << 1;
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	82fb      	strh	r3, [r7, #22]
	 for (unsigned char bit = 0; bit < 8; bit++) {
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	3301      	adds	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b07      	cmp	r3, #7
 8008b6a:	d9e8      	bls.n	8008b3e <crcusha+0x2e>
	for (int byte = 0; byte < nBytes; byte++) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	dbd4      	blt.n	8008b24 <crcusha+0x14>
		 }
	 }
	}
	return crc;
 8008b7a:	8afb      	ldrh	r3, [r7, #22]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <motorForward>:

HAL_StatusTypeDef motorForward(unsigned char roboclaw, unsigned char motor, unsigned char speed) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
 8008b92:	460b      	mov	r3, r1
 8008b94:	71bb      	strb	r3, [r7, #6]
 8008b96:	4613      	mov	r3, r2
 8008b98:	717b      	strb	r3, [r7, #5]
	unsigned char buffer[5];
	buffer[0] = roboclaw;
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	723b      	strb	r3, [r7, #8]
	if(motor == 0) buffer[1] = 0;
 8008b9e:	79bb      	ldrb	r3, [r7, #6]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <motorForward+0x22>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	727b      	strb	r3, [r7, #9]
 8008ba8:	e004      	b.n	8008bb4 <motorForward+0x2c>
	else if(motor == 1) buffer[1] = 4;
 8008baa:	79bb      	ldrb	r3, [r7, #6]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <motorForward+0x2c>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	727b      	strb	r3, [r7, #9]
	buffer[2] = speed;
 8008bb4:	797b      	ldrb	r3, [r7, #5]
 8008bb6:	72bb      	strb	r3, [r7, #10]
	unsigned short crc = crcusha(buffer, 3);
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	2103      	movs	r1, #3
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff ffa6 	bl	8008b10 <crcusha>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	81fb      	strh	r3, [r7, #14]
	buffer[3] = crc>>8;
 8008bc8:	89fb      	ldrh	r3, [r7, #14]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	72fb      	strb	r3, [r7, #11]
	buffer[4] = crc;
 8008bd2:	89fb      	ldrh	r3, [r7, #14]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit(&huart2, buffer, 5, 100);
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	2364      	movs	r3, #100	; 0x64
 8008bde:	2205      	movs	r2, #5
 8008be0:	4803      	ldr	r0, [pc, #12]	; (8008bf0 <motorForward+0x68>)
 8008be2:	f7fc f9b7 	bl	8004f54 <HAL_UART_Transmit>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	2000034c 	.word	0x2000034c

08008bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bf8:	f7f7 fc66 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bfc:	f000 f82c 	bl	8008c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c00:	f7ff fc7c 	bl	80084fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8008c04:	f7ff fdb6 	bl	8008774 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008c08:	f7ff fdf4 	bl	80087f4 <MX_I2C2_Init>
  MX_LCD_Init();
 8008c0c:	f7ff fea6 	bl	800895c <MX_LCD_Init>
  MX_QUADSPI_Init();
 8008c10:	f000 f8c0 	bl	8008d94 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8008c14:	f000 f928 	bl	8008e68 <MX_SAI1_Init>
  MX_SPI2_Init();
 8008c18:	f000 fa46 	bl	80090a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8008c1c:	f000 fb8e 	bl	800933c <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8008c20:	f000 fc06 	bl	8009430 <MX_USB_HOST_Init>
//  HAL_UART_Transmit(&huart2, data, 5, 100);
//  HAL_Delay(3000);
//  char data1[5] = {0x80, 0x00, 0x00, 0x3B, 0x5A};
//  HAL_UART_Transmit(&huart2, data1, 5, 100);

  	  motorForward(roboclaw0, 0, 20);
 8008c24:	2214      	movs	r2, #20
 8008c26:	2100      	movs	r1, #0
 8008c28:	2080      	movs	r0, #128	; 0x80
 8008c2a:	f7ff ffad 	bl	8008b88 <motorForward>
  	  HAL_Delay(50);
 8008c2e:	2032      	movs	r0, #50	; 0x32
 8008c30:	f7f7 fcc2 	bl	80005b8 <HAL_Delay>
  	  motorForward(roboclaw0, 0, 5);
 8008c34:	2205      	movs	r2, #5
 8008c36:	2100      	movs	r1, #0
 8008c38:	2080      	movs	r0, #128	; 0x80
 8008c3a:	f7ff ffa5 	bl	8008b88 <motorForward>
  	  HAL_Delay(3000);
 8008c3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008c42:	f7f7 fcb9 	bl	80005b8 <HAL_Delay>
  	  motorForward(roboclaw0, 0, 0);
 8008c46:	2200      	movs	r2, #0
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2080      	movs	r0, #128	; 0x80
 8008c4c:	f7ff ff9c 	bl	8008b88 <motorForward>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008c50:	f000 fc14 	bl	800947c <MX_USB_HOST_Process>
 8008c54:	e7fc      	b.n	8008c50 <main+0x5c>
	...

08008c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0b8      	sub	sp, #224	; 0xe0
 8008c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008c62:	2244      	movs	r2, #68	; 0x44
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 ff52 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	609a      	str	r2, [r3, #8]
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	2288      	movs	r2, #136	; 0x88
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ff44 	bl	8009b10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008c88:	2309      	movs	r3, #9
 8008c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8008cae:	2314      	movs	r3, #20
 8008cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008cb4:	2307      	movs	r3, #7
 8008cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f9 ff0c 	bl	8002ae8 <HAL_RCC_OscConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008cd6:	f000 f855 	bl	8008d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cda:	230f      	movs	r3, #15
 8008cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8008ce6:	2380      	movs	r3, #128	; 0x80
 8008ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008cf8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008cfc:	2102      	movs	r1, #2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa faa2 	bl	8003248 <HAL_RCC_ClockConfig>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8008d0a:	f000 f83b 	bl	8008d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8008d0e:	4b1c      	ldr	r3, [pc, #112]	; (8008d80 <SystemClock_Config+0x128>)
 8008d10:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008d16:	2300      	movs	r3, #0
 8008d18:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008d30:	2303      	movs	r3, #3
 8008d32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008d38:	2318      	movs	r3, #24
 8008d3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008d3c:	2307      	movs	r3, #7
 8008d3e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8008d40:	2304      	movs	r3, #4
 8008d42:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008d44:	2302      	movs	r3, #2
 8008d46:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8008d48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008d4c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d4e:	463b      	mov	r3, r7
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fa fc8d 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8008d5c:	f000 f812 	bl	8008d84 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8008d60:	f7fa fc16 	bl	8003590 <HAL_RCC_EnableCSS>
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008d64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d68:	f7f9 fd90 	bl	800288c <HAL_PWREx_ControlVoltageScaling>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8008d72:	f000 f807 	bl	8008d84 <Error_Handler>
  }
}
 8008d76:	bf00      	nop
 8008d78:	37e0      	adds	r7, #224	; 0xe0
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	000228c2 	.word	0x000228c2

08008d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008d9a:	4a10      	ldr	r2, [pc, #64]	; (8008ddc <MX_QUADSPI_Init+0x48>)
 8008d9c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8008db6:	4b08      	ldr	r3, [pc, #32]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <MX_QUADSPI_Init+0x44>)
 8008dc4:	f7f9 fdc8 	bl	8002958 <HAL_QSPI_Init>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8008dce:	f7ff ffd9 	bl	8008d84 <Error_Handler>
  }

}
 8008dd2:	bf00      	nop
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000019c 	.word	0x2000019c
 8008ddc:	a0001000 	.word	0xa0001000

08008de0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	; 0x28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de8:	f107 0314 	add.w	r3, r7, #20
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	605a      	str	r2, [r3, #4]
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <HAL_QSPI_MspInit+0x7c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d128      	bne.n	8008e54 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e06:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8008e0e:	4b14      	ldr	r3, [pc, #80]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e1a:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1e:	4a10      	ldr	r2, [pc, #64]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e20:	f043 0310 	orr.w	r3, r3, #16
 8008e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e26:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <HAL_QSPI_MspInit+0x80>)
 8008e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8008e32:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8008e36:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e40:	2303      	movs	r3, #3
 8008e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008e44:	230a      	movs	r3, #10
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e48:	f107 0314 	add.w	r3, r7, #20
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <HAL_QSPI_MspInit+0x84>)
 8008e50:	f7f7 fd26 	bl	80008a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8008e54:	bf00      	nop
 8008e56:	3728      	adds	r7, #40	; 0x28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	a0001000 	.word	0xa0001000
 8008e60:	40021000 	.word	0x40021000
 8008e64:	48001000 	.word	0x48001000

08008e68 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8008e6c:	4b4d      	ldr	r3, [pc, #308]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e6e:	4a4e      	ldr	r2, [pc, #312]	; (8008fa8 <MX_SAI1_Init+0x140>)
 8008e70:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8008e72:	4b4c      	ldr	r3, [pc, #304]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008e78:	4b4a      	ldr	r3, [pc, #296]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8008e7e:	4b49      	ldr	r3, [pc, #292]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e80:	2240      	movs	r2, #64	; 0x40
 8008e82:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008e84:	4b47      	ldr	r3, [pc, #284]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008e8a:	4b46      	ldr	r3, [pc, #280]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008e90:	4b44      	ldr	r3, [pc, #272]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008e96:	4b43      	ldr	r3, [pc, #268]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008e9c:	4b41      	ldr	r3, [pc, #260]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008ea2:	4b40      	ldr	r3, [pc, #256]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008ea8:	4b3e      	ldr	r3, [pc, #248]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008eaa:	4a40      	ldr	r2, [pc, #256]	; (8008fac <MX_SAI1_Init+0x144>)
 8008eac:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008eae:	4b3d      	ldr	r3, [pc, #244]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008eb4:	4b3b      	ldr	r3, [pc, #236]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008eba:	4b3a      	ldr	r3, [pc, #232]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008ec0:	4b38      	ldr	r3, [pc, #224]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ec8:	2208      	movs	r2, #8
 8008eca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8008ecc:	4b35      	ldr	r3, [pc, #212]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008ed2:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008ed8:	4b32      	ldr	r3, [pc, #200]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8008ede:	4b31      	ldr	r3, [pc, #196]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8008ee4:	4b2f      	ldr	r3, [pc, #188]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008eea:	4b2e      	ldr	r3, [pc, #184]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8008ef0:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8008ef6:	4b2b      	ldr	r3, [pc, #172]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8008efc:	4829      	ldr	r0, [pc, #164]	; (8008fa4 <MX_SAI1_Init+0x13c>)
 8008efe:	f7fb fdb7 	bl	8004a70 <HAL_SAI_Init>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8008f08:	f7ff ff3c 	bl	8008d84 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8008f0c:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f0e:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <MX_SAI1_Init+0x14c>)
 8008f10:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8008f12:	4b27      	ldr	r3, [pc, #156]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8008f1e:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f20:	2240      	movs	r2, #64	; 0x40
 8008f22:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008f24:	4b22      	ldr	r3, [pc, #136]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008f2a:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008f30:	4b1f      	ldr	r3, [pc, #124]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008f3c:	4b1c      	ldr	r3, [pc, #112]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008f42:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008f48:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008f54:	4b16      	ldr	r3, [pc, #88]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f5c:	2218      	movs	r2, #24
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8008f72:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8008f84:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f86:	2201      	movs	r2, #1
 8008f88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8008f8a:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <MX_SAI1_Init+0x148>)
 8008f92:	f7fb fd6d 	bl	8004a70 <HAL_SAI_Init>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8008f9c:	f7ff fef2 	bl	8008d84 <Error_Handler>
  }

}
 8008fa0:	bf00      	nop
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000264 	.word	0x20000264
 8008fa8:	40015404 	.word	0x40015404
 8008fac:	0002ee00 	.word	0x0002ee00
 8008fb0:	200001e0 	.word	0x200001e0
 8008fb4:	40015424 	.word	0x40015424

08008fb8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a33      	ldr	r2, [pc, #204]	; (8009094 <HAL_SAI_MspInit+0xdc>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d135      	bne.n	8009036 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8008fca:	4b33      	ldr	r3, [pc, #204]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10b      	bne.n	8008fea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008fd2:	4b32      	ldr	r3, [pc, #200]	; (800909c <HAL_SAI_MspInit+0xe4>)
 8008fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd6:	4a31      	ldr	r2, [pc, #196]	; (800909c <HAL_SAI_MspInit+0xe4>)
 8008fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8008fde:	4b2f      	ldr	r3, [pc, #188]	; (800909c <HAL_SAI_MspInit+0xe4>)
 8008fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8008fea:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	4a29      	ldr	r2, [pc, #164]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8008ff2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8008ff4:	2374      	movs	r3, #116	; 0x74
 8008ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009000:	2303      	movs	r3, #3
 8009002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8009004:	230d      	movs	r3, #13
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009008:	f107 0314 	add.w	r3, r7, #20
 800900c:	4619      	mov	r1, r3
 800900e:	4824      	ldr	r0, [pc, #144]	; (80090a0 <HAL_SAI_MspInit+0xe8>)
 8009010:	f7f7 fc46 	bl	80008a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8009014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901a:	2302      	movs	r3, #2
 800901c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009022:	2300      	movs	r3, #0
 8009024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8009026:	230d      	movs	r3, #13
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800902a:	f107 0314 	add.w	r3, r7, #20
 800902e:	4619      	mov	r1, r3
 8009030:	481b      	ldr	r0, [pc, #108]	; (80090a0 <HAL_SAI_MspInit+0xe8>)
 8009032:	f7f7 fc35 	bl	80008a0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1a      	ldr	r2, [pc, #104]	; (80090a4 <HAL_SAI_MspInit+0xec>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d124      	bne.n	800908a <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8009040:	4b15      	ldr	r3, [pc, #84]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009048:	4b14      	ldr	r3, [pc, #80]	; (800909c <HAL_SAI_MspInit+0xe4>)
 800904a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <HAL_SAI_MspInit+0xe4>)
 800904e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009052:	6613      	str	r3, [r2, #96]	; 0x60
 8009054:	4b11      	ldr	r3, [pc, #68]	; (800909c <HAL_SAI_MspInit+0xe4>)
 8009056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <HAL_SAI_MspInit+0xe0>)
 8009068:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800906a:	2380      	movs	r3, #128	; 0x80
 800906c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800906e:	2302      	movs	r3, #2
 8009070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009072:	2300      	movs	r3, #0
 8009074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009076:	2303      	movs	r3, #3
 8009078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800907a:	230d      	movs	r3, #13
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	4619      	mov	r1, r3
 8009084:	4806      	ldr	r0, [pc, #24]	; (80090a0 <HAL_SAI_MspInit+0xe8>)
 8009086:	f7f7 fc0b 	bl	80008a0 <HAL_GPIO_Init>

    }
}
 800908a:	bf00      	nop
 800908c:	3728      	adds	r7, #40	; 0x28
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	40015404 	.word	0x40015404
 8009098:	200000b0 	.word	0x200000b0
 800909c:	40021000 	.word	0x40021000
 80090a0:	48001000 	.word	0x48001000
 80090a4:	40015424 	.word	0x40015424

080090a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80090ac:	4b1b      	ldr	r3, [pc, #108]	; (800911c <MX_SPI2_Init+0x74>)
 80090ae:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <MX_SPI2_Init+0x78>)
 80090b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80090b2:	4b1a      	ldr	r3, [pc, #104]	; (800911c <MX_SPI2_Init+0x74>)
 80090b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80090b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80090ba:	4b18      	ldr	r3, [pc, #96]	; (800911c <MX_SPI2_Init+0x74>)
 80090bc:	2200      	movs	r2, #0
 80090be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80090c0:	4b16      	ldr	r3, [pc, #88]	; (800911c <MX_SPI2_Init+0x74>)
 80090c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80090c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80090c8:	4b14      	ldr	r3, [pc, #80]	; (800911c <MX_SPI2_Init+0x74>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <MX_SPI2_Init+0x74>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80090d4:	4b11      	ldr	r3, [pc, #68]	; (800911c <MX_SPI2_Init+0x74>)
 80090d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <MX_SPI2_Init+0x74>)
 80090de:	2200      	movs	r2, #0
 80090e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80090e2:	4b0e      	ldr	r3, [pc, #56]	; (800911c <MX_SPI2_Init+0x74>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <MX_SPI2_Init+0x74>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090ee:	4b0b      	ldr	r3, [pc, #44]	; (800911c <MX_SPI2_Init+0x74>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <MX_SPI2_Init+0x74>)
 80090f6:	2207      	movs	r2, #7
 80090f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80090fa:	4b08      	ldr	r3, [pc, #32]	; (800911c <MX_SPI2_Init+0x74>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <MX_SPI2_Init+0x74>)
 8009102:	2208      	movs	r2, #8
 8009104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009106:	4805      	ldr	r0, [pc, #20]	; (800911c <MX_SPI2_Init+0x74>)
 8009108:	f7fb fe4c 	bl	8004da4 <HAL_SPI_Init>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009112:	f7ff fe37 	bl	8008d84 <Error_Handler>
  }

}
 8009116:	bf00      	nop
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200002e8 	.word	0x200002e8
 8009120:	40003800 	.word	0x40003800

08009124 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08a      	sub	sp, #40	; 0x28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800912c:	f107 0314 	add.w	r3, r7, #20
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	609a      	str	r2, [r3, #8]
 8009138:	60da      	str	r2, [r3, #12]
 800913a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <HAL_SPI_MspInit+0x7c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d127      	bne.n	8009196 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009146:	4b17      	ldr	r3, [pc, #92]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 8009148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914a:	4a16      	ldr	r2, [pc, #88]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 800914c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009150:	6593      	str	r3, [r2, #88]	; 0x58
 8009152:	4b14      	ldr	r3, [pc, #80]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 8009154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800915e:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 8009160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 8009164:	f043 0308 	orr.w	r3, r3, #8
 8009168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800916a:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <HAL_SPI_MspInit+0x80>)
 800916c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8009176:	231a      	movs	r3, #26
 8009178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800917a:	2302      	movs	r3, #2
 800917c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917e:	2300      	movs	r3, #0
 8009180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009182:	2303      	movs	r3, #3
 8009184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009186:	2305      	movs	r3, #5
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800918a:	f107 0314 	add.w	r3, r7, #20
 800918e:	4619      	mov	r1, r3
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <HAL_SPI_MspInit+0x84>)
 8009192:	f7f7 fb85 	bl	80008a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009196:	bf00      	nop
 8009198:	3728      	adds	r7, #40	; 0x28
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	40003800 	.word	0x40003800
 80091a4:	40021000 	.word	0x40021000
 80091a8:	48000c00 	.word	0x48000c00

080091ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091b2:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <HAL_MspInit+0x44>)
 80091b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091b6:	4a0e      	ldr	r2, [pc, #56]	; (80091f0 <HAL_MspInit+0x44>)
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	6613      	str	r3, [r2, #96]	; 0x60
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <HAL_MspInit+0x44>)
 80091c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	607b      	str	r3, [r7, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <HAL_MspInit+0x44>)
 80091cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ce:	4a08      	ldr	r2, [pc, #32]	; (80091f0 <HAL_MspInit+0x44>)
 80091d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6593      	str	r3, [r2, #88]	; 0x58
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <HAL_MspInit+0x44>)
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091de:	603b      	str	r3, [r7, #0]
 80091e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40021000 	.word	0x40021000

080091f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80091f8:	bf00      	nop
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009202:	b480      	push	{r7}
 8009204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009206:	e7fe      	b.n	8009206 <HardFault_Handler+0x4>

08009208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800920c:	e7fe      	b.n	800920c <MemManage_Handler+0x4>

0800920e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800920e:	b480      	push	{r7}
 8009210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009212:	e7fe      	b.n	8009212 <BusFault_Handler+0x4>

08009214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009214:	b480      	push	{r7}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009218:	e7fe      	b.n	8009218 <UsageFault_Handler+0x4>

0800921a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800921a:	b480      	push	{r7}
 800921c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800921e:	bf00      	nop
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009236:	b480      	push	{r7}
 8009238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009248:	f7f7 f998 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800924c:	bf00      	nop
 800924e:	bd80      	pop	{r7, pc}

08009250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009254:	4802      	ldr	r0, [pc, #8]	; (8009260 <USART2_IRQHandler+0x10>)
 8009256:	f7fb ff11 	bl	800507c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000034c 	.word	0x2000034c

08009264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009268:	4802      	ldr	r0, [pc, #8]	; (8009274 <OTG_FS_IRQHandler+0x10>)
 800926a:	f7f7 ff5b 	bl	8001124 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800926e:	bf00      	nop
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000798 	.word	0x20000798

08009278 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009280:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <_sbrk+0x50>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <_sbrk+0x16>
		heap_end = &end;
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <_sbrk+0x50>)
 800928a:	4a10      	ldr	r2, [pc, #64]	; (80092cc <_sbrk+0x54>)
 800928c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800928e:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <_sbrk+0x50>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <_sbrk+0x50>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	466a      	mov	r2, sp
 800929e:	4293      	cmp	r3, r2
 80092a0:	d907      	bls.n	80092b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80092a2:	f000 fbfb 	bl	8009a9c <__errno>
 80092a6:	4602      	mov	r2, r0
 80092a8:	230c      	movs	r3, #12
 80092aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80092ac:	f04f 33ff 	mov.w	r3, #4294967295
 80092b0:	e006      	b.n	80092c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <_sbrk+0x50>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	4a03      	ldr	r2, [pc, #12]	; (80092c8 <_sbrk+0x50>)
 80092bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80092be:	68fb      	ldr	r3, [r7, #12]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	200000b4 	.word	0x200000b4
 80092cc:	20000a60 	.word	0x20000a60

080092d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092d4:	4b17      	ldr	r3, [pc, #92]	; (8009334 <SystemInit+0x64>)
 80092d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092da:	4a16      	ldr	r2, [pc, #88]	; (8009334 <SystemInit+0x64>)
 80092dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80092e4:	4b14      	ldr	r3, [pc, #80]	; (8009338 <SystemInit+0x68>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a13      	ldr	r2, [pc, #76]	; (8009338 <SystemInit+0x68>)
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80092f0:	4b11      	ldr	r3, [pc, #68]	; (8009338 <SystemInit+0x68>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <SystemInit+0x68>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <SystemInit+0x68>)
 80092fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009300:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009304:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <SystemInit+0x68>)
 8009308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800930c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800930e:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <SystemInit+0x68>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a09      	ldr	r2, [pc, #36]	; (8009338 <SystemInit+0x68>)
 8009314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009318:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <SystemInit+0x68>)
 800931c:	2200      	movs	r2, #0
 800931e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <SystemInit+0x64>)
 8009322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009326:	609a      	str	r2, [r3, #8]
#endif
}
 8009328:	bf00      	nop
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000ed00 	.word	0xe000ed00
 8009338:	40021000 	.word	0x40021000

0800933c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009340:	4b14      	ldr	r3, [pc, #80]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <MX_USART2_UART_Init+0x5c>)
 8009344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800934c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009350:	2200      	movs	r2, #0
 8009352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009356:	2200      	movs	r2, #0
 8009358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800935a:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <MX_USART2_UART_Init+0x58>)
 800935c:	2200      	movs	r2, #0
 800935e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009360:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009362:	220c      	movs	r2, #12
 8009364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009368:	2200      	movs	r2, #0
 800936a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <MX_USART2_UART_Init+0x58>)
 800936e:	2200      	movs	r2, #0
 8009370:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009372:	4b08      	ldr	r3, [pc, #32]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009374:	2200      	movs	r2, #0
 8009376:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <MX_USART2_UART_Init+0x58>)
 800937a:	2200      	movs	r2, #0
 800937c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800937e:	4805      	ldr	r0, [pc, #20]	; (8009394 <MX_USART2_UART_Init+0x58>)
 8009380:	f7fb fd9a 	bl	8004eb8 <HAL_UART_Init>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800938a:	f7ff fcfb 	bl	8008d84 <Error_Handler>
  }

}
 800938e:	bf00      	nop
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000034c 	.word	0x2000034c
 8009398:	40004400 	.word	0x40004400

0800939c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08a      	sub	sp, #40	; 0x28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a4:	f107 0314 	add.w	r3, r7, #20
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	609a      	str	r2, [r3, #8]
 80093b0:	60da      	str	r2, [r3, #12]
 80093b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1b      	ldr	r2, [pc, #108]	; (8009428 <HAL_UART_MspInit+0x8c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d130      	bne.n	8009420 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80093be:	4b1b      	ldr	r3, [pc, #108]	; (800942c <HAL_UART_MspInit+0x90>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	4a1a      	ldr	r2, [pc, #104]	; (800942c <HAL_UART_MspInit+0x90>)
 80093c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093c8:	6593      	str	r3, [r2, #88]	; 0x58
 80093ca:	4b18      	ldr	r3, [pc, #96]	; (800942c <HAL_UART_MspInit+0x90>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d2:	613b      	str	r3, [r7, #16]
 80093d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093d6:	4b15      	ldr	r3, [pc, #84]	; (800942c <HAL_UART_MspInit+0x90>)
 80093d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093da:	4a14      	ldr	r2, [pc, #80]	; (800942c <HAL_UART_MspInit+0x90>)
 80093dc:	f043 0301 	orr.w	r3, r3, #1
 80093e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093e2:	4b12      	ldr	r3, [pc, #72]	; (800942c <HAL_UART_MspInit+0x90>)
 80093e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80093ee:	230c      	movs	r3, #12
 80093f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f2:	2302      	movs	r3, #2
 80093f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093f6:	2301      	movs	r3, #1
 80093f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093fa:	2303      	movs	r3, #3
 80093fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80093fe:	2307      	movs	r3, #7
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009402:	f107 0314 	add.w	r3, r7, #20
 8009406:	4619      	mov	r1, r3
 8009408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800940c:	f7f7 fa48 	bl	80008a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009410:	2200      	movs	r2, #0
 8009412:	2100      	movs	r1, #0
 8009414:	2026      	movs	r0, #38	; 0x26
 8009416:	f7f7 f9cc 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800941a:	2026      	movs	r0, #38	; 0x26
 800941c:	f7f7 f9e5 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009420:	bf00      	nop
 8009422:	3728      	adds	r7, #40	; 0x28
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40004400 	.word	0x40004400
 800942c:	40021000 	.word	0x40021000

08009430 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009434:	2201      	movs	r2, #1
 8009436:	490e      	ldr	r1, [pc, #56]	; (8009470 <MX_USB_HOST_Init+0x40>)
 8009438:	480e      	ldr	r0, [pc, #56]	; (8009474 <MX_USB_HOST_Init+0x44>)
 800943a:	f7fd fe21 	bl	8007080 <USBH_Init>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009444:	f7ff fc9e 	bl	8008d84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009448:	490b      	ldr	r1, [pc, #44]	; (8009478 <MX_USB_HOST_Init+0x48>)
 800944a:	480a      	ldr	r0, [pc, #40]	; (8009474 <MX_USB_HOST_Init+0x44>)
 800944c:	f7fd fe8b 	bl	8007166 <USBH_RegisterClass>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009456:	f7ff fc95 	bl	8008d84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800945a:	4806      	ldr	r0, [pc, #24]	; (8009474 <MX_USB_HOST_Init+0x44>)
 800945c:	f7fd ff10 	bl	8007280 <USBH_Start>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009466:	f7ff fc8d 	bl	8008d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800946a:	bf00      	nop
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	08009491 	.word	0x08009491
 8009474:	200003cc 	.word	0x200003cc
 8009478:	20000008 	.word	0x20000008

0800947c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009480:	4802      	ldr	r0, [pc, #8]	; (800948c <MX_USB_HOST_Process+0x10>)
 8009482:	f7fd ff0d 	bl	80072a0 <USBH_Process>
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200003cc 	.word	0x200003cc

08009490 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	3b01      	subs	r3, #1
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d819      	bhi.n	80094d8 <USBH_UserProcess+0x48>
 80094a4:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBH_UserProcess+0x1c>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094d9 	.word	0x080094d9
 80094b0:	080094c9 	.word	0x080094c9
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094c1 	.word	0x080094c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094c0:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <USBH_UserProcess+0x58>)
 80094c2:	2203      	movs	r2, #3
 80094c4:	701a      	strb	r2, [r3, #0]
  break;
 80094c6:	e008      	b.n	80094da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094c8:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <USBH_UserProcess+0x58>)
 80094ca:	2202      	movs	r2, #2
 80094cc:	701a      	strb	r2, [r3, #0]
  break;
 80094ce:	e004      	b.n	80094da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <USBH_UserProcess+0x58>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]
  break;
 80094d6:	e000      	b.n	80094da <USBH_UserProcess+0x4a>

  default:
  break;
 80094d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	200000b8 	.word	0x200000b8

080094ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f4:	f107 0314 	add.w	r3, r7, #20
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	605a      	str	r2, [r3, #4]
 80094fe:	609a      	str	r2, [r3, #8]
 8009500:	60da      	str	r2, [r3, #12]
 8009502:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800950c:	d14e      	bne.n	80095ac <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800950e:	4b29      	ldr	r3, [pc, #164]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009512:	4a28      	ldr	r2, [pc, #160]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800951a:	4b26      	ldr	r3, [pc, #152]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 800951c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009526:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800952a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952c:	2302      	movs	r3, #2
 800952e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009534:	2303      	movs	r3, #3
 8009536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009538:	230a      	movs	r3, #10
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	4619      	mov	r1, r3
 8009542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009546:	f7f7 f9ab 	bl	80008a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800954a:	4b1a      	ldr	r3, [pc, #104]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	4a19      	ldr	r2, [pc, #100]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009556:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009562:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d114      	bne.n	8009598 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009572:	4a10      	ldr	r2, [pc, #64]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009578:	6593      	str	r3, [r2, #88]	; 0x58
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 800957c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009582:	60bb      	str	r3, [r7, #8]
 8009584:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009586:	f7f9 f9d7 	bl	8002938 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 800958c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <HAL_HCD_MspInit+0xc8>)
 8009590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009594:	6593      	str	r3, [r2, #88]	; 0x58
 8009596:	e001      	b.n	800959c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009598:	f7f9 f9ce 	bl	8002938 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800959c:	2200      	movs	r2, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	2043      	movs	r0, #67	; 0x43
 80095a2:	f7f7 f906 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095a6:	2043      	movs	r0, #67	; 0x43
 80095a8:	f7f7 f91f 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095ac:	bf00      	nop
 80095ae:	3728      	adds	r7, #40	; 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40021000 	.word	0x40021000

080095b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe f91b 	bl	8007802 <USBH_LL_IncTimer>
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe f960 	bl	80078a8 <USBH_LL_Connect>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe f978 	bl	80078f4 <USBH_LL_Disconnect>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
 8009618:	4613      	mov	r3, r2
 800961a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f90d 	bl	8007856 <USBH_LL_PortEnabled>
} 
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe f90d 	bl	8007872 <USBH_LL_PortDisabled>
} 
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800966e:	2b01      	cmp	r3, #1
 8009670:	d12a      	bne.n	80096c8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009672:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <USBH_LL_Init+0x74>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <USBH_LL_Init+0x74>)
 800967e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009682:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <USBH_LL_Init+0x74>)
 8009684:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009688:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800968a:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <USBH_LL_Init+0x74>)
 800968c:	2208      	movs	r2, #8
 800968e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009690:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <USBH_LL_Init+0x74>)
 8009692:	2201      	movs	r2, #1
 8009694:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <USBH_LL_Init+0x74>)
 8009698:	2200      	movs	r2, #0
 800969a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800969c:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <USBH_LL_Init+0x74>)
 800969e:	2202      	movs	r2, #2
 80096a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <USBH_LL_Init+0x74>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096a8:	480a      	ldr	r0, [pc, #40]	; (80096d4 <USBH_LL_Init+0x74>)
 80096aa:	f7f7 fab9 	bl	8000c20 <HAL_HCD_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096b4:	f7ff fb66 	bl	8008d84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096b8:	4806      	ldr	r0, [pc, #24]	; (80096d4 <USBH_LL_Init+0x74>)
 80096ba:	f7f7 feb1 	bl	8001420 <HAL_HCD_GetCurrentFrame>
 80096be:	4603      	mov	r3, r0
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe f88e 	bl	80077e4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000798 	.word	0x20000798

080096d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f7 fe1e 	bl	8001330 <HAL_HCD_Start>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f95c 	bl	80099b8 <USBH_Get_USB_Status>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009704:	7bbb      	ldrb	r3, [r7, #14]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009724:	4618      	mov	r0, r3
 8009726:	f7f7 fe26 	bl	8001376 <HAL_HCD_Stop>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f941 	bl	80099b8 <USBH_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800973a:	7bbb      	ldrb	r3, [r7, #14]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009756:	4618      	mov	r0, r3
 8009758:	f7f7 fe70 	bl	800143c <HAL_HCD_GetCurrentSpeed>
 800975c:	4603      	mov	r3, r0
 800975e:	2b01      	cmp	r3, #1
 8009760:	d007      	beq.n	8009772 <USBH_LL_GetSpeed+0x2e>
 8009762:	2b01      	cmp	r3, #1
 8009764:	d302      	bcc.n	800976c <USBH_LL_GetSpeed+0x28>
 8009766:	2b02      	cmp	r3, #2
 8009768:	d006      	beq.n	8009778 <USBH_LL_GetSpeed+0x34>
 800976a:	e008      	b.n	800977e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	e008      	b.n	8009784 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
    break;
 8009776:	e005      	b.n	8009784 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009778:	2302      	movs	r3, #2
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e002      	b.n	8009784 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	bf00      	nop
  }
  return  speed;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f7 fe03 	bl	80013b0 <HAL_HCD_ResetPort>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f901 	bl	80099b8 <USBH_Get_USB_Status>
 80097b6:	4603      	mov	r3, r0
 80097b8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f7 fe0b 	bl	80013f6 <HAL_HCD_HC_GetXferCount>
 80097e0:	4603      	mov	r3, r0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b089      	sub	sp, #36	; 0x24
 80097ee:	af04      	add	r7, sp, #16
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70bb      	strb	r3, [r7, #2]
 8009800:	4613      	mov	r3, r2
 8009802:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009812:	787c      	ldrb	r4, [r7, #1]
 8009814:	78ba      	ldrb	r2, [r7, #2]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4623      	mov	r3, r4
 800982a:	f7f7 fa5b 	bl	8000ce4 <HAL_HCD_HC_Init>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f8bf 	bl	80099b8 <USBH_Get_USB_Status>
 800983a:	4603      	mov	r3, r0
 800983c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	bd90      	pop	{r4, r7, pc}

08009848 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f7 fad4 	bl	8000e14 <HAL_HCD_HC_Halt>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f8a0 	bl	80099b8 <USBH_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009886:	b590      	push	{r4, r7, lr}
 8009888:	b089      	sub	sp, #36	; 0x24
 800988a:	af04      	add	r7, sp, #16
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	4608      	mov	r0, r1
 8009890:	4611      	mov	r1, r2
 8009892:	461a      	mov	r2, r3
 8009894:	4603      	mov	r3, r0
 8009896:	70fb      	strb	r3, [r7, #3]
 8009898:	460b      	mov	r3, r1
 800989a:	70bb      	strb	r3, [r7, #2]
 800989c:	4613      	mov	r3, r2
 800989e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80098ae:	787c      	ldrb	r4, [r7, #1]
 80098b0:	78ba      	ldrb	r2, [r7, #2]
 80098b2:	78f9      	ldrb	r1, [r7, #3]
 80098b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4623      	mov	r3, r4
 80098ca:	f7f7 fac7 	bl	8000e5c <HAL_HCD_HC_SubmitRequest>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 f86f 	bl	80099b8 <USBH_Get_USB_Status>
 80098da:	4603      	mov	r3, r0
 80098dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80098de:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd90      	pop	{r4, r7, pc}

080098e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f7 fd64 	bl	80013cc <HAL_HCD_HC_GetURBState>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009920:	2b01      	cmp	r3, #1
 8009922:	d103      	bne.n	800992c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f872 	bl	8009a10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800992c:	20c8      	movs	r0, #200	; 0xc8
 800992e:	f7f6 fe43 	bl	80005b8 <HAL_Delay>
  return USBH_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
 8009948:	4613      	mov	r3, r2
 800994a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009952:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	440b      	add	r3, r1
 8009962:	333b      	adds	r3, #59	; 0x3b
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	68f9      	ldr	r1, [r7, #12]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	440b      	add	r3, r1
 8009978:	3350      	adds	r3, #80	; 0x50
 800997a:	78ba      	ldrb	r2, [r7, #2]
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e009      	b.n	8009994 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	440b      	add	r3, r1
 800998e:	3351      	adds	r3, #81	; 0x51
 8009990:	78ba      	ldrb	r2, [r7, #2]
 8009992:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f6 fe04 	bl	80005b8 <HAL_Delay>
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099c6:	79fb      	ldrb	r3, [r7, #7]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d817      	bhi.n	80099fc <USBH_Get_USB_Status+0x44>
 80099cc:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <USBH_Get_USB_Status+0x1c>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	080099eb 	.word	0x080099eb
 80099dc:	080099f1 	.word	0x080099f1
 80099e0:	080099f7 	.word	0x080099f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
    break;
 80099e8:	e00b      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099ea:	2302      	movs	r3, #2
 80099ec:	73fb      	strb	r3, [r7, #15]
    break;
 80099ee:	e008      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
    break;
 80099f4:	e005      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099f6:	2302      	movs	r3, #2
 80099f8:	73fb      	strb	r3, [r7, #15]
    break;
 80099fa:	e002      	b.n	8009a02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099fc:	2302      	movs	r3, #2
 80099fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009a00:	bf00      	nop
  }
  return usb_status;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
 8009a28:	e001      	b.n	8009a2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	461a      	mov	r2, r3
 8009a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a36:	4803      	ldr	r0, [pc, #12]	; (8009a44 <MX_DriverVbusFS+0x34>)
 8009a38:	f7f7 f8da 	bl	8000bf0 <HAL_GPIO_WritePin>
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	48000800 	.word	0x48000800

08009a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009a4e:	e003      	b.n	8009a58 <LoopCopyDataInit>

08009a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009a50:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009a56:	3104      	adds	r1, #4

08009a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009a58:	480b      	ldr	r0, [pc, #44]	; (8009a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8009a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009a60:	d3f6      	bcc.n	8009a50 <CopyDataInit>
	ldr	r2, =_sbss
 8009a62:	4a0b      	ldr	r2, [pc, #44]	; (8009a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009a64:	e002      	b.n	8009a6c <LoopFillZerobss>

08009a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009a68:	f842 3b04 	str.w	r3, [r2], #4

08009a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009a6c:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <LoopForever+0x16>)
	cmp	r2, r3
 8009a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009a70:	d3f9      	bcc.n	8009a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009a72:	f7ff fc2d 	bl	80092d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a76:	f000 f817 	bl	8009aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009a7a:	f7ff f8bb 	bl	8008bf4 <main>

08009a7e <LoopForever>:

LoopForever:
    b LoopForever
 8009a7e:	e7fe      	b.n	8009a7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009a80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8009a84:	08009d08 	.word	0x08009d08
	ldr	r0, =_sdata
 8009a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009a8c:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8009a90:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8009a94:	20000a60 	.word	0x20000a60

08009a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009a98:	e7fe      	b.n	8009a98 <ADC1_2_IRQHandler>
	...

08009a9c <__errno>:
 8009a9c:	4b01      	ldr	r3, [pc, #4]	; (8009aa4 <__errno+0x8>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	2000002c 	.word	0x2000002c

08009aa8 <__libc_init_array>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4e0d      	ldr	r6, [pc, #52]	; (8009ae0 <__libc_init_array+0x38>)
 8009aac:	4c0d      	ldr	r4, [pc, #52]	; (8009ae4 <__libc_init_array+0x3c>)
 8009aae:	1ba4      	subs	r4, r4, r6
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	2500      	movs	r5, #0
 8009ab4:	42a5      	cmp	r5, r4
 8009ab6:	d109      	bne.n	8009acc <__libc_init_array+0x24>
 8009ab8:	4e0b      	ldr	r6, [pc, #44]	; (8009ae8 <__libc_init_array+0x40>)
 8009aba:	4c0c      	ldr	r4, [pc, #48]	; (8009aec <__libc_init_array+0x44>)
 8009abc:	f000 f8ea 	bl	8009c94 <_init>
 8009ac0:	1ba4      	subs	r4, r4, r6
 8009ac2:	10a4      	asrs	r4, r4, #2
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	42a5      	cmp	r5, r4
 8009ac8:	d105      	bne.n	8009ad6 <__libc_init_array+0x2e>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ad0:	4798      	blx	r3
 8009ad2:	3501      	adds	r5, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__libc_init_array+0xc>
 8009ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ada:	4798      	blx	r3
 8009adc:	3501      	adds	r5, #1
 8009ade:	e7f2      	b.n	8009ac6 <__libc_init_array+0x1e>
 8009ae0:	08009d00 	.word	0x08009d00
 8009ae4:	08009d00 	.word	0x08009d00
 8009ae8:	08009d00 	.word	0x08009d00
 8009aec:	08009d04 	.word	0x08009d04

08009af0 <malloc>:
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <malloc+0xc>)
 8009af2:	4601      	mov	r1, r0
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f000 b861 	b.w	8009bbc <_malloc_r>
 8009afa:	bf00      	nop
 8009afc:	2000002c 	.word	0x2000002c

08009b00 <free>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <free+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f000 b80b 	b.w	8009b20 <_free_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000002c 	.word	0x2000002c

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <_free_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4605      	mov	r5, r0
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d045      	beq.n	8009bb4 <_free_r+0x94>
 8009b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2c:	1f0c      	subs	r4, r1, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bfb8      	it	lt
 8009b32:	18e4      	addlt	r4, r4, r3
 8009b34:	f000 f8ac 	bl	8009c90 <__malloc_lock>
 8009b38:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <_free_r+0x98>)
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	b933      	cbnz	r3, 8009b4e <_free_r+0x2e>
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	6014      	str	r4, [r2, #0]
 8009b44:	4628      	mov	r0, r5
 8009b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4a:	f000 b8a2 	b.w	8009c92 <__malloc_unlock>
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	d90c      	bls.n	8009b6c <_free_r+0x4c>
 8009b52:	6821      	ldr	r1, [r4, #0]
 8009b54:	1862      	adds	r2, r4, r1
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bf04      	itt	eq
 8009b5a:	681a      	ldreq	r2, [r3, #0]
 8009b5c:	685b      	ldreq	r3, [r3, #4]
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	bf04      	itt	eq
 8009b62:	1852      	addeq	r2, r2, r1
 8009b64:	6022      	streq	r2, [r4, #0]
 8009b66:	6004      	str	r4, [r0, #0]
 8009b68:	e7ec      	b.n	8009b44 <_free_r+0x24>
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	b10a      	cbz	r2, 8009b74 <_free_r+0x54>
 8009b70:	42a2      	cmp	r2, r4
 8009b72:	d9fa      	bls.n	8009b6a <_free_r+0x4a>
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	1858      	adds	r0, r3, r1
 8009b78:	42a0      	cmp	r0, r4
 8009b7a:	d10b      	bne.n	8009b94 <_free_r+0x74>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	4401      	add	r1, r0
 8009b80:	1858      	adds	r0, r3, r1
 8009b82:	4282      	cmp	r2, r0
 8009b84:	6019      	str	r1, [r3, #0]
 8009b86:	d1dd      	bne.n	8009b44 <_free_r+0x24>
 8009b88:	6810      	ldr	r0, [r2, #0]
 8009b8a:	6852      	ldr	r2, [r2, #4]
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	4401      	add	r1, r0
 8009b90:	6019      	str	r1, [r3, #0]
 8009b92:	e7d7      	b.n	8009b44 <_free_r+0x24>
 8009b94:	d902      	bls.n	8009b9c <_free_r+0x7c>
 8009b96:	230c      	movs	r3, #12
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	e7d3      	b.n	8009b44 <_free_r+0x24>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	1821      	adds	r1, r4, r0
 8009ba0:	428a      	cmp	r2, r1
 8009ba2:	bf04      	itt	eq
 8009ba4:	6811      	ldreq	r1, [r2, #0]
 8009ba6:	6852      	ldreq	r2, [r2, #4]
 8009ba8:	6062      	str	r2, [r4, #4]
 8009baa:	bf04      	itt	eq
 8009bac:	1809      	addeq	r1, r1, r0
 8009bae:	6021      	streq	r1, [r4, #0]
 8009bb0:	605c      	str	r4, [r3, #4]
 8009bb2:	e7c7      	b.n	8009b44 <_free_r+0x24>
 8009bb4:	bd38      	pop	{r3, r4, r5, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200000bc 	.word	0x200000bc

08009bbc <_malloc_r>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	1ccd      	adds	r5, r1, #3
 8009bc0:	f025 0503 	bic.w	r5, r5, #3
 8009bc4:	3508      	adds	r5, #8
 8009bc6:	2d0c      	cmp	r5, #12
 8009bc8:	bf38      	it	cc
 8009bca:	250c      	movcc	r5, #12
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	4606      	mov	r6, r0
 8009bd0:	db01      	blt.n	8009bd6 <_malloc_r+0x1a>
 8009bd2:	42a9      	cmp	r1, r5
 8009bd4:	d903      	bls.n	8009bde <_malloc_r+0x22>
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	2000      	movs	r0, #0
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
 8009bde:	f000 f857 	bl	8009c90 <__malloc_lock>
 8009be2:	4a21      	ldr	r2, [pc, #132]	; (8009c68 <_malloc_r+0xac>)
 8009be4:	6814      	ldr	r4, [r2, #0]
 8009be6:	4621      	mov	r1, r4
 8009be8:	b991      	cbnz	r1, 8009c10 <_malloc_r+0x54>
 8009bea:	4c20      	ldr	r4, [pc, #128]	; (8009c6c <_malloc_r+0xb0>)
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	b91b      	cbnz	r3, 8009bf8 <_malloc_r+0x3c>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f000 f83d 	bl	8009c70 <_sbrk_r>
 8009bf6:	6020      	str	r0, [r4, #0]
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f000 f838 	bl	8009c70 <_sbrk_r>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d124      	bne.n	8009c4e <_malloc_r+0x92>
 8009c04:	230c      	movs	r3, #12
 8009c06:	6033      	str	r3, [r6, #0]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f842 	bl	8009c92 <__malloc_unlock>
 8009c0e:	e7e4      	b.n	8009bda <_malloc_r+0x1e>
 8009c10:	680b      	ldr	r3, [r1, #0]
 8009c12:	1b5b      	subs	r3, r3, r5
 8009c14:	d418      	bmi.n	8009c48 <_malloc_r+0x8c>
 8009c16:	2b0b      	cmp	r3, #11
 8009c18:	d90f      	bls.n	8009c3a <_malloc_r+0x7e>
 8009c1a:	600b      	str	r3, [r1, #0]
 8009c1c:	50cd      	str	r5, [r1, r3]
 8009c1e:	18cc      	adds	r4, r1, r3
 8009c20:	4630      	mov	r0, r6
 8009c22:	f000 f836 	bl	8009c92 <__malloc_unlock>
 8009c26:	f104 000b 	add.w	r0, r4, #11
 8009c2a:	1d23      	adds	r3, r4, #4
 8009c2c:	f020 0007 	bic.w	r0, r0, #7
 8009c30:	1ac3      	subs	r3, r0, r3
 8009c32:	d0d3      	beq.n	8009bdc <_malloc_r+0x20>
 8009c34:	425a      	negs	r2, r3
 8009c36:	50e2      	str	r2, [r4, r3]
 8009c38:	e7d0      	b.n	8009bdc <_malloc_r+0x20>
 8009c3a:	428c      	cmp	r4, r1
 8009c3c:	684b      	ldr	r3, [r1, #4]
 8009c3e:	bf16      	itet	ne
 8009c40:	6063      	strne	r3, [r4, #4]
 8009c42:	6013      	streq	r3, [r2, #0]
 8009c44:	460c      	movne	r4, r1
 8009c46:	e7eb      	b.n	8009c20 <_malloc_r+0x64>
 8009c48:	460c      	mov	r4, r1
 8009c4a:	6849      	ldr	r1, [r1, #4]
 8009c4c:	e7cc      	b.n	8009be8 <_malloc_r+0x2c>
 8009c4e:	1cc4      	adds	r4, r0, #3
 8009c50:	f024 0403 	bic.w	r4, r4, #3
 8009c54:	42a0      	cmp	r0, r4
 8009c56:	d005      	beq.n	8009c64 <_malloc_r+0xa8>
 8009c58:	1a21      	subs	r1, r4, r0
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f808 	bl	8009c70 <_sbrk_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d0cf      	beq.n	8009c04 <_malloc_r+0x48>
 8009c64:	6025      	str	r5, [r4, #0]
 8009c66:	e7db      	b.n	8009c20 <_malloc_r+0x64>
 8009c68:	200000bc 	.word	0x200000bc
 8009c6c:	200000c0 	.word	0x200000c0

08009c70 <_sbrk_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4c06      	ldr	r4, [pc, #24]	; (8009c8c <_sbrk_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4605      	mov	r5, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	f7ff fafc 	bl	8009278 <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_sbrk_r+0x1a>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_sbrk_r+0x1a>
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	20000a5c 	.word	0x20000a5c

08009c90 <__malloc_lock>:
 8009c90:	4770      	bx	lr

08009c92 <__malloc_unlock>:
 8009c92:	4770      	bx	lr

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
